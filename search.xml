<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络连接的三种模式</title>
      <link href="/2023/12/17/%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/17/%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="网络连接的三种模式"><a href="#网络连接的三种模式" class="headerlink" title="网络连接的三种模式"></a>网络连接的三种模式</h1><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接模式就是将主机网卡与虚拟的网卡利用虚拟网桥进行通信。类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机IP地址需要与主机在同一网段，如果需要联网，则网关与DNS需要与主机网卡一致。 </p><h2 id="NET模式"><a href="#NET模式" class="headerlink" title="NET模式"></a>NET模式</h2><p>主机更像是路由器，为虚拟机分发IP地址</p><h2 id="主机模式"><a href="#主机模式" class="headerlink" title="主机模式"></a>主机模式</h2><p>独立的系统</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/12/17/Linux/"/>
      <url>/2023/12/17/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="命令基础"><a href="#命令基础" class="headerlink" title="命令基础"></a>命令基础</h2><ul><li>命令行：Linux终端(Terminal)，是一种命令提示符页面。以纯字符的形式操作系统，可以使用各种字符命令对系统发出操作指令</li><li>命令：Linux程序，一个命令就是一个Linux的程序。命令没有图形化的页面，可以在命令行提供字符化的反馈</li></ul><h2 id="命令入门"><a href="#命令入门" class="headerlink" title="命令入门"></a>命令入门</h2><h3 id="ls-a-l-h-Linux路径"><a href="#ls-a-l-h-Linux路径" class="headerlink" title="ls [-a -l -h] [Linux路径]"></a>ls [-a -l -h] [Linux路径]</h3><p>+ </p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础教程</title>
      <link href="/2023/12/17/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/12/17/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看<strong>当前</strong>工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="96-反引号"><a href="#96-反引号" class="headerlink" title="&#96;反引号"></a>&#96;反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名&#x3D;变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS</title>
      <link href="/2023/12/04/HTML+CSS/"/>
      <url>/2023/12/04/HTML+CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>基本结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">“UTF-8”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>排版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>&lt;div&gt;标签没有实际的用处，CSS中用的多</li><li>h1~h6标签不能相互嵌套</li><li>&lt;p&gt;标签中不能出现&lt;h1&gt;~&lt;h6&gt;标签、&lt;div&gt;、&lt;p&gt;</li></ul><p>​    </p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><ul><li><p>概念:<br>用特定的标签，去表达特定的含义。</p></li><li><p>原则:<br>标签的默认效果不重要 (后期可以通过 CSS 随便控制效果) ，语义最重要!</p></li><li><p>举例: 对于 h1 标签，效果是文字很大 (不重要)，语义是网页主要内容 (很重要)</p></li><li><p>优势:</p><ul><li><p>代码结构清晰可读性强</p></li><li><p>有利于 SEO (搜索引擎优化)</p></li><li><p>方便设备解析 (如屏幕阅读器、盲人阅读器等)</p></li></ul></li></ul><h3 id="块级元素与行内元素"><a href="#块级元素与行内元素" class="headerlink" title="块级元素与行内元素"></a>块级元素与行内元素</h3><p> <strong>块级元素</strong>：独占一行</p><ul><li><p>&lt;marquee&gt;</p></li><li><p>&lt;h1&gt;</p></li><li><p>&lt;p&gt;</p></li><li><p>&lt;div&gt;</p></li></ul><p><strong>行内元素</strong>：不占一行</p><ul><li>&lt;input&gt;</li></ul><p><mark>规则</mark>：</p><ol><li><p>块级元素 中能写 行内素和 块级元素 (简单记: 块级素中几乎什么都能写)</p></li><li><p>行内元素 中能写 行内元素，但不能写 块级元素</p></li><li><p>一些特殊的规则:</p></li></ol><ul><li>h1~h6 不能互相嵌套</li><li>p 中不要写块级元素</li></ul><p>  我们以后还会学到一些特殊的规则，但不会很多。</p><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><ol><li>用于包裹:词汇、短语等</li><li>通常写在排版标签里面</li><li>排版标签更宏观 (大段的文字) ，文本标签更微观 (词汇、短语)</li><li>文本标签通常都是行内元素</li></ol><p>常用的：</p><table><thead><tr><th>标签名</th><th>标签语义</th></tr></thead><tbody><tr><td>em</td><td>要着重阅读的内容</td></tr><tr><td>strong</td><td>十分重要的语气</td></tr><tr><td>span</td><td>没有语义，用于包裹短语的通用容器</td></tr></tbody></table><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><table><thead><tr><th>标签名</th><th>标签语义</th><th>标签属性</th><th>单&#x2F;双标签</th></tr></thead><tbody><tr><td>img</td><td>图片</td><td><code>src</code>:图片路径 <code>alt</code>:图片描述  <code>width</code>:图片宽度，单位是像素 <code>height</code>:图片高度(px)</td><td>是</td></tr></tbody></table><ol><li>像素 ( px )是一种单位，学到 CSS 时，我们会详细讲解</li><li>尽量不同时修改图片的宽和高，可能会造成比例失调。</li><li>暂且认为 img 是行内元素(学到 CSS 时，会认识一个新的元素分类，目前咱们只知道: 块、行内)。</li><li>alt 属性的作用:</li></ol><ul><li>搜索引擎通过 alt 属性，得知图片的内容。– 最主要的作用</li><li>当图片无法展示时候，有些浏览器会呈现 alt 属性的值</li><li>盲人阅读器会朗读 alt 属性的值</li></ul><h3 id="常见的图片格式"><a href="#常见的图片格式" class="headerlink" title="常见的图片格式"></a>常见的图片格式</h3><ol><li><p><code>jpg</code>格式：</p><blockquote><p><strong>概述</strong>:扩展名为<code>jpg</code> 或<code>jpeg</code> ，是一种有损的压缩格式(把肉眼不容易观察出来的细节丢弃了)。</p><p>主要特点:支持的颜色丰富、占用空间较小、不支持透明背景、不支持动态图</p><p>使用场景:对图片细节没有极高要求的场景，例如: 网站的产品宣传图等。– 该格式网页中很常见。</p></blockquote></li><li><p><code>png</code>格式：</p><blockquote><p><strong>概述</strong>:扩展名为.png，是一种无损的压缩格式，能够更高质量的保存图片</p><p>主要特点:支持的颜色丰富、占用空间略大、支持透明背景、不支持动态图</p><p>使用场景:</p><ul><li>想让图片有透明背景</li><li>想更高质量的呈现图片，例如:公司logo图、重要配图等</li></ul></blockquote></li><li><p><code>bmp</code>格式：</p><blockquote><p><strong>概述</strong>:扩展名为 bmp ，不进行压缩的一种格式，在最大程度上保留图片更多的细节。</p><p>主要特点:支持的颜色丰富、保留的细节更多、占用空间极大、不支持透明背景、不支持动态图</p><p>使用场景: 对图片细节要求极高的场景，例如:一些大型游戏中的图片。(网页中很少使用)</p></blockquote></li><li><p><code>gif</code>格式：</p><blockquote><p><strong>概述</strong>: 扩展名为 .gif ，仅支持256种颜色，色彩呈现不是很完整</p><p>主要特点:支持的颜色较少、支持简单透明背景、支持动态图</p><p>使用场景:网页中的动态图片</p></blockquote></li><li><p><code>webp</code>格式：</p><blockquote><p>概述: 扩展名为 .webp ，谷歌推出的一种格式，专门用来在网页中呈现图片。</p><p>主要特点: 具备上述几种格式的优点，但兼容性不太好，一旦使用务必要解决兼容性问题</p><p>使用场景: 网页中的各种图片。</p></blockquote></li><li><p><code>base64</code>格式：</p><blockquote><ol><li>本质:一串特殊的文本，要通过浏览器打开，传统看图应用通常无法打开</li><li>原理: 把图片进行 base64 编码，形成一串文本。</li><li>如何生成:靠一些工具或网站。</li><li>如何使用: 直接作为 img 标签的 src 属性的值即可，并且不受文件位置的影响</li><li>使用场景:一些较小的图片，或者需要和网页一起加载的图片。</li></ol></blockquote></li></ol><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><table><thead><tr><th>标签名</th><th>标签语义</th><th>常用属性</th></tr></thead><tbody><tr><td>a</td><td>超链接</td><td><code>href</code>:要跳转的具体位置；<code>target</code>:跳转时如何打开界面</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>= <span class="string">&quot;网址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>超链接的文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span>//跳转另一个界面页面</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>= <span class="string">&quot;网址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>超链接的文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span>//跳转当前页面</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>代码中的多个空格、多个回车，都会被浏览器解析成一个空格</li><li>a标签是行内元素，a元素可以包裹出他自身外的任何元素</li></ol></blockquote><h3 id="跳转到锚点"><a href="#跳转到锚点" class="headerlink" title="跳转到锚点"></a>跳转到锚点</h3><ol><li><p>设置锚点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式一：a标签+name--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span> = <span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方式二：其他标签配合id属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span>这是第一个位置<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意点：</p><ol><li>具有 href 属性的 a 标签是超链接，具有 name 属性的 a 标签是锚点</li><li>name 和 id 都是区分大小写的，且 id 最好别是数字开头</li></ol></blockquote></li><li><p>跳转锚点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--跳转到Test1锚点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#test1&quot;</span>&gt;</span>去test1锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--跳转到页面顶部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--跳转到其他页面的锚点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;demo.html#test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--刷新页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&gt;刷新页面&lt;/a&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Title_1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>content_1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>江苏省<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                                邳州市</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>包括：表格标题、表格头部、表格主体、表格脚注</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>属性1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>属性2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>属性3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>属性4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 脚注 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>脚注<span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/HTML_%E8%A1%A8%E6%A0%BC.png"></p><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><table><thead><tr><th>标签名</th><th>标签语义</th><th>常用属性</th></tr></thead><tbody><tr><td>table</td><td>表格</td><td><code>width</code>:设置表格宽度<br><code>height</code>:设置表格最小宽度，表格最终高度可能比设置的值大<br><code>boder</code>:设置表格边框高度<code>cellspacing</code>:设置单元格之间的间距</td></tr><tr><td>thead</td><td>表格头部</td><td><code>height</code>:设置表格头部高度<br><code>align</code>:设置单元格的水平对齐方式<code>left</code>:左对齐、<code>center</code>:中间对齐、<code>right</code>:右对齐<br><code>valign</code>：设置单元格的垂直对齐方式：<code>top</code>:顶部对齐、<code>middle</code>:中间对齐、<code>bottom</code>:底部对齐</td></tr><tr><td>tbody</td><td>表格主体</td><td>属性与Thread相同</td></tr><tr><td>tr</td><td>行</td><td>属性与Thread相同</td></tr><tr><td>tfoot</td><td>表格脚注</td><td>属性与Thread相同</td></tr><tr><td>td</td><td>普通单元格</td><td><code>width</code>:设置单元格的宽度，同列所有单元格全都受影响<br><code>heigth</code>:设置单元格的高度，同行所有单元格全懂受影响<br><code>align</code>:设置单元格的水平对齐方式<br><code>rowspan</code>:设置要跨的行数<br><code>colspan</code>:设置要跨的列数</td></tr><tr><td>th</td><td>表头单元格</td><td>属性与<code>td</code>相同</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/HTML_%E8%A1%A8%E6%A0%BC%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://baidu.com/s&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>去百度搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>标签名</th><th>标签语义</th><th>常用属性</th></tr></thead><tbody><tr><td>form</td><td>表单</td><td><code>action</code>:用于提交表单的提交地址<br><code>target</code>:用于控制表单提交后，如何打开页面：<code>_self</code>:在本窗口打开、<code>_blank</code>:在新窗口打开</td></tr><tr><td>input</td><td>输入框</td><td><code>type</code>:设置输入框的类型，<code>text</code>表文本<br><code>name</code>:用于提交数据的名字</td></tr><tr><td>buttom</td><td>按钮</td><td>暂无</td></tr></tbody></table><h4 id="常用表单控价"><a href="#常用表单控价" class="headerlink" title="常用表单控价"></a>常用表单控价</h4><ol><li><p>文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>name：数据的mingcheng</p><p>value：输入框的默认输入值</p><p>maxlength：输入框的最大长度</p></blockquote></li><li><p>密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>name:数据的名称</p><p>value：输入框的默认值</p><p>maxlength:输入框输入的最大长度</p></blockquote></li><li><p>单选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sex&quot;</span> <span class="attr">value</span> = <span class="string">&quot;male&quot;</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sex&quot;</span> <span class="attr">value</span> = <span class="string">&quot;famale&quot;</span>&gt;</span>女</span><br></pre></td></tr></table></figure><blockquote><p> name:数据的名称<font color="red">注意：想要单选多个<code>radio</code></font>的<code>name</code>属性值要保持一致</p><p>value:提交的数据值</p><p>checked：让该单选按钮默认选中</p></blockquote></li><li><p>复选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span> = <span class="string">&quot;bobby&quot;</span> <span class="attr">value</span> = <span class="string">&quot;smoke&quot;</span>&gt;</span>抽烟</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span> = <span class="string">&quot;bobby&quot;</span> <span class="attr">value</span> = <span class="string">&quot;drink&quot;</span>&gt;</span>喝酒</span><br></pre></td></tr></table></figure><blockquote><p>name:数据的名称</p><p>value：提交的数据值</p><p>checked：让该复选框默认选中</p></blockquote></li><li><p>隐藏域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;hidden&quot;</span> <span class="attr">name</span> = <span class="string">&quot;tag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用户不可见的一个输入区域，作用是：提交表单的时候，携带一些固定的数据</p><p><code>name</code>:指定数据的名称</p><p><code>value</code>:指定真正提交的数据</p></blockquote></li><li><p>提交按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit value = “点我提交表单&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我提交表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><code>button</code>标签type属性的默认值是<code>submit</code></li><li><code>button</code>不要指定<code>name</code>属性</li><li><code>input</code>标签编写的按钮，使用<code>value</code>属性指定按钮文字</li></ol></blockquote></li><li><p>重置按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;reset&quot;</span> <span class="attr">value</span> = <span class="string">&quot;点我重置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">buttom</span> <span class="attr">type</span> = <span class="string">&quot;reset&quot;</span>&gt;</span>点我重置<span class="tag">&lt;/<span class="name">buttom</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><code>buttom</code>不指定<code>name</code>属性</li><li><code>input</code>标签编写的按钮，使用<code>value</code>属性指定按钮文字</li></ol></blockquote></li><li><p>普通按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>普通按钮的<code>type</code>值为<code>button</code>，默认为<code>submit</code>，记得更改</p></blockquote></li><li><p>文本域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span> = <span class="string">&quot;msg&quot;</span> <span class="attr">rows</span> = <span class="string">&quot;2&quot;</span> <span class="attr">cols</span> = <span class="string">&quot;3&quot;</span>&gt;</span>这里是文本域<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><code>rows</code>:行数</li><li><code>cols</code>:列数</li></ol></blockquote></li><li><p>下拉框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;from&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;黑&quot;</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;苏&quot;</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><code>name</code>：指定数据的名称</li><li><code>option</code>：设置<code>value</code>属性，如果没有<code>value</code>属性，提交的数据是<code>option</code>之间的文字；如果设置了<code>value</code>属性，提交的数据是<code>value</code>的值</li><li><code>option</code>标签设置了<code>selected</code>属性，表示默认选中</li></ol></blockquote></li></ol><h2 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h2><table><thead><tr><th>标签名</th><th>功能和语义</th><th>属性</th></tr></thead><tbody><tr><td>iframe</td><td>框架</td><td><code>name</code>:框架的名字，可以与<code>target</code>属性配合<br><code>width</code>:框架的高度<br><code>height</code>：框架的高度<br><code>frameborder</code>:是否显示边框，值为0或1</td></tr></tbody></table><blockquote><p>用途：</p><ol><li>在网页中嵌入广告</li><li>与超链接或表单的<code>target</code>配合，展示不同的内容</li></ol></blockquote><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h3><ul><li>CSS(Cascading Style Sheets)：层叠样式表</li><li>CSS也是一种标记语言，用于给<code>HTML</code>结构样式，例如：文字大小、颜色、元素宽高等等</li></ul><h3 id="CSS编写位置"><a href="#CSS编写位置" class="headerlink" title="CSS编写位置"></a>CSS编写位置</h3><h4 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h4><ul><li><p>写在标签的<code>style</code>属性中</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&quot;color:red;font-size:60px;&quot;</span>&gt;</span>I&#x27;m Lifetime Max<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>行内样式表，只能控制当前标签的样式，对其他样式无效</p></blockquote></li></ul><h4 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h4><ul><li><p>写在<code>HTML</code>页面内部，将所有的<code>CSS</code>代码提取出来，单独放在<code>&lt;style&gt;</code>标签中</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><blockquote><ul><li><code>&lt;style&gt;</code>：标签理论上可以放在<code>HTML</code>的任何位置，但一般放在<code>&lt;head&gt;</code>标签中</li><li>样式可以复用、代码结构清晰</li></ul></blockquote></li><li><p>问题：</p><blockquote><ol><li>并没有实现：结构与样式完全分离</li><li>多个<code>HTML</code>页面无法复用样式</li></ol></blockquote></li></ul><h4 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h4><ul><li><p>写在单独的<code>.css</code>文件中，随后在<code>HTML</code>文件中引用。</p></li><li><p>语法：</p><ol><li><p>新建一个拓展名为<code>.css</code>的样式文件，把所有的<code>CSS</code>代码放在此文件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">color:red;</span><br><span class="line">font-size: 40px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>HTML</code>文件中引入<code>.css</code>文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span> = <span class="string">&quot;./xxx.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>注意：</p><blockquote><ol><li><code>&lt;link&gt;</code>标签要写在<code>&lt;head&gt;</code>标签中</li><li><code>&lt;link&gt;</code>标签属性说明：<ul><li><code>href</code>:引入的文件路径</li><li><code>rel</code>：说明引入的文档与当前文档之间的关系</li></ul></li><li>外部样式的优势：复用、结构清晰、可触发浏览器的缓存机制，提高访问速度，实现结构与样式的完全分离</li></ol></blockquote></li></ul><h3 id="样式表的优先级"><a href="#样式表的优先级" class="headerlink" title="样式表的优先级"></a>样式表的优先级</h3><ul><li><p>优先级规则：<strong>行内样式</strong>&gt;<strong>内部样式</strong>&#x3D;<strong>外部样式</strong></p><blockquote><ol><li>内部样式、外部样式，这二者的优先级相同，且:后面的会覆盖 前面的(简记:“后来者居上”)</li><li>同一个样式表中，优先级也和编写顺序有关，且:后面的 会覆盖 前面的 (简记:“后来者居上”)</li></ol></blockquote><table><thead><tr><th>分类</th><th>优点</th><th>缺点</th><th>使用频率</th><th>作用范围</th></tr></thead><tbody><tr><td>行内样式</td><td>优先级最高</td><td>1. 结构与样式未分离<br>2. 代码结构混乱<br>3. 样式不能复用</td><td>低</td><td>当前标签</td></tr><tr><td>内部样式</td><td>1. 样式可复用<br>2. 代码结构清晰</td><td>1. 结构与样式未彻底分离<br>2. 样式不能多页面复用</td><td>一般</td><td>当前页面</td></tr><tr><td>外部样式</td><td>1. 样式可复用<br/>2. 代码结构清晰<br>3. 可触发浏览器的缓存机制<br>4. 结构与样式彻底分离</td><td>需要引入才能使用</td><td>最高</td><td>多个页面</td></tr></tbody></table></li></ul><h3 id="CSS语法规范"><a href="#CSS语法规范" class="headerlink" title="CSS语法规范"></a>CSS语法规范</h3><p>CSS语法由两部分构成：</p><ul><li>选择器</li><li>声明块</li></ul><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><ul><li>展开风格</li><li>紧凑风格</li></ul><h3 id="CSS基本选择器"><a href="#CSS基本选择器" class="headerlink" title="CSS基本选择器"></a>CSS基本选择器</h3><p>基本选择器包括：</p><ol><li>统配选择器</li><li>元素选择器</li><li>类选择器</li><li><code>id</code>选择器</li><li>交集选择器</li></ol><h4 id="统配选择器"><a href="#统配选择器" class="headerlink" title="统配选择器"></a>统配选择器</h4><ul><li><p>作用：可以选中所有的<code>HTML</code>元素</p></li><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">属性名: 属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><ul><li><p>为页面中某种元素统一设置标签</p></li><li><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">与以上相类似</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>元素选择器无法实现差异化设置，例：以上的标签中，所有的<code>&lt;p&gt;</code>标签样式相同</p></blockquote></li></ul><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li><p>作用：根据元素的<code>class</code>值，选中某些元素</p></li><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.speak</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*为选中的所有class值为speak的元素*/</span></span><br><span class="line"><span class="selector-class">.answer</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;<span class="comment">/*为选中的所有class值为answer的元素*/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a><code>id</code>选择器</h4><ul><li><p>根据元素的<code>id</code>属性值，来选中某个元素</p></li><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>值 &#123;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*选中id值为earth的那个元素*/</span></span><br><span class="line"><span class="selector-id">#earth</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>id</code>属性值：尽量由<strong>数字、字母、下划线、短杠</strong>组成，以字母开头、区分大小写、中间不空格</p></li><li><p>一个元素只能拥有一个<code>id</code>属性，多个元素的<code>id</code>属性值不能相同</p></li><li><p>一个元素可以同时拥有<code>id</code>与<code>class</code>属性</p></li></ul><h3 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h3><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><ul><li><p>作用：选中同时符合多个条件的元素</p></li><li><p>语法：</p><p>选择器1 选择器2 选择器3 …n{}</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.beatufy</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rich</span><span class="selector-class">.beauty</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ol><li><p>有标签名，标签名必须写在前面。</p></li><li><p>id 选择器、理论上可以作为交集的条件，但实际应用中几乎不用–因为没有意义</p></li><li><p>交集选择器中不可能出现两个元素选择器，因为一个元素，不可能即是p 元素又是 span 元素</p></li><li><p>用的最多的交集选择器是: 元素选择器配合类名选择器，例如: p.beauty 。</p></li></ol></li></ul><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><ul><li><p>作用：选中多个选择器对应的元素，又称:分组选择器</p></li><li><p>语法：</p><blockquote><p>与以上相似</p><p>多个选择器通过“,”连接，“,”的含义就是或</p></blockquote></li><li><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#peiqi</span>,</span><br><span class="line"><span class="selector-class">.rich</span>,</span><br><span class="line"><span class="selector-class">.beauty</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><ol><li>并集选择器，我们一般竖着写.</li><li>任何形式的选择器，都可以作为并集选择器的一部分</li><li>并集选择器，通常用于集体声明，可以缩小样式表体积</li></ol></li></ul><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><ul><li><p>作用：选中指定元素中，符合要求的后代元素</p></li><li><p>语法：选择器1 选择器2 选择器3 …选择器n{} (先写祖先，后写后代)</p><blockquote><p>以上语法中，选择器之间用空格隔开</p></blockquote></li><li><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*选中ul中的所有li*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选中ul中所有li中的a*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选中类名为subject元素中的所有类名为font-end的li*/</span></span><br><span class="line"><span class="selector-class">.subject</span> <span class="selector-tag">li</span><span class="selector-class">.font-end</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><blockquote><ol><li>后代选择器，最终选择的是后代，不选中祖先。</li><li>儿子、孙子、重孙子，都算是后代。</li><li>结构一定要符合之前讲的 HTML 嵌套要求，例如:不能p 中写 h1 ~ h6。</li></ol></blockquote></li></ul><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><ul><li><p>作用：选定指定元素中，符合要求的子元素（儿子元素）</p><blockquote><p>子选择器又称：子选择器、子选择器</p></blockquote></li><li><p>语法：选择器1&gt; 选择器2&gt;选择器3&gt;…选择器n{}</p><blockquote><p>选择器之间，用&gt;隔开</p></blockquote></li><li><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* div中的子代a的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*类名为person的元素中子代a元素*/</span></span><br><span class="line"><span class="selector-class">.person</span>&gt;<span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子代选择器，最终选择的是子代，不是父级</p></li><li><p>子、孙…统称为后代</p></li></ul><h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><ul><li><p>相邻兄弟选择器</p><ul><li><p>作用：符合条件的相邻兄弟元素</p></li><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器<span class="number">1</span>+选择器<span class="number">2</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通用兄弟选择器</p><ul><li><p>作用：选中指定元素后，符合条件的所有兄弟元素</p></li><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器<span class="number">1</span>~选择器<span class="number">2</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><blockquote><p>两种兄弟选择器，选中的是下面的兄弟元素</p></blockquote></li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li>作用：选中属性值具有一定要求的元素</li><li>语法：<ol><li><code>[属性名]</code>：选中具有某个属性的元素</li><li><code>[属性名=&quot;值&quot;]</code>：选中包含某个属性，且属性值<strong>等于</strong>指定值的元素</li><li><code>[属性名^=&quot;值&quot;]</code>：选中包含某个属性，且属性值以指定的值<strong>开头</strong>的元素</li><li><code>[属性名$ =&quot;值&quot;]</code>：包含某个属性，且属性值以指定的值<strong>结尾</strong>的元素</li><li><code>[属性名*=&quot;值&quot;]</code>：包含某个属性，属性<strong>包含</strong>指定值的元素</li></ol></li></ul><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><ul><li>作用：选中特殊状态的类</li></ul><h3 id="CSS选择器优先级"><a href="#CSS选择器优先级" class="headerlink" title="CSS选择器优先级"></a>CSS选择器优先级</h3><ul><li><p><mark>行内样式&gt;id选择器&gt;类选择器&gt;元素选择器&gt;统配选择器</mark></p></li><li><p>样式的权重：(a,b,c)</p></li></ul><blockquote><p>a: <strong>ID</strong> 选择器的个数</p><p>b:<strong>类、伪类、属性</strong> 选择器的个数</p><p>c:<strong>元素、伪元素</strong> 选择器的个数</p></blockquote><ul><li>例如：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/CSS_%E9%80%89%E6%8B%A9%E5%99%A8%E6%9D%83%E9%87%8D.png"></p><ul><li><p>比较规则：按照<strong>从左到右</strong>的顺序，依次比较大小</p></li><li><p>特殊规则：</p><blockquote><p><strong>行内样式</strong>权重大于所有选择器</p><p><code>!important</code>的权重，大于所有的样式</p></blockquote></li></ul><h3 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h3><ol><li><p><strong>层叠性</strong></p><p>如果发生了样式冲突，就按照(选择器优先级)进行样式的层叠</p><blockquote><p>冲突：元素的同一个属性，被设置了不同的值</p></blockquote></li><li><p><strong>继承性</strong></p><p>元素会自动拥有其父元素、或其祖先元素上所设置的某些样式</p><ul><li><p>规则：优先继承离得近的</p></li><li><p>常见的可继承属性：</p><blockquote><p><code>text-??</code>、<code>font-??</code>、<code>line-??</code>、<code>color</code>…</p></blockquote></li></ul></li><li><p><strong>优先级</strong></p><p><mark><code>!important</code>&gt;行内样式&gt;id选择器&gt;类选择器&gt;元素选择器&gt;统配选择器</mark></p></li></ol><h3 id="CSS颜色-HEX或HEXA"><a href="#CSS颜色-HEX或HEXA" class="headerlink" title="CSS颜色 HEX或HEXA"></a>CSS颜色 <code>HEX</code>或<code>HEXA</code></h3><p><code>HEX</code>的原理同与<code>RGB</code>一样，依然是通过: 红、绿、蓝色 进行组合，只不过要用 6个数字，分成3组来表达<br>格式为: #rrggbb</p><blockquote><p>每一个数字的取值范围是0~f，最大值是ff，最小值是00</p></blockquote><h3 id="CSS常用的字体属性"><a href="#CSS常用的字体属性" class="headerlink" title="CSS常用的字体属性"></a>CSS常用的字体属性</h3><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><ul><li><p>属性名：<code>font-size</code></p></li><li><pre><code class="css">div &#123;    font-size:20px;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 字体族</span><br><span class="line"></span><br><span class="line">+ 属性名：`font-family`</span><br><span class="line"></span><br><span class="line">+ ```css</span><br><span class="line">  div &#123;</span><br><span class="line">      font-family: &quot;Microsoft Yahei&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="字体风格"><a href="#字体风格" class="headerlink" title="字体风格"></a>字体风格</h4><ul><li><p>属性名：<code>font-style</code></p></li><li><p>常用值：</p><ul><li><code>normal</code>: 正常</li><li><code>italic</code>:斜体</li><li><code>oblique</code>:倾斜</li></ul><blockquote><p>使用斜体，推荐使用<code>italic</code></p></blockquote></li></ul><h4 id="字体的粗细"><a href="#字体的粗细" class="headerlink" title="字体的粗细"></a>字体的粗细</h4><ul><li><p>属性名：<code>font-size</code></p></li><li><p>常用值：</p><ul><li><p>关键词：</p><ol><li><code>lighter</code>:细</li><li><code>normal</code>:正常</li><li><code>bold</code>:粗</li><li><code>bolder</code>:很粗</li></ol></li><li><p>数值：</p><blockquote><ol><li><code>100~1000</code>且无单位，数值越大，字体越粗</li><li><code>100~300</code>等于<code>lighter</code>,<code>400~500</code>等于<code>normal</code>,<code>600</code>及以上等同于<code>bold</code></li></ol></blockquote></li></ul></li><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="字体复合"><a href="#字体复合" class="headerlink" title="字体复合"></a>字体复合</h4><ul><li>属性名：<code>font</code>,可以把上述字体合并成一个属性</li><li>规则<ol><li>字体大小、字体族必须都写上</li><li>字体族必须是最后一位、字体大小必须是倒数第二位</li><li>各个属性之间，用空格隔开</li></ol></li></ul><h4 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h4><ul><li>属性名：<code>color</code></li><li>可选值：<ol><li>颜色名</li><li><code>rgb</code>或<code>rgba</code></li><li><code>HEX</code>或<code>HEXA</code>(十六进制)</li><li><code>HSL</code>或<code>HSLA</code></li></ol></li></ul><h4 id="文本间距"><a href="#文本间距" class="headerlink" title="文本间距"></a>文本间距</h4><ul><li>字母间距：<code>letter-spacing</code></li><li>单词间距：<code>word-spacing</code>(通过空格识别此)</li><li>属性值为像素(px),正值间距增大，负值间距缩小</li></ul><h4 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h4><ul><li><p>属性名：<code>text-decoration</code></p></li><li><p>可选值：</p><ol><li><code>none</code>: 无修饰线(常用)</li><li><code>underline</code>: 下划线</li><li><code>overline</code>: 上划线</li><li><code>line-through</code>: 删除线</li></ol><p>可搭配如下值使用：</p><ol><li><code>dotted</code>: 虚线</li><li><code>wavy</code>: 波浪线</li></ol></li><li><pre><code class="css">div &#123;    text-decoration: overline dotted green;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 文本缩进</span><br><span class="line"></span><br><span class="line">+ 属性名：`text-indent`</span><br><span class="line"></span><br><span class="line">+ 属性名：`CSS`中的长度单位，`mm,cm,px`</span><br><span class="line"></span><br><span class="line">+ ```css</span><br><span class="line">  div &#123;</span><br><span class="line">      text-indent: 40px;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="文本水平对齐"><a href="#文本水平对齐" class="headerlink" title="文本水平对齐"></a>文本水平对齐</h4><ul><li>属性名：<code>text-align</code></li><li>常用值：<ol><li><code>left</code>: 左对齐(默认值)</li><li><code>right</code>: 右对齐</li><li><code>center</code>:居中对齐</li></ol></li></ul><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><ul><li><p>属性名：<code>line-height</code></p></li><li><p>可选值：</p><ol><li><code>normal</code>: 由浏览器根据文字大小决定的一个默认值</li><li>像素(px)</li><li>数字：参考自身<code>font-size</code>的倍数</li><li>百分比：参考自身<code>font-size</code>的百分比</li></ol><blockquote><p>由于字体设计原因，文字在一行中，并不是绝对垂直居中，若一行中都是文字，不会太影响观感。</p></blockquote></li><li><pre><code class="css">div &#123;    line-height: 90px;&#125;</code></pre></li></ul><h4 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h4><ul><li>属性名：<code>vertical-align</code></li><li>作用：用于指定同一行元素之间，或表格单元格内文字的垂直对齐方式</li><li>常用值：<ol><li><code>baseline</code> （默认值）:使元素的基线与父元素的基线对齐</li><li><code>top</code>：使元素的顶部与其梭子行的顶部对齐</li><li><code>middle</code>：使元素的中部与其父元素的基线加上父元素的字母x的一般对齐</li><li><code>bottom</code>:使元素的底部与其所在行的底部对齐</li></ol></li></ul><h4 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h4><p>可作用于<code>ul</code>、<code>ol</code>、<code>li</code>元素</p><table><thead><tr><th>CSS属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>list-style-type</td><td>设置列表符号</td><td><code>none</code>:不显示前面的标识(常用)<br><code>square</code>:实心方框<br><code>disc</code>:圆形<br><code>decimal</code>:数字<br><code>lower-roman</code>:小写罗马字<br><code>upper-roman</code>:大写罗马字<br><code>lower-alpha</code>:小写字母<br><code>upper-alphe</code>:大写字母<br></td></tr><tr><td>list-style-position</td><td>设置列表符号的位置</td><td><code>inside</code>:在<code>li</code>的里面<br><code>outside</code>:在<code>li</code>的外面</td></tr><tr><td>list-style-image</td><td>自定义列表符号</td><td><code>url</code></td></tr><tr><td>list-style</td><td>符合属性</td><td>没有数量、顺序的要求</td></tr></tbody></table><h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><table><thead><tr><th>属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>boder-width</code></td><td>边框宽度</td><td>CSS中可用的长度值</td></tr><tr><td><code>boder-color</code></td><td>边框颜色</td><td>CSS中可用的颜色值</td></tr><tr><td><code>boder-style</code></td><td>边框风格</td><td><code>none</code>:默认值<br><code>solid</code>:实线<br><code>dashed</code>:虚线<br><code>dotted</code>:点线<br><code>double</code>:双实线</td></tr><tr><td><code>boder</code></td><td>边框复合属性</td><td>没有数量、顺序的要求</td></tr></tbody></table><h5 id="表格独有的属性"><a href="#表格独有的属性" class="headerlink" title="表格独有的属性"></a>表格独有的属性</h5><table><thead><tr><th>CSS属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>table-layout</code></td><td>设置列宽度</td><td><code>auto</code>:自动，列宽根据内容计算<br><code>fixed</code>:固定列宽、平局分</td></tr><tr><td><code>boder-spacing</code></td><td>单元格间距</td><td>CSS中可用的长度值（边框不合并）</td></tr><tr><td><code>boder-collapse</code></td><td>合并单元格边框</td><td><code>collapse</code>:合并<br><code>separate</code>:不合并</td></tr><tr><td><code>empty-cells</code></td><td>隐藏没有内容的单元格</td><td><code>show</code>: 显示<br><code>hide</code>: 隐藏<br>单元格不合并</td></tr><tr><td><code>caption-side</code></td><td>设置表格标题位置</td><td><code>top</code>:上面（默认）<br><code>bottom</code>:下</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/10/24/Vue/"/>
      <url>/2023/10/24/Vue/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Vue是什么</p><p>一套用于构建用户界面的渐进式JavaScript框架</p><ul><li>渐进式：Vue可以自底向上逐层的应用<ul><li>简单应用：只需一个轻量小巧的核心库</li><li>复杂应用：可以引入各式各样的Vue插件</li></ul></li></ul></li><li><p>Vue特点</p><ol><li>采用组件化模式，提高代码复用率、且让代码更好维护</li><li>申明是编码，让编码人员无需直接操作DOM，提高开发效率</li><li>使用虚拟DOM+优秀的Diff算法，尽量复用DOM节点</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JMeter</title>
      <link href="/2023/09/29/JMeter/"/>
      <url>/2023/09/29/JMeter/</url>
      
        <content type="html"><![CDATA[<h1 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="JMeter简介"><a href="#JMeter简介" class="headerlink" title="JMeter简介"></a>JMeter简介</h3><ol><li>可以对于服务器。网络或对象模拟巨大的负载</li><li>可以创建带有断言的脚本来验证程序是否能返回期望的结果</li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p><ol><li>开源、免费</li><li>跨平台</li><li>支持多协议</li><li>小巧</li><li>功能强大</li></ol><p>缺点：</p><ol><li>不支持IP欺骗</li><li>使用JMeter无法验证JS程序，也无法验证页面UI，所以要和Selenium配合来完成Web2.0应用的测试</li></ol><h3 id="JMeter基本使用"><a href="#JMeter基本使用" class="headerlink" title="JMeter基本使用"></a>JMeter基本使用</h3><h4 id="两个特殊的线程组"><a href="#两个特殊的线程组" class="headerlink" title="两个特殊的线程组"></a>两个特殊的线程组</h4><ul><li>setUp线程组：最优先执行的线程组</li><li>tearDown线程组：最后执行的线程组</li></ul><h4 id="操作线程组"><a href="#操作线程组" class="headerlink" title="操作线程组"></a>操作线程组</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JMeter%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%B1%9E%E6%80%A7.bmp"></p><h4 id="http请求默认值"><a href="#http请求默认值" class="headerlink" title="http请求默认值"></a>http请求默认值</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JMeter%20http%E8%AF%B7%E6%B1%82%E9%BB%98%E8%AE%A4%E5%80%BC.bmp"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JMeter%20http%E8%AF%B7%E6%B1%82%E9%BB%98%E8%AE%A4%E5%80%BC2.bmp"></p><h4 id="信息头管理器"><a href="#信息头管理器" class="headerlink" title="信息头管理器"></a>信息头管理器</h4><p>新增修改实现时提交的数据时JSON格式的，需申明提交的数据的内容类型：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JMeter%20http%E4%BF%A1%E6%81%AF%E5%A4%B4%E7%AE%A1%E7%90%86%E5%99%A8.bmp"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JMeter%20http%E4%BF%A1%E6%81%AF%E5%A4%B4%E7%AE%A1%E7%90%86%E5%99%A82.bmp"></p><h3 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h3><p>当提交的数据量较大，参数化可以动态的获取、设置或生成数据，是一种有程序驱动代替人工驱动的数据设计方案，提高脚本的编写效率以及编写质量</p><p>以下四种方式实现参数化：</p><ol><li><p>用户数据文件设置</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JMeter%20%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8F.bmp"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JMeter%20%E7%94%A8%E6%88%B7%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8F2.bmp"></p></li><li><p>CSV数据文件设置</p><p>CSV：逗号分隔符，是一种简洁且常见的数据存储格式</p><p>实现步骤：</p><ol><li>使用CSV文件存储测试数据</li><li>编写被复用的学院新增脚本模板(编码集使用UTF-8，无BOM格式)</li><li>关联脚本与数据(将文件数据倒入脚本)</li></ol></li><li><p>用户参数</p></li><li><p>函数</p></li></ol><h3 id="直链数据库"><a href="#直链数据库" class="headerlink" title="直链数据库"></a>直链数据库</h3><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2023/09/22/JavaScript/"/>
      <url>/2023/09/22/JavaScript/</url>
      
        <content type="html"><![CDATA[<p>JavaScript是可插入HTML 页面的编程代码，用来改进设计、验证表单、检测浏览器、创建cookies，以及更多的应用</p><p>JavaScript插入HTML页面后，可由所有的浏览器执行</p><ul><li>轻量级、功能强大编程语言</li><li>因特网上最流行的脚本语言</li></ul><p>脚本位置：</p><ul><li>位于\<script>\与\</script>\标签中</li><li><body>和<head>中</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2023/09/22/HTML/"/>
      <url>/2023/09/22/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><ul><li><p>文本输入框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span> = <span class="string">&quot;第一个输入框&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><input type="text" value = "第一个输入框"/></li><li><p>选择框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;checkbox&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><input type = "checkbox"/></li><li><p>单选&#x2F;复选按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;radio&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><input type = "radio"/></li><li><p>按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><input type = "button"/></li><li><p>文件上传</p><p>&lt;input type &#x3D; “file”&gt;</p></li><li><p>密码输入</p><p>&lt;input type &#x3D; “password”&gt;</p></li><li><p>下拉框</p><p><select><option>选择</option></select></p></li><li><p>超链接</p><p><a href = https://czlifetime.eu.org>活在当下的主页</a></p></li><li><p>表格</p><table>    <tr><td>1</td><td>2</td></tr>    <tr><td>3</td><td>4</td></tr>    <tr><td>5</td><td>6</td></tr></table></li><li><p>图片</p><p>&lt;img src &#x3D; “…”&gt;</p></li><li><p>文本域</p><textarea rows = “3" cols = “red"></textarea></li><li><p>加粗</p><p><b></b></p></li><li><p>换行</p><br></li><li><p>段落</p><p>This is a paragraph.</p><p>This is another paragraph.</p></li><li><p>注释</p><!-- 这里是注释--></li><li><p>框架</p><iframe> src = “https://czlifetime.eu.org” width = “200” height = “200”></it=frame></li><li><p>div 元素</p><body><div class = “head">    元素信息</div></body></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit</title>
      <link href="/2023/09/13/Junit/"/>
      <url>/2023/09/13/Junit/</url>
      
        <content type="html"><![CDATA[<h1 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h1><ul><li><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>JUnit 是一个 <strong>Regression Testing Framework</strong>被开发者用来在Java中实现单元测试，加快编程速度，提高代码质量。JUnit 框架可以轻松地与以下任一项集成 -</p><ul><li>Eclipse</li><li>Ant</li><li>Maven</li></ul></li><li><p><em></em></p><h2 id="JUnit-测试框架的特点"><a href="#JUnit-测试框架的特点" class="headerlink" title="JUnit 测试框架的特点"></a>JUnit 测试框架的特点</h2><p>JUnit 测试框架提供以下重要功能 -</p><ul><li>Fixtures</li><li>测试套件</li><li>测试运行器</li><li>JUnit 类</li></ul><h3 id="Fixtures"><a href="#Fixtures" class="headerlink" title="Fixtures"></a>Fixtures</h3><p><strong>Fixtures</strong>是一组对象的固定状态，用作运行测试的基线。测试夹具的目的是确保有一个众所周知的固定环境来运行测试，以便结果是可重复的。它包括 -</p><ul><li>setUp() 方法，在每次测试调用之前运行。</li><li>tearDown() 方法，在每个测试方法之后运行。</li></ul><p>让我们看一个例子 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> junit.framework.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaTest</span> <span class="keyword">extends</span> <span class="title class_">TestCase</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="type">int</span> value1, value2;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// assigning the values</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">      value1 = <span class="number">3</span>;</span><br><span class="line">      value2 = <span class="number">3</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// test method to add two values</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> value1 &amp;plus value2;</span><br><span class="line">      assertTrue(result == <span class="number">6</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p></li><li><p></p><h2 id="测试套件"><a href="#测试套件" class="headerlink" title="测试套件"></a>测试套件</h2><p>一个测试套件捆绑了几个单元测试用例并将它们一起运行。在 JUnit 中，@RunWith 和 @Suite 注释都用于运行套件测试。下面给出了一个使用 TestJunit1 和 TestJunit2 测试类的示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"><span class="comment">//JUnit Suite Test</span></span><br><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123; </span><br><span class="line">   TestJunit1.class ,TestJunit2.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JunitTestSuite</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJunit1</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Robert&quot;</span>; </span><br><span class="line">   <span class="type">MessageUtil</span> <span class="variable">messageUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageUtil</span>(message);</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrintMessage</span><span class="params">()</span> &#123;     </span><br><span class="line">      System.out.println(<span class="string">&quot;Inside testPrintMessage()&quot;</span>);    </span><br><span class="line">      assertEquals(message, messageUtil.printMessage());     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJunit2</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Robert&quot;</span>; </span><br><span class="line">   <span class="type">MessageUtil</span> <span class="variable">messageUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageUtil</span>(message);</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSalutationMessage</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside testSalutationMessage()&quot;</span>);</span><br><span class="line">      message = <span class="string">&quot;Hi!&quot;</span> + <span class="string">&quot;Robert&quot;</span>;</span><br><span class="line">      assertEquals(message,messageUtil.salutationMessage());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p></li><li><p></p><h2 id="测试运行器"><a href="#测试运行器" class="headerlink" title="测试运行器"></a>测试运行器</h2><p>测试运行器用于执行测试用例。这是一个假设测试类的示例<strong>TestJunit</strong> 已经存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.JUnitCore;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.Result;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.notification.Failure;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRunner</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> JUnitCore.runClasses(TestJunit.class);</span><br><span class="line">          </span><br><span class="line">      <span class="keyword">for</span> (Failure failure : result.getFailures()) &#123;</span><br><span class="line">         System.out.println(failure.toString());</span><br><span class="line">      &#125;</span><br><span class="line">          </span><br><span class="line">      System.out.println(result.wasSuccessful());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p></li><li><p><em></em></p><h2 id="JUnit-类"><a href="#JUnit-类" class="headerlink" title="JUnit 类"></a>JUnit 类</h2><p>JUnit 类是重要的类，用于编写和测试 JUnit。一些重要的课程是 -</p><ul><li><strong>Assert</strong> - 包含一组断言方法。</li><li><strong>TestCase</strong> − 包含一个测试用例，该用例定义了运行多个测试的夹具。</li><li><strong>TestResult</strong> − 包含收集执行测试用例结果的方法。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试大赛准备</title>
      <link href="/2023/09/13/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B/"/>
      <url>/2023/09/13/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><ul><li>TestCase:一个TestCase表示一个测试</li><li>TestSuite:一个TestSuite包含一组TestCase，表示一组测试</li><li>TestFixture:一个TestFixture表示一个测试环境</li><li>TestResult: 用于收集测试结果</li><li>TestRunner:用于运行测试</li><li>TestListener: 用于监听测试过程，收集测试数据</li><li>Assert:用于断言测试结果是否正确</li></ul><p>import static org.junit.Assert.*</p><h3 id="使用Assert断言"><a href="#使用Assert断言" class="headerlink" title="使用Assert断言"></a>使用Assert断言</h3><ul><li>断言相等: assertEquals(100,x)</li><li>断言数组相等: assertArrayEquals({1,2,3},X)</li><li>浮点数断言相等: assertEquals(3.1416,x,0.0001)</li><li>断言为null: assertNull(x)</li><li>断言为true&#x2F;false: assertTrue(x &gt; 0) assertFalse(x &lt; 0)</li><li>其他: assertNotEquals&#x2F;assertNotNull</li></ul><h3 id="使用Before和After"><a href="#使用Before和After" class="headerlink" title="使用Before和After"></a>使用Before和After</h3><p>同一个单元测试内的多个测试方法：</p><ul><li>测试前需要初始化某些对象 : 在@Before方法中初始化测试资源</li><li>测试后可能需要清理资源 <code>fileInputStream.close();</code>：在@After方法中释放资源</li></ul><h3 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h3><p>对可能抛出的异常进行测试：</p><ul><li>异常本身是方法签名的一部分<br>public static int parselnt(String s) throws NumberFormatException</li><li>测试错误的输入是否导致特定的异常<br>Integer.parselnt(null)<br>Integer.parselnt(“”)<br>Integer.parselnt(“xyz”)</li></ul><blockquote><p>使用expected测试异常</p><p>注解：</p><p>@Test(expected &#x3D; NumberFormatException.class)</p></blockquote><p><strong>对某个测试案例测试的结果进行分析测试</strong><sub>通用模板</sub></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.runner.JUnitCore;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.Result;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.notification.Failure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRunner1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个Result对象，用于存储测试结果</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> JUnitCore.runClasses(TestJunit1.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历测试结果中的失败信息</span></span><br><span class="line">        <span class="keyword">for</span> (Failure failure : result.getFailures()) &#123;</span><br><span class="line">            <span class="comment">// 打印每个失败信息的字符串表示</span></span><br><span class="line">            System.out.println(failure.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打印测试是否成功的结果</span></span><br><span class="line">        System.out.println(result.wasSuccessful());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Web测试"><a href="#Web测试" class="headerlink" title="Web测试"></a>Web测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEdge</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ChromeDriver chromeDriver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        opeanEdge();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">opeanEdge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;webdriver.chrome.driver&quot;</span>, <span class="string">&quot;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&quot;</span>);</span><br><span class="line">        chromeDriver = <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>();</span><br><span class="line">        chromeDriver.get(<span class="string">&quot;https://baidu.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基本元素定位"><a href="#基本元素定位" class="headerlink" title="基本元素定位"></a>基本元素定位</h2><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E8%BD%AF%E6%B5%8B%20%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEdge</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ChromeDriver chromeDriver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        opeanEdge();</span><br><span class="line">        <span class="comment">//id</span></span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;kw&quot;</span>)).sendKeys(<span class="string">&quot;软件测试&quot;</span>);</span><br><span class="line">        <span class="comment">//name</span></span><br><span class="line">        chromeDriver.findElement(By.name(<span class="string">&quot;wd&quot;</span>)).sendKeys(<span class="string">&quot;软件测试&quot;</span>);</span><br><span class="line">        <span class="comment">//tagName</span></span><br><span class="line">        chromeDriver.findElementByTagName(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">        <span class="comment">//className</span></span><br><span class="line">        chromeDriver.findElement(By.className(<span class="string">&quot;soutu-btn&quot;</span>)).sendKeys(<span class="string">&quot;软件测试&quot;</span>);</span><br><span class="line">        <span class="comment">//linkText</span></span><br><span class="line">        chromeDriver.findElement(By.linkText(<span class="string">&quot;图片&quot;</span>)).click();</span><br><span class="line">        <span class="comment">//partialLinkText</span></span><br><span class="line">        chromeDriver.findElementByPartialLinkText(<span class="string">&quot;丰收里的中国色&quot;</span>).click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">opeanEdge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;webdriver.chrome.driver&quot;</span>, <span class="string">&quot;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&quot;</span>);</span><br><span class="line">        chromeDriver = <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>();</span><br><span class="line">        chromeDriver.get(<span class="string">&quot;https://baidu.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="元素定位cssSelect"><a href="#元素定位cssSelect" class="headerlink" title="元素定位cssSelect"></a>元素定位cssSelect</h2><ul><li><p>根据tagName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">&quot;input&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>根据ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelect(<span class="string">&quot;input#id&quot;</span>);</span><br><span class="line">By.cssSelect(<span class="string">&quot;#id&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>根据className</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">&quot;.className&quot;</span>);</span><br><span class="line">By.cssSelector(<span class="string">&quot;input.className&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>精确定位 css</p><ul><li><p>根据元素属性，属性名&#x3D;属性值，id，class，等都可以写成这种形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">&quot;标签名[属性名=&#x27;属性值&#x27;]&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>多属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">By.cssSelector(<span class="string">&quot;标签名[属性1=&#x27;属性值&#x27;][属性2=&#x27;属性值&#x27;]&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="元素定位-Xpath"><a href="#元素定位-Xpath" class="headerlink" title="元素定位 Xpath"></a>元素定位 Xpath</h2><p>xpath是一个path，一个描述页面元素位置信息的路径，相当于元素的坐标</p><p>xpath基于XML文档树状结构，是XML路径语言，用来查询xml文档中的节点</p><ul><li><p>绝对定位：从跟开始找</p></li><li><p>相对路径：</p><blockquote><p>例：*[@name&#x3D;‘phone’]</p><ul><li>&#x2F;&#x2F; 匹配指定节点，不考虑他们的位置</li><li>* 通配符：匹配任意元素节点</li><li>@ 选取属性</li><li>[] 属性判断条件表达式</li></ul></blockquote></li></ul><h2 id="元素操作API"><a href="#元素操作API" class="headerlink" title="元素操作API"></a>元素操作API</h2><ul><li>click()：触发点击</li><li>clear()：清空内容</li><li>sendKeys：往文本框中写入内容</li><li>getTagName()：获取元素的标签名</li><li>getAttribute(属性名)：根据属性名获取元素属性值</li><li>isDisplayed()：查看元素是否显示</li></ul><h2 id="WebDriver相关API"><a href="#WebDriver相关API" class="headerlink" title="WebDriver相关API"></a>WebDriver相关API</h2><ul><li><p>get(String url)：访问指定URL</p></li><li><p>getCurrentUrl()：获取当前页面的URL地址</p></li><li><p>getPageSource()：源代码</p></li><li><p>getTitle()：获取当前页面的标题</p></li><li><p>quit()：关闭驱动对象以及所有相关的窗口</p></li><li><p>close()：关闭当前窗口</p></li><li><p>getWindowsHandle()：返回当前页面句柄</p></li><li><p>getWindowsHandles()：返回所有由驱动对象打开页面所有的句柄，页面不同，句柄不一样</p></li><li><p>manage()：获取Options—浏览器菜单操作对象</p></li><li><p>navigate对象：导航–&gt;对浏览器的刷新、回退等操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WebDriver.<span class="type">Navigation</span> <span class="variable">navigate</span> <span class="operator">=</span> chromeDriver.navigate();</span><br><span class="line">navigate.to(<span class="string">&quot;https://czlifetime.eu.org/&quot;</span>);</span><br><span class="line">sleep(<span class="number">5000</span>);</span><br><span class="line">navigate.refresh();</span><br><span class="line">sleep(<span class="number">5000</span>);</span><br><span class="line">navigate.back();</span><br></pre></td></tr></table></figure></li></ul><h2 id="元素三大等待"><a href="#元素三大等待" class="headerlink" title="元素三大等待"></a>元素三大等待</h2><h3 id="硬性等待"><a href="#硬性等待" class="headerlink" title="硬性等待"></a>硬性等待</h3><ul><li><p>线程休眠，强制等待</p><blockquote><p>Thread.sleep(long millis);</p></blockquote></li></ul><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><blockquote><p>藏起来的等待，一次设置，始终有效，针对WebDriver对象，进行的等待时长的设置</p><p>作用：对WebDriver对象设置全局等待，每一次操作如遇到页面加载，则默认进入隐式等待，如遇元素无法找到，则进入隐式等待，当达到最大时长时，则继续进行后续的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.webdriver.Chrome();</span><br><span class="line">driver.implicity_wait(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>在设置的超过时间范围内不断查找元素，直到找到元素或者超时</p><blockquote><p>driver.manage.timeouts().implicityWait(long time,TimeUnit unit);</p><ul><li>优点：相对灵活</li><li>设置是针对全局的，在WebDriver实例整个生命周期有效，但并不是所有的元素都需要等待</li><li>在opeanChrome()方法之前</li></ul></blockquote></li></ul><h3 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h3><blockquote><p>专门用于等待指定的元素对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 导入显示等待</span><br><span class="line">from selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"> </span><br><span class="line"># 针对webdriver对象，最大等待<span class="number">10</span>秒，每<span class="number">0.5</span>秒一次频率检索指定元素 </span><br><span class="line"># until指定元素，返回为True继续后面操作</span><br><span class="line">WebDriverWait(driver, <span class="number">10</span>, <span class="number">0.5</span>).until(</span><br><span class="line">    lambda el:driver.find_element_by_xpath(), message = <span class="string">&#x27;自定义信息&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/web%E6%98%BE%E7%A4%BA%E7%AD%89%E5%BE%85.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/web%E6%98%BE%E7%A4%BA%E7%AD%89%E5%BE%85%E6%9D%A1%E4%BB%B6.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/webExpectedConditions%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%98%BE%E7%A4%BA%E7%AD%89%E5%BE%85%E6%9D%A1%E4%BB%B6.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/webExpectedConditions%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%98%BE%E7%A4%BA%E7%AD%89%E5%BE%85%E6%9D%A1%E4%BB%B62.jpg"></p><ul><li><p>用来等待某个条件发生后再继续执行后续代码(如找到元素、元素可点击、元素已显示等)</p></li><li><p>方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebDriverWait</span> <span class="variable">wait</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDriverWait</span>();</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">element</span> <span class="operator">=</span> wait.until(expectCondition);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>等待条件</th></tr></thead><tbody><tr><td>visibilityOfElementLocated(By locator)</td><td>页面元素在页面存在并且可见</td></tr><tr><td>elementToBeClickable(By locator)</td><td>页面元素是否在页面上可用和可被单击</td></tr><tr><td>elementToBeSelected(WebElement element)</td><td>页面元素处于被选中状态</td></tr><tr><td>textToBePresentInElement(By locator)</td><td>在页面元素中是否存在包含特定的文本</td></tr><tr><td>presenceOfElementLocated(By locator)</td><td>页面元素在页面中存在</td></tr></tbody></table></li></ul><h2 id="特殊元素操作"><a href="#特殊元素操作" class="headerlink" title="特殊元素操作"></a>特殊元素操作</h2><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/web%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D%E9%80%89%E6%8B%A9.jpg"></p><h3 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h3><p>Modal Dialogue Box，模式对话框，是指在用户想要对对话框以外的应用程序进行操作是，必须首先对该对话框进行响应。如单击【确定】或【取消】按钮等对该对话框关闭</p><h4 id="alter弹框"><a href="#alter弹框" class="headerlink" title="alter弹框"></a>alter弹框</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">opeanChrome();</span><br><span class="line">chromeDriver.get(<span class="string">&quot;D:\\Java\\JavaCompile\\WebCompetition\\alter.html&quot;</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">chromeDriver.findElement(By.id(<span class="string">&quot;asd&quot;</span>)).click();</span><br><span class="line"><span class="comment">//switchTo().alert()找到对应的alert弹框</span></span><br><span class="line"><span class="type">Alert</span> <span class="variable">alert</span> <span class="operator">=</span> chromeDriver.switchTo().alert();</span><br><span class="line"><span class="comment">//获取文本</span></span><br><span class="line">System.out.println(alert.getText());</span><br><span class="line"><span class="comment">//确定</span></span><br><span class="line">alert.accept();</span><br><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="comment">//alert.dismiss();</span></span><br></pre></td></tr></table></figure><h4 id="comfirm弹框"><a href="#comfirm弹框" class="headerlink" title="comfirm弹框"></a>comfirm弹框</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chromeDriver.get(<span class="string">&quot;D:\\Java\\JavaCompile\\WebCompetition\\confirm.html&quot;</span>);</span><br><span class="line">chromeDriver.findElement(By.id(<span class="string">&quot;wasd&quot;</span>)).click();</span><br><span class="line"><span class="type">Alert</span> <span class="variable">alter</span> <span class="operator">=</span> chromeDriver.switchTo().alert();</span><br></pre></td></tr></table></figure><h3 id="iframe切换"><a href="#iframe切换" class="headerlink" title="iframe切换"></a>iframe切换</h3><p>四种切换模式：</p><ul><li>driver.switchTo().frame(index);</li><li>driver.switchTo().frame(id);</li><li>driver.switchTo().frame(name);</li><li>driver.switchTo().frame(WebElement)</li></ul><p>切换之后，回到默认内容页面（否则会找不到元素）</p><p>driver.switchTo().defaultContent();</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/iframe%E5%80%9F%E9%89%B41.jpg"></p><h3 id="Window切换"><a href="#Window切换" class="headerlink" title="Window切换"></a>Window切换</h3><p>当要操作另外一个窗口页面的元素时，一定要注意先切换窗口</p><p>切换方式：传入要操作窗口的name或者句柄handle</p><p><code>driver.switchTo.window(nameOrHandle);</code></p><p>如何获取到窗口页面的句柄：</p><ul><li><code>driver.getWindowHandle();</code>获取当前操作窗口的句柄</li><li><code>driver.getWindowHandles();</code>获取测试时打开的所有窗口句柄</li></ul><h3 id="select下拉框"><a href="#select下拉框" class="headerlink" title="select下拉框"></a>select下拉框</h3><p>如果页面元素时是一个下拉框，可以将次Web元素封装为Select对象</p><ul><li><code>Select select = new Select(WebElement element);</code></li></ul><p>Select对象常用API</p><ul><li><code>select.getOptions();</code>获取所有选项</li><li><code>select.selectByIndex(index);</code>获取索引选中对应的元素</li><li><code>select.selectByValue(value);</code>选中指定value值对应的选项</li><li><code>select.selectByVisibleText(text)</code>选中文本值对应的选项</li></ul><h3 id="时间日期控件"><a href="#时间日期控件" class="headerlink" title="时间日期控件"></a>时间日期控件</h3><p>分为两种情况：</p><ul><li><p>控件没有限制手动输入，测直接调用sendKeys方法写入时间数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间日期控件</span></span><br><span class="line">opeanChrome();</span><br><span class="line">chromeDriver.get(<span class="string">&quot;https://www.fliggy.com/?ali_trackid=2:mm_580840021_2968100290_115013700224:1695795842_087_879488174&amp;union_lens=lensId:PUB@1694669594@0be085cd_09df_18a922ddf56_d0eb@01@eyJmbG9vcklkIjozODg1Miiwiic3BtQiiI6Il9wb3J0YWxfdjJfcGFnZXNfYWN0aXZpdHlfb2ZmaWNpYWxfaW5kZXhfaHRtIn0ie;recoveryid:087_41852627@1695795842353&amp;rootPageId=20150318020010234&amp;bxsign=tbktK07IRSYD_ottbYadojTdnlVU4NrusREkCNNuZWqcG0iY9VggecxE0I7oNA6SD-MH5FIEV3RbK9JUJbFFjsG0oCrFYAUIAHRNK3UdMjtcUaEWG_JPVEmj7u5AZVETJpaxf6UBwBotkDBJwoUpoHafQ&quot;</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">chromeDriver.findElement(By.xpath(<span class="string">&quot;//form[@id=&#x27;J_FlightForm&#x27;]//input[@name=&#x27;depDate&#x27;]&quot;</span>)).sendKeys(<span class="string">&quot;2023-09-27&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>控件有限制输入，则可以执行一段js来改变元素的value属性值</p><p><code>JavascriptExeutor jsExecutor = (JavascriptExecutor)driver;</code></p><p><code>jsExecutor.executeScript(&quot;...&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chromeDriver.get(<span class="string">&quot;www.12306.cn/index/&quot;</span>);</span><br><span class="line"><span class="comment">//解除输入的时间日期限制</span></span><br><span class="line"><span class="type">JavascriptExecutor</span> <span class="variable">javascriptExecutor</span> <span class="operator">=</span> (JavascriptExecutor)chromeDriver;</span><br><span class="line">javascriptExecutor.executeScript(<span class="string">&quot;document.getElementById(&quot;</span>\train_date\<span class="string">&quot;).removeAttribute(\&quot;readonly\&quot;)&quot;</span>);</span><br><span class="line">chromeDriver.findElement(By.id(<span class="string">&quot;train_date&quot;</span>)).sendKeys(<span class="string">&quot;2023-10-01&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="鼠标操作-未完待续"><a href="#鼠标操作-未完待续" class="headerlink" title="鼠标操作(未完待续)"></a>鼠标操作(未完待续)</h3><p>使用Selenium的Actions类来模拟鼠标键盘操作，通过Actions对象可以发起鼠标左键、右键、移动鼠标等操作，最后使用perform方法执行操作</p><p><code>actions.clickAndHold(onElement).moveToElement(toElement).release().build().perform()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">opeanChrome();</span><br><span class="line">chromeDriver.get(<span class="string">&quot;https://www.treejs.cn/v3/demo/cn/exedit/drag.html&quot;</span>);</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">sourceElement</span> <span class="operator">=</span> chromeDriver.findElement(By.id(<span class="string">&quot;treeDemo_2_span&quot;</span>));</span><br><span class="line"><span class="type">WebElement</span> <span class="variable">targetElement</span> <span class="operator">=</span> chromeDriver.findElement(By.id(<span class="string">&quot;treeDemo_4_span&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">Actions</span> <span class="variable">actions</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Actions</span>(chromeDriver);</span><br><span class="line">actions.clickAndHold(sourceElement).moveToElement(targetElement).release().click().perform();</span><br></pre></td></tr></table></figure><h3 id="文件上传、验证码"><a href="#文件上传、验证码" class="headerlink" title="文件上传、验证码"></a>文件上传、验证码</h3><ul><li>如果有<code>input</code>，使用sendKeys写入文件路径</li><li>如果不是<code>input</code>元素，使用第三方工具，如:autoit</li></ul><h3 id="截屏操作"><a href="#截屏操作" class="headerlink" title="截屏操作"></a>截屏操作</h3><h1 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h1><p><strong>基本概念：</strong></p><ul><li><p>虚拟用户数：线程&#x3D;用户</p></li><li><p>并发数：指在某一时间，一定数量的虚拟用户同时对系统的某个功能进行交互，一般通过集合点实现</p></li><li><p>事务：一个接口可以是事务，多个接口也可以是事务，一个流程可以是事务，事务代表着一个完整的功能，由测试人员决定。</p></li><li><p>场景：性能测试的用例</p></li><li><p>相应时间：Response Time(RT)</p></li><li><p>TPS：是系统的重要性能指标，用于衡量系统在一定的时间内能够处理的事务数（交易数）</p><p>计算公式：总的事务数&#x2F;总的运行时间</p></li><li><p>QTS：每一秒的查询率</p></li><li><p>吞吐量：衡量网络成功传输的数量，单位：Byte&#x2F;S</p></li><li><p>资源利用率：服务器、CPU、内存、磁盘、网络</p></li></ul><hr><blockquote><p>Web性能测试是为了考察大家对JMeter工具的基础使用情况，我们从 (1) 线程名称、 (2) 线程数、 (3) 启动时间、 (4) 运行时、 (5) 事务控制器、 (6) 集合点、 (7) 参数化、 (8) 请求成功率等方面作为得分点，来检测大家对生成测试脚本的测试能力。</p><p>性能测试总分共计100分，其中线程名称占比10%、线程数占比10%、启动时间占比10%、运行时间占比10%、事务控制器占10%、集合点占比20%、参数化占比20%、请求成功率占比10%。</p></blockquote><hr><h2 id="JMeter取样器及脚本录制"><a href="#JMeter取样器及脚本录制" class="headerlink" title="JMeter取样器及脚本录制"></a>JMeter取样器及脚本录制</h2><h3 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h3><h4 id="JMeter运行参数的设置"><a href="#JMeter运行参数的设置" class="headerlink" title="JMeter运行参数的设置"></a>JMeter运行参数的设置</h4><ul><li>线程组的设置</li><li>集合点的设置</li></ul><h4 id="数据驱动的JMeter参数化测试"><a href="#数据驱动的JMeter参数化测试" class="headerlink" title="数据驱动的JMeter参数化测试"></a>数据驱动的JMeter参数化测试</h4><h3 id="练习赛截图"><a href="#练习赛截图" class="headerlink" title="练习赛截图"></a>练习赛截图</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/web%E6%B5%8B%E8%AF%95%E7%BB%83%E4%B9%A0%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/web%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%85%B3%E6%9D%91%20%E7%BA%BF%E7%A8%8B%E7%BB%84.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/web%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%85%B3%E6%9D%91%20csv.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/web%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%85%B3%E6%9D%91%20csv2.png"></p><p><mark><strong>集合点：</strong>(Synchronizing Timer)</mark></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/web%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%85%B3%E6%9D%91%20%E5%90%8C%E6%AD%A5%E8%AE%A1%E6%97%B6%E5%99%A8.png"></p><h3 id="录制流量"><a href="#录制流量" class="headerlink" title="录制流量"></a>录制流量</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%BD%95%E5%88%B6%E6%B5%81%E9%87%8F.png"></p><p>英文：<code>HTTP(s) Test Script Recorder</code></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%BD%95%E5%88%B6%E7%BD%91%E7%AB%99%E6%B5%81%E9%87%8F.png"></p><h2 id="JMeter的运行参数设置"><a href="#JMeter的运行参数设置" class="headerlink" title="JMeter的运行参数设置"></a>JMeter的运行参数设置</h2><ul><li>线程组的设置</li><li>集合点的设置</li></ul><h2 id="数据驱动的JMeter参数化设置"><a href="#数据驱动的JMeter参数化设置" class="headerlink" title="数据驱动的JMeter参数化设置"></a>数据驱动的JMeter参数化设置</h2><p><a href="https://www.bilibili.com/video/BV1S84y1U7xo?t=1754.2">未完待续</a></p><h2 id="模拟时间间隔"><a href="#模拟时间间隔" class="headerlink" title="模拟时间间隔"></a>模拟时间间隔</h2><ol><li>固定定时器</li></ol><p>当要访问一个网站的首页、第二页面、第三页面等网页时，模拟正常的用户访问顺序、时间，这时，可以设置<strong>固定定时器</strong></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%9B%BA%E5%AE%9A%E5%AE%9A%E6%97%B6%E5%99%A8.png"></p><ol start="2"><li><p>测试活动取样器</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%B5%8B%E8%AF%95%E6%B4%BB%E5%8A%A8%E5%8F%96%E6%A0%B7%E5%99%A8.png"></p></li></ol><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 软件测试、Web测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2023/09/09/JavaWeb/"/>
      <url>/2023/09/09/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="JavaWeb的概念"><a href="#JavaWeb的概念" class="headerlink" title="JavaWeb的概念"></a>JavaWeb的概念</h2><p>是指，所有通过Java语言编写可以通过浏览器访问的程序的总称</p><p>是基于<strong>请求</strong>和<strong>响应</strong>开发的</p><ul><li>请求：客户端给服务器发送数据，Request</li><li>响应：服务器给客户端回传数据，Response</li><li>响应与请求的关系：成对出现</li></ul><h2 id="Web资源的分类"><a href="#Web资源的分类" class="headerlink" title="Web资源的分类"></a>Web资源的分类</h2><ul><li>静态资源：html、css、js、txt、mp4、jpg</li><li>动态资源：jsp页面，Servlet程序</li></ul><h2 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h2><ul><li><p>框架：半成品软件，可以在框架的基础上进行软件的开发，简化代码</p></li><li><p>反射：将类的各个组成部分封装为其他对象</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JavaWeb%E5%8F%8D%E5%B0%84.png"></p><ul><li>好处：<ol><li>可以在程序运行的过程中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ol></li></ul></li></ul><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>Maven是专门用于管理和构建Java项目的工具，它的主要功能有</p><ul><li>提供了一套标准化的项目结构</li><li>提供了一套标准化的构建流程 (编译，测试，打包，发布……)</li><li>提供了一套依赖管理机制</li></ul><p><strong>常用命令</strong></p><ul><li>compile</li><li>clean </li><li>test</li><li>package</li><li>install</li></ul><h3 id="maven坐标"><a href="#maven坐标" class="headerlink" title="maven坐标"></a>maven坐标</h3><ul><li>是资源的唯一标识</li><li>使用坐标来定义项目或引入项目中的依赖</li></ul><p><strong>组成</strong></p><ul><li>groupID：定义当前Maven项目隶属组织名称</li><li>artifactID：定义当前Maven项目名称</li><li>version：定义当前项目版本号</li></ul><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a><strong>依赖</strong></h3><p>需要使用到的相关jar包</p><p><strong>依赖范围</strong></p><p>&lt;scope&gt;&lt;&#x2F;scope&gt;</p><p>通过设置坐标的依赖范围（scope），可以设置对应jar包的作用范围：编译环境、测试环境、运行环境</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/maven%20%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4.jpg"></p><p><strong>排除依赖</strong></p><p>&lt;exclusiom&gt;&lt;&#x2F;exclusion&gt;</p><p><strong>生命周期</strong></p><p>3套相互独立的生命周期</p><ul><li>clean：清理工作</li><li>default:核心工作(编译、测试、打包、安装、部署)</li><li>site:生成报告。发布站点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/Maven%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E9%98%B6%E6%AE%B5.jpg"></p><blockquote><p>在同一套生命周期中，当运行后面的阶段时，前面的阶段都会运行</p></blockquote><h2 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h2><p>SSM框架是spring、spring MVC和mybatis框架的整合，是标准的MVC模式。标准的SSM框架有四层，分别是DAO(Mapper)层、Service层、Controller层和View层。使用spring实现业务对象管理，使用spring MVC负责请求的转发和视图管理，mybatis作为数据对象的持久化引擎</p><h3 id="持久层-Mapper-x2F-DAO"><a href="#持久层-Mapper-x2F-DAO" class="headerlink" title="持久层(Mapper&#x2F;DAO)"></a>持久层(Mapper&#x2F;DAO)</h3><p>主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此。</p><ul><li>Dao层首先设计的是接口，然后再Spring的配置文件中定义接口的实现类</li><li>然后可以在模块中进行接口的调用来进行数据业务的处理。 (不在关心接口的实现类是哪个类)</li><li>数据源的配置以及有关数据库连接的参数都在Spring的配置文件中进行配置</li></ul><h3 id="业务层-Service"><a href="#业务层-Service" class="headerlink" title="业务层(Service)"></a>业务层(Service)</h3><p>业务模块的逻辑应用设计</p><ul><li>先设计接口然后再设计实类，然后再在Spring的配置文件中配置其实现的关联。(业务逻辑层的实现具体要调用到自己已经定义好的Dao的接口上)这样就可以在应用中调用Service接口来进行业务处理。</li><li>建立好Dao之后再建立service层，service层又要在controler层之下，因为既要调用Dao层的接口又要提供接口给controller层。每模型都有一个service接口，每个接口分别封装各自的业务处理的方法。</li></ul><h3 id="表现层-Controller"><a href="#表现层-Controller" class="headerlink" title="表现层(Controller)"></a>表现层(Controller)</h3><p>负责具体的业务模块流程控制</p><ul><li>配置也同样是在Spring的配置文件里面进行的</li><li>调用Service层提供的接口来控制业务流程</li><li>业务流程的不同会有不同的控制器，在具体的开发中可以将我们的流程进行抽象的归纳，设计出可以重复利用的子单元流程模块</li></ul><h4 id="View层"><a href="#View层" class="headerlink" title="View层"></a>View层</h4><p>主要和控制层紧密结合，主要负责前台jsp页面的表示</p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>Controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据</li><li>Service：业务逻辑层，处理具体的业务逻辑</li><li>Dao：数据访问层(Data Access Object)(持久层)，负责数据访问操作，包括数据的增、删、改、查</li></ul><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JavaWeb%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png"></p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ol><li><p>IOC(控制反转Inversion of Control)</p><p>不是技术，是一种设计思想。意味着，将设计好的对象，交给容器控制，而不是传统的在对象内部直接控制</p></li><li><p>AOP(面向切面Aspect Oriented Programming)</p><p>也是一种程序设计规范，旨在将横切关注点与业务逻辑分离</p></li></ol><h4 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h4><ul><li><p>内聚：软件中各个功能模块内部的功能练习</p></li><li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度</p><blockquote><p>软件设计原则：高内聚、低耦合</p></blockquote></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="IOC-amp-DI入门"><a href="#IOC-amp-DI入门" class="headerlink" title="IOC&amp; DI入门"></a>IOC&amp; DI入门</h4><ul><li>IOC-&gt;控制反转：对象的创建控制权由程序自身转移到外部(容器),这种思想称为控制反转</li><li>DI-&gt;依赖注入：容器为应用程序提供运行时，所依赖的资源，称之为依赖注入</li><li>Bean对象：IOC容器中创建、管理的对象，称之为bean</li></ul><h4 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h4><h4 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h4><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><p><strong><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">MyBatis教程</a></Strong></p><p>是一款优秀的持久层框架，用于简化JDBC开发</p><p><strong>持久层</strong></p><ul><li>负责将数据保存大数据库的那一层代码</li><li>JavaEE三层架构：表现层、业务层、持久层</li></ul><p><strong>框架</strong></p><ul><li>是一个半成品软件，是一套可重用、通用的、软件基础代码模型</li><li>在框架的基础上构建软件更加高效、规范、通用、可拓展。</li></ul><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.lifetime.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1. 加载核心配置文件，获取SQLSessionFactory对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取SQLSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行SQL语句</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4. 释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h4><p><strong>目的</strong></p><ul><li>解决原生方式中的硬编码</li><li>简化后期执行SQL</li></ul><p><strong>Mapper代理步骤：</strong></p><ol><li>定义SQL映射文件同名的Map普洱接口，并且将Mapper接口和SQL映射文件方式在同一目录下</li><li>设置SQL映射文件的namespace属性为Mapper接口全限定名</li><li>在Mapper接口中定义方法，方法名就是SQL映射文件中SQL语句的ID，并保持参数类型和返回值类型一致</li><li>编码：<ol><li>通过SqlSession的getMapper方法获取Mapper接口的代理对象</li><li>调用对应方法完成SQL的执行</li></ol></li></ol><h4 id="MyBatis核心配置文件"><a href="#MyBatis核心配置文件" class="headerlink" title="MyBatis核心配置文件"></a>MyBatis核心配置文件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 配置数据库的连接信息 <span class="comment">-- 四要素</span></span><br><span class="line"># 驱动类名称</span><br><span class="line">spring.datasource.driver<span class="operator">-</span>class<span class="operator">-</span>name<span class="operator">=</span>com.mysql.cj.jdbc.Driver</span><br><span class="line"># 数据库连接的url</span><br><span class="line">spring.datasource.url<span class="operator">=</span>jdbc:mysql:<span class="operator">/</span><span class="operator">/</span>localhost:<span class="number">3306</span><span class="operator">/</span>mybatis</span><br><span class="line"># 连接数据库的用户名</span><br><span class="line">spring.datasource.username<span class="operator">=</span>root</span><br><span class="line"># 连接数据库的密码</span><br><span class="line">spring.datasource.password<span class="operator">=</span><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h4><ul><li>Lombok是一个使用的Java类库，能通过注解的形式自动生成构造器getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化Java开发、提高效率</li></ul><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会根据类自动生成易阅读的toString方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写equals方法和hashCode方法</td></tr><tr><td>@Data</td><td>提供更综合的生成代码功能(@Getter+@Setter+@ToString+@EqualsAndHashCode)</td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法</td></tr></tbody></table><h4 id="注解完成增删改查-RUID"><a href="#注解完成增删改查-RUID" class="headerlink" title="注解完成增删改查(RUID)"></a>注解完成增删改查(RUID)</h4><h5 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h5><ul><li><p>预编译SQL</p><ul><li><p>性能更高</p></li><li><p>更安全、防止SQL注入</p><ul><li><p>SQL注入：通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法<code>password = &#39; or &#39;1&#39; = &#39;1</code></p><blockquote><p>参数占位符：</p><ul><li><code>#&#123;...&#125;</code><ul><li>执行SQL时，会将<code>#&#123;...&#125;</code>替换为？，生成预编译SQL，会自动设置参数值</li><li>使用时机：参数传递，都使用<code>#&#123;...&#125;</code></li></ul></li><li><code>$&#123;…&#125;</code><ul><li>拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题</li><li>使用时机：如果对表名、列表进行动态设置使用</li></ul></li></ul></blockquote></li></ul></li></ul></li></ul><h5 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h5><h5 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h5><h5 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h5><ul><li><p>当SQL的字段与实体类的属性不一致</p><ul><li><p>给字段起别名，让别名与实体类属性一致</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JavaWeb%E6%9F%A5%E8%AF%A2%E4%B8%BA%E7%A9%BA%E6%97%B61.png"></p></li><li><p>通过<code>@Results</code>,手动映射封装</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JavaWeb%E6%9F%A5%E8%AF%A2%E4%B8%BA%E7%A9%BA%E6%97%B62.png"></p></li><li><p>打开mybatis的驼峰命名自动映射开关</p><p><code>application.properties</code>文件中：<code>mybatis.configuration.map-underscore-to-camel-case=true</code></p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据ID删除数据</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    <span class="comment">//public int delete(Integer id);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增员工</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +</span></span><br><span class="line"><span class="meta">            &quot; values (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新员工</span></span><br><span class="line">    <span class="meta">@Update(&quot;update emp set username = #&#123;username&#125;, name = #&#123;name&#125;, gender = #&#123;gender&#125;, image = #&#123;image&#125;,&quot; +</span></span><br><span class="line"><span class="meta">            &quot; job = #&#123;job&#125;, entrydate = #&#123;entrydate&#125;, dept_id = #&#123;deptId&#125;,update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure><h4 id="配置文件完成增删改查-XML"><a href="#配置文件完成增删改查-XML" class="headerlink" title="配置文件完成增删改查(XML)"></a>配置文件完成增删改查(XML)</h4><ul><li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下(同包同名)</li><li>XML映射文件的namespace属性为Mapper接口全限定名一致</li><li>XML映射文件中的SQL语句的id与Mapper接口中的方法名一致，并保持返回类型一致</li></ul><h4 id="Mybatis动态SQL"><a href="#Mybatis动态SQL" class="headerlink" title="Mybatis动态SQL"></a>Mybatis动态SQL</h4><ul><li><p>&lt;if&gt;：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/JavaWeb%20mybatis%20if.png"></p></li><li><p>&lt;where&gt;：只会在子元素有内容的情况下才会插入where子句。而且会自动去除子句的开头的AND或OR</p></li><li><p>&lt;set&gt;：动态地在行首插入set关键字，并会删除掉额外的逗号(用在Update语句中)</p></li><li><p>&lt;foreach&gt;</p><ul><li>collection：遍历的集合</li><li>item：遍历出来的元素</li><li>separator：分隔符</li><li>opean：遍历开始前拼接的SQL片段</li><li>close：遍历结束后拼接的SQL片段</li></ul></li><li><p>&lt;sql&gt;：定义可重用的SQL片段</p></li><li><p>&lt;include&gt;：通过属性refid，指定包含的SQL片段</p></li></ul><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h3 id="SpringBootWeb入门"><a href="#SpringBootWeb入门" class="headerlink" title="SpringBootWeb入门"></a>SpringBootWeb入门</h3><ol><li>创建springboot工程，并勾选web开发相关依赖。</li><li>定义HelloController类，添加方法 hello，并添加注解</li><li>运行测试</li></ol><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><code>Hyper Text Transfer Protocol</code>，超文本传输协议，规定了浏览器和服务器之间数据传输的规则</p><p>特点：</p><ul><li>基于TCP协议：面向连接，安全</li><li>基于请求-响应模型的：一次请求对应一次相应</li><li>HTTP协议是无状态的协议：对于事务处理没有记忆能力<ul><li>缺点：多次请求之间不能共享数据</li><li>优点：速度快</li></ul></li></ul><h4 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h4><blockquote><p>请求数据的格式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/http%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A1%88%E4%BE%8B.jpg"></p><p>还有请求体</p><table><thead><tr><th>Host</th><th>请求的主机名</th></tr></thead><tbody><tr><td>User-Agent</td><td>浏览器版本</td></tr><tr><td>Accept</td><td>表示浏览器能接收到的资源类型</td></tr><tr><td>Accept-Language</td><td>表示浏览器偏好的语言，服务器可以据此返回不同语言的网页</td></tr><tr><td>Accept-Encoding</td><td>表示浏览器可以支持的压缩类型</td></tr><tr><td>Content-Type</td><td>请求主体的数据类型</td></tr><tr><td>Content-Length</td><td>请求主体的大小</td></tr></tbody></table><p>例如：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E7%BD%91%E5%9D%80%E8%AF%B7%E6%B1%82.png"></p><h4 id="相应协议"><a href="#相应协议" class="headerlink" title="相应协议"></a>相应协议</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/http%E7%9B%B8%E5%BA%94%E6%A0%BC%E5%BC%8F.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/http%E7%9B%B8%E5%BA%94%E5%A4%B4.jpg"></p><p>常见状态码：</p><ul><li>200： 客户端请求成功</li><li>404： 请求资源不存在</li><li>500： 服务器发生不可预期的错误</li></ul><h4 id="协议解析"><a href="#协议解析" class="headerlink" title="协议解析"></a>协议解析</h4><p>http(Hyper Text Transfer Protocol)超文本传输协议</p><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>是一个软件程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要的功能是“提供网上信息浏览服务”</p><h4 id="请求（各类请求参数的接收和封装）"><a href="#请求（各类请求参数的接收和封装）" class="headerlink" title="请求（各类请求参数的接收和封装）"></a>请求（各类请求参数的接收和封装）</h4><blockquote><p>HTTP的八种请求方式</p><ol><li>GET：向服务器请求指定的资源</li><li>POST：向服务器提交数据请求处理，数据被包含在请求体中</li><li>HEAD：返回服务器上对指定资源数据的HTTP请求头，在不需要2返回全部数据的地方</li><li>OPTIONS：返回服务器对指定资源数据支持的HTTP请求方法，一般用于测试服务器功能的可用性</li><li>PUT：向服务器上传指定的数据</li><li>DELETE：向服务器发送请求删除指定数据</li><li>TRANCE：回显服务器收到的请求，主要进行功能测试诊断</li><li>CONNECT：HTTP1.1协议中预留请求方式，可以将连接改为管道方式的代理服务器</li></ol><p>常见的请求方式：</p><ol><li>POST：添加</li><li>GET：查询</li><li>DELETE：删除</li><li>PUT：修改</li></ol><blockquote><p><strong><mark>注解</mark></strong></p></blockquote><blockquote><p><code>@RequestBody</code>注解的主要作用是接收前端的参数，当我们使用POST请求是，会将参数放在Request Body中，此时我们就需要再Controller的方法参数面前加上@RequestBody用来接收到前端传过来的RequestBody的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>（“/test”）</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">(<span class="meta">@RequestBody</span> String string)</span><span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">       System.out.println(&quot;</span>测试<span class="string">&quot;);</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>一个请求只能有一个RequestBody，也就是说，当一个方法中有两个参数的时候，最多只能有一个参数加@RequestBody注解用来</li><li>@RequestBody接收的参数是来自requestbody中，也就是请求体</li></ol></blockquote><p><code>@RequestParam</code>接收的参数是来自Request header中，即请求头中。通常用于GET请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequesMapping</span>（“/api”）</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">(<span class="meta">@RequestParam(value=&quot;name&quot;,required=false,defaultValue=&quot;雷神&quot;)</span>String name,<span class="meta">@RequestParam(value=&quot;age&quot;)</span>Int age)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;年仅&quot;</span>+age+“岁肥宅”+name);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><ul><li>简单参数</li><li>实体参数</li><li>数组集合参数</li><li>日期参数</li><li>Json参数</li><li>路径参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lifetime.springbootwebrespreq.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lifetime.springbootwebrespreq.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> com.lifetime.springbootwebrespreq.pojo.Hobby;</span><br><span class="line"><span class="keyword">import</span> com.lifetime.springbootwebrespreq.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequest</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;,required = false)</span> String username,Integer age)</span>&#123;</span><br><span class="line">        System.out.println(username + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//信息中包含信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simplePojo1</span><span class="params">(User user, Address address)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有地址的访问&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同一个类型，多个值(数组、集合)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;array&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">array</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收的hobby有(数组)&quot;</span> + Arrays.toString(hobby));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用集合</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;ListParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ListParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收的Hobby(集合)&quot;</span> + hobby);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日期参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span>LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;时间为&quot;</span> + updateTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//json参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p>使用到<code>@ResponseBody</code></p><ul><li>类型：方法注解、类注解</li><li>位置：Controller方法&#x2F;类上</li><li>作用：将方法返回值直接响应，如返回值类型是实体对象&#x2F;集合，将会转换为JSON响应对象</li><li><code>@RestController = @Controlller + @ResponseBody</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lifetime.springbootwebrespreq.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lifetime.springbootwebrespreq.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getAddress&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setCity(<span class="string">&quot;邳州市&quot;</span>);</span><br><span class="line">        address.setProvince(<span class="string">&quot;江苏省&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;listAddress&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">listAddress</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">address1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address1.setProvince(<span class="string">&quot;台湾省&quot;</span>);</span><br><span class="line">        address1.setCity(<span class="string">&quot;台北市&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">address2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address2.setCity(<span class="string">&quot;深圳市&quot;</span>);</span><br><span class="line">        address2.setProvince(<span class="string">&quot;广东省&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(address1);</span><br><span class="line">        list.add(address2);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>↑ 以上，如果数据过多，不容易处理</p><p>↓ 统一响应结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&#123;</span><br><span class="line">    <span class="comment">//响应码 1代表成功 2代表失败</span></span><br><span class="line"> <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//提示信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文件名：ResponseController.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lifetime.springbootwebrespreq.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lifetime.springbootwebrespreq.pojo.Address;</span><br><span class="line"><span class="keyword">import</span> com.lifetime.springbootwebrespreq.pojo.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;getAddress&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAddress</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setCity(<span class="string">&quot;邳州市&quot;</span>);</span><br><span class="line">        address.setProvince(<span class="string">&quot;江苏省&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;listAddress&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listAddress</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">address1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address1.setProvince(<span class="string">&quot;台湾省&quot;</span>);</span><br><span class="line">        address1.setCity(<span class="string">&quot;台北市&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">address2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address2.setCity(<span class="string">&quot;深圳市&quot;</span>);</span><br><span class="line">        address2.setProvince(<span class="string">&quot;广东省&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(address1);</span><br><span class="line">        list.add(address2);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>文件名：Result.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lifetime.springbootwebrespreq.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code,String msg,Object data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;sucess&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Result&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, msg=&#x27;&quot;</span> + msg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开始做项目：</p><hr><hr><ul><li><p>开发规范：基于当前最为流行的前后端分离模式进行开发</p></li><li><p>前端与后端的交互：Restful</p><ul><li><p>REST (REPresentational State Transfer)，表述性状态装换，是一种软件架构风格</p></li><li><blockquote><p>REST只是一种风格，可以打破</p></blockquote></li></ul></li><li><p>开发流程：</p><p>查看页面原型-&gt;阅读接口文档-&gt;思路分析-&gt;接口开发-&gt;接口测试-&gt;前后端联调</p></li></ul><h3 id="部门查询"><a href="#部门查询" class="headerlink" title="部门查询"></a>部门查询</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%9F%A5%E8%AF%A2%E9%83%A8%E9%97%A8%E6%80%9D%E8%B7%AF.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2023/09/09/JDBC/"/>
      <url>/2023/09/09/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="JDBC-简介"><a href="#JDBC-简介" class="headerlink" title="JDBC 简介"></a>JDBC 简介</h2><p>JDBC(<font color='red'>J</font>ava <font color='red'>D</font>ata<font color='red'>B</font>ase <font color='red'>C</font>onnectivity)(<font color='red'>Java数据库连接</font>)是java语言操作关系型数据库的一套API</p><h2 id="JDBC-入门"><a href="#JDBC-入门" class="headerlink" title="JDBC 入门"></a>JDBC 入门</h2><ol><li><p>创建工程，导入jar包</p></li><li><p>注册驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure></li><li><p>获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/jdbc_test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;cz&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure></li><li><p>定义SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 2000 where id =1&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>获取执行SQL对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br></pre></td></tr></table></figure></li><li><p>执行SQL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br></pre></td></tr></table></figure></li><li><p>处理返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">statement.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure></li></ol><h2 id="JDBC-API-详解"><a href="#JDBC-API-详解" class="headerlink" title="JDBC API 详解"></a>JDBC API 详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><ul><li>作用<ul><li>注册驱动</li><li>获取数据库连接</li></ul></li></ul><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><ul><li><p>作用</p><ol><li><p>获取执行SQL的对象</p><ul><li><p>普通执行SQL对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement <span class="title function_">createStatement</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li><li><p>预编译SQL的执行SQL对象：防止SQL注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement <span class="title function_">prepareStatement</span><span class="params">(sql)</span></span><br></pre></td></tr></table></figure></li><li><p>执行存储过程的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement <span class="title function_">prepaareCall</span><span class="params">(sql)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>管理事务</p><ul><li><p>MySQL事务管理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启事务：<span class="keyword">BEGIN</span>；<span class="operator">/</span><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">提交事务：<span class="keyword">COMMIT</span>;</span><br><span class="line">回滚事务：<span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></li><li><p>JDBC事务管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启事务：setAutoCommit(<span class="type">boolean</span> autoCommit):<span class="literal">true</span>为自动提交；FALSE为手动提交，几位开始事务</span><br><span class="line">提交事务:commit();</span><br><span class="line">回滚事务:rollback();</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><ul><li><p>作用：</p><ol><li><p>执行SQL语句</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20statement.jpg"></p></li></ol></li></ul><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><ul><li><p>封装了DQL语句查询结果</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20resultset.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20result%E6%96%B9%E6%B3%95.jpg"></p></li></ul><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>未完：<a href="https://www.bilibili.com/video/BV1s3411K7jH?t=972.5&p=5">https://www.bilibili.com/video/BV1s3411K7jH?t=972.5&amp;p=5</a></p><h2 id="据库连接池"><a href="#据库连接池" class="headerlink" title="据库连接池"></a>据库连接池</h2><p>未完：<a href="https://www.bilibili.com/video/BV1s3411K7jH?t=972.5&p=5">https://www.bilibili.com/video/BV1s3411K7jH?t=972.5&amp;p=5</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/08/20/MySQL/"/>
      <url>/2023/08/20/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>服务启动与关闭：<code>net start mysql</code>,<code>net stop mysql</code></p><p>连接到MySQL服务的指令：<code>mysql -h localhost -P 3306 -u root -pcz</code></p><p>表的一行称之为一条记录，在java中，一行记录往往使用对象表示</p><h2 id="MySQL结构"><a href="#MySQL结构" class="headerlink" title="MySQL结构:"></a>MySQL结构:</h2><p><strong>数据库的三层结构</strong></p><ul><li>数据库管理系统(DBMS)</li><li>数据库</li><li>表</li></ul><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/MySQL%E7%BB%93%E6%9E%84.jpg"></p><p><strong>SQL语句的分类</strong></p><ul><li>DDL：数据定义语句[create]</li><li>DML：数据操作语句[增加insert，修改update，删除delete]</li><li>DQL：数据查询语句[select]</li><li>DCL：数据控制语句[管理数据库]</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>CREATE DATABASE [IF NOT EXISTS];</code></p><blockquote><ol><li><p>[DEFAULT] CHARACTER SET ：指定数据库采用的字符集，如果不指定字符集，默认utf-8</p></li><li><p>COLLATE：指定数据库字符集的校对规则（常用的utf8_bin(区分大小写)、utf8_general_ci(不区分大小写)）</p></li></ol></blockquote><h3 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h3><p><code>SELECT * FROM dbtest WHERE NAME = &#39;tom&#39;;</code></p><h3 id="查看、删除数据库"><a href="#查看、删除数据库" class="headerlink" title="查看、删除数据库"></a>查看、删除数据库</h3><ul><li><p>显示数据库语句：</p><p><code>SHOW DATABASES</code></p></li><li><p>显示数据库创建语句：</p><p><code>SHOW CREATE DATABASE db_name;</code></p></li><li><p>数据库删除语句：</p><p><code>DROP DATABASE [IF EXITS] db_name;</code></p></li></ul><h3 id="备份恢复数据库"><a href="#备份恢复数据库" class="headerlink" title="备份恢复数据库"></a>备份恢复数据库</h3><ul><li><p>备份数据库(DOS命令行)</p><p><code>mysqldump -u 用户名 -p -B 数据库1 数据库2 数据库n &gt; 文件名.sql</code></p></li><li><p>恢复数据库</p><p><code>Sourse 文件名.sql</code></p></li></ul><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p><code>CREATE TABLE table_name(</code></p><p><code>field1 datatype,</code></p><p><code>field2 datatype,</code></p><p><code>field3 datatype</code></p><p><code>)``character set 字符集 collate 校对规则 engine 存储引擎</code></p><p>field:指定列名 </p><p>datatype: 指定列类型(字段类型)</p><p>character set:不指定为所在数据库字符集</p><p>collate：不指定为所在数据库校对规则</p><p>engine：引擎</p><h3 id="删除-amp-amp-修改"><a href="#删除-amp-amp-修改" class="headerlink" title="删除&amp;&amp;修改"></a>删除&amp;&amp;修改</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/sql%20%E4%BF%AE%E6%94%B9%E8%A1%A8.jpg"></p><h2 id="MySql数据类型-列类型"><a href="#MySql数据类型-列类型" class="headerlink" title="MySql数据类型(列类型)"></a>MySql数据类型(列类型)</h2><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/MySQl%E5%88%97%E6%95%B0%E6%8D%AE.png"></p><h3 id="列类型的基本使用"><a href="#列类型的基本使用" class="headerlink" title="列类型的基本使用"></a>列类型的基本使用</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><ol><li><p>在满足需求的情况下，尽量选择占用空间小的类型</p></li><li><p>如何定义一个无符号的整数</p><p>unsigned</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test01(</span><br><span class="line">id tinyint</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test02(</span><br><span class="line">id tinyint unsigned</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01 <span class="keyword">values</span>(<span class="number">-128</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test02 <span class="keyword">values</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02;</span><br></pre></td></tr></table></figure><h4 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h4><ol><li>bit(m)，m在1~64之间</li><li>添加数据范围</li><li>显示按照bit</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test03 (num bit (<span class="number">8</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test03 <span class="keyword">values</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03;</span><br></pre></td></tr></table></figure><h4 id="小数型"><a href="#小数型" class="headerlink" title="小数型"></a>小数型</h4><ol><li>Float、double{}[unsigned]</li><li>decimal[M,D][unsigned]<ul><li>可以支持更加精确的小数位：M是小数位数（精度）的总和，D是小数点(标度)后面的位数</li><li>D&#x3D;0，没有小数点或分数部分。</li><li>M最大为65，D最大是30</li><li>D被省略，为0，M被省略，默认是10</li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test04(</span><br><span class="line">num1 <span class="type">FLOAT</span>,</span><br><span class="line">num2 <span class="keyword">DOUBLE</span>,</span><br><span class="line">num3 <span class="type">DECIMAL</span>(<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test04 <span class="keyword">VALUE</span>(<span class="number">1234567890.1234567890</span>,<span class="number">1234567890.1234567890</span>,<span class="number">1234567890.1234567890</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test04;</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><p>字符串的基本使用</p><ul><li><p>CHAR(size)</p><p>固定长度字符串，最大255字符</p></li><li><p>VARCHAR(size)</p><p>可变长度字符串，最大65532字节</p></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test05 (</span><br><span class="line"><span class="string">&#x27;name&#x27;</span> <span class="type">CHAR</span>(<span class="number">255</span>));</span><br></pre></td></tr></table></figure><p>细节：<mark>不区分是字符还是字节，具体的字节数要根据编码格式进行计算</mark></p><ul><li><code>char(4)</code>，4表示字符数（最大255），不是字节数</li><li><code>varchar(4)</code>，4表示字符数</li></ul><blockquote><p>细节：</p></blockquote><blockquote><ol><li>不管是中文还是英文，都是最多存放4个，是按照字符来存放</li><li><mark><code>char(4)</code>是定长</mark>，不管插入几个字符，只会分配4个字符</li><li><mark><code>varchar(4)</code>是变长</mark>，按照实际占用的空间来分配</li></ol><ul><li><code>varchar</code>本身还需要占用1-3个字节来记录存放内容长度</li></ul><ol start="4"><li><ul><li>如果数据是定长，推荐使用char，比如md5的密码,邮编，手机号，身份证号码等.char(32)</li></ul></li></ol><ul><li>如果一个字段的长度是不确定，我们使用varchar ，比如留言，文章.</li><li>查询速度：char &gt; varchar</li></ul><ol start="5"><li>在存放文本时，也可以使用Text 数据类型.可以将TEXT列视为VARCHAR列,注意 Text 不能有默认值.大小 0-2^16 字节。如果希望存放更多字符，可以选择MEDIUMTEXT(0-2^24) 或者 LONGTEXT(0-2^32)</li></ol></blockquote><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (</span><br><span class="line">  birthday <span class="type">DATE</span>,</span><br><span class="line">  job_time DATETIME,</span><br><span class="line">  login_time <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1(birthday,job_time) <span class="keyword">VALUE</span>(<span class="string">&#x27;2003-4-24&#x27;</span>,<span class="string">&#x27;2026-3-1&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="CRUD-create、read、update、delete"><a href="#CRUD-create、read、update、delete" class="headerlink" title="CRUD(create、read、update、delete)"></a>CRUD(create、read、update、delete)</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20insert.jpg"></p><ol><li>插入的数据应与宁段的数据类型相同。<br>比如 把 abo’ 添加到 int 类型会错误</li><li>数据的长度应在列的规定范围内，例如: 不能将一个长度为80的字符串加入到长度为40的列中</li><li>在values中列出的数据位置必须与被加入的列的排列位置相对应。<br>字符和日期型数据应包含在单引号中。</li><li>列可以插入空值[前提是该字段允许为空]，insert into table value (null)</li><li>insert into tab name (列名..) values (),),() 形式添加多条记录</li><li>如果是给表中的所有字段添加数据，可以不写前面的字段名称</li><li>默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错</li></ol><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20update.jpg"></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20delete.jpg"></p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">all</span><span class="operator">|</span><span class="keyword">distinct</span>]<span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span>]</span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span> [,<span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span><span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>[<span class="keyword">having</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span><span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>[<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]]</span><br></pre></td></tr></table></figure><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><p>1. </p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQLselect1.jpg"></p><p>准备：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">chinese <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">English <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">Math <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span> </span><br><span class="line"> );</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id,`name`,chinese,English,Math)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;曹志&#x27;</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="number">99</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id,`name`,chinese,English,Math)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">89</span>,<span class="number">78</span>,<span class="number">86</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id,`name`,chinese,English,Math)<span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">76</span>,<span class="number">87</span>,<span class="number">56</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id,`name`,chinese,English,Math)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">87</span>,<span class="number">56</span>,<span class="number">76</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id,`name`,chinese,English,Math)<span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;熊大&#x27;</span>,<span class="number">81</span>,<span class="number">83</span>,<span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id,`name`,chinese,English,Math)<span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;熊二&#x27;</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id,`name`,chinese,English,Math)<span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">7</span>,<span class="number">74</span>,<span class="number">75</span>);</span><br></pre></td></tr></table></figure><p>select：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询表中所有学生的信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"># 查询表中所有学生的姓名和对应的英语成绩</span><br><span class="line"><span class="keyword">select</span> `name`,English <span class="keyword">from</span> student;</span><br><span class="line"># 过滤表中重复数据 <span class="keyword">distinct</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><p>2. </p><p>使用表达式对查询的列进行运算</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20select2-1.jpg"></p><p>在select语句中可使用as语句</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20select2-2.jpg"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 统计每个学生的总分</span><br><span class="line"><span class="keyword">SELECT</span> `name`, (English<span class="operator">+</span>Math<span class="operator">+</span>chinese) <span class="keyword">FROM</span> student;</span><br><span class="line"># 在所有学生总分加十分的情况</span><br><span class="line"><span class="keyword">SELECT</span> `name`, (English <span class="operator">+</span> Math <span class="operator">+</span> chinese <span class="operator">+</span> <span class="number">10</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"># 使用别名表示学生分数</span><br><span class="line"><span class="keyword">SELECT</span> `name`, (English <span class="operator">+</span> Math <span class="operator">+</span> chinese <span class="operator">+</span> <span class="number">10</span>) <span class="keyword">AS</span> `total` <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>3. </p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20select3-1.jpg"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查询姓名为赵云的学生成绩</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"># 查询英语成绩大于<span class="number">90</span>分的同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> English <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"># 查询总分大于<span class="number">200</span>分的所有同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> (English<span class="operator">+</span>Math<span class="operator">+</span>chinese) <span class="operator">&gt;</span> <span class="number">200</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查询math大于<span class="number">60</span> 并且(<span class="keyword">AND</span>) id大于<span class="number">90</span>的学生成绩</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> Math <span class="operator">&gt;</span> <span class="number">60</span> <span class="keyword">AND</span> id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"># 查询英语成绩大于语文成绩的同学</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> English <span class="operator">&gt;</span> chinese;</span><br><span class="line"># 查询总分大于<span class="number">200</span>分 并且 数学成绩小于等于语文成绩，姓曹的学生.</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student </span><br><span class="line"><span class="keyword">WHERE</span> (English<span class="operator">+</span>Math<span class="operator">+</span>chinese) <span class="operator">&gt;</span> <span class="number">200</span> <span class="keyword">AND</span> Math <span class="operator">&lt;=</span> chinese <span class="keyword">AND</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;曹%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h4 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h4><h4 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h4><h4 id="基于派生表的查询"><a href="#基于派生表的查询" class="headerlink" title="基于派生表的查询"></a>基于派生表的查询</h4><h5 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h5><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所<br>以各个表结构之间也存在着各种联系，基本上分为三种:</p><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h5 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h5><ul><li><p>笛卡尔积：</p><p>笛卡尔乘积是指在数学中，两个集合A集合和 B集合的所有组合情况。(在多表查询时，需要消除无效的笛卡尔积)</p></li></ul><h5 id="多表查询的分类"><a href="#多表查询的分类" class="headerlink" title="多表查询的分类"></a>多表查询的分类</h5><ul><li><p>连接查询</p><ul><li><p>内连接：相当于查询A、B交集部分数据</p><ul><li><p>隐式内连接：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E9%9A%90%E5%BC%8F%E5%86%85%E8%BF%9E%E6%8E%A5.jpg"></p></li><li><p>显示内连接：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E6%98%BE%E7%A4%BA%E5%86%85%E8%BF%9E%E6%8E%A5.jpg"></p></li></ul></li><li><p>外连接</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E5%A4%96%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.jpg"></p><ul><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li></ul></li><li><p>自连接：当前与自身的连接查询，自连接必须使用表别</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E8%87%AA%E8%BF%9E%E6%8E%A5.jpg"></p></li></ul></li><li><p>子查询</p><p>SQL语句中嵌套select语句，称为嵌套查询，又叫子查询</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E5%AD%90%E6%9F%A5%E8%AF%A2.jpg"></p><p>子查询外部的语句可以是insert、update、delete、select的任意一个</p><ul><li><p>标量子查询</p><p>子查询返回的结果是单个值(数字、字符串、日期)，最简单的形式，这种子查询称为标量子查询</p></li><li><p>列子查询</p><p>子查询返回的结果是一列(可以是多行)</p><blockquote><p>操作符：</p><p>IN、NOT IN、ANY、SOME、ALL</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E7%AC%A6.jpg"></p></blockquote></li><li><p>行子查询</p><p>子查询返回的结果是一行</p></li><li><p>表子查询</p><p>子查询返回的结果是多行多列</p></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h3><ol><li><p>合计&#x2F;统计函数</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20count.jpg"></p><p>–&gt; 返回行的总数</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 函数</span><br><span class="line"><span class="comment">-- 合计函数</span></span><br><span class="line"><span class="comment">-- 统计一个班级共有多少学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 统计数学成绩大于90的学生有多少个</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> Math <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"><span class="comment">-- 统计总分大于250的人数有多少</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> (English <span class="operator">+</span> Math <span class="operator">+</span> chinese) <span class="operator">&gt;</span> <span class="number">250</span>;</span><br><span class="line"><span class="comment">-- count(*)和count(列)的区别</span></span><br><span class="line"><span class="comment">-- count(*) 返回满足条件的记录的行数</span></span><br><span class="line"><span class="comment">-- count(列): 统计满足条件的某列有多少个，但是会排除 为null</span></span><br></pre></td></tr></table></figure><ol start="2"><li>sum</li></ol><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/sql%20sum.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20sum%E7%9A%84%E4%BD%BF%E7%94%A8.jpg"></p><ol start="3"><li>avg</li></ol><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20avg.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20AVG%E7%9A%84%E4%BD%BF%E7%94%A8.jpg"></p><ol start="4"><li>合计函数</li></ol><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20min%E3%80%81max.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/sql%20min%E3%80%81max%E7%9A%84%E4%BD%BF%E7%94%A8.jpg"></p><ol start="5"><li>group by</li></ol><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20group%20by.jpg"></p><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/sql%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.jpg"></p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E6%95%B0%E5%AD%A6.jpg"></p><h3 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F2.jpg"></p><h3 id="加密和系统函数"><a href="#加密和系统函数" class="headerlink" title="加密和系统函数"></a>加密和系统函数</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E5%8A%A0%E5%AF%86%E5%92%8C%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0.jpg"></p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0.jpg"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E7%BA%A6%E6%9D%9F%E7%9A%84%E5%88%86%E7%B1%BB.jpg"></p><p><strong>外键约束</strong></p><p>外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性</p><p><strong>添加外键约束的语法</strong>：</p><p>添加外键：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E5%A4%96%E9%94%AE%E8%AF%AD%E6%B3%95.jpg"></p><p>添加主键：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E5%88%A0%E9%99%A4%E5%A4%96%E9%94%AE.jpg"></p><p>外键的删除和更新行为</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E5%A4%96%E9%94%AE%E7%9A%84%E5%88%A0%E9%99%A4%E5%92%8C%E6%9B%B4%E6%96%B0%E8%A1%8C%E4%B8%BA.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E7%BA%A6%E6%9D%9F%E8%A1%8C%E4%B8%BA%E6%93%8D%E4%BD%9C.jpg"></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h3><p>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败</p><blockquote><p>例：转账</p></blockquote><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p><strong>方式一</strong></p><ul><li><p>查看&#x2F;设置事务提交方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>方式二</strong></p><ul><li><p>开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION 或 <span class="keyword">BEGIN</span>;</span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="事务四大特性-ACID"><a href="#事务四大特性-ACID" class="headerlink" title="事务四大特性(ACID)"></a>事务四大特性(ACID)</h3><ul><li>原子性 (Atomicity): 事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency): 事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(lsolation): 数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性 (Durability): 事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E5%B9%B6%E5%8F%91%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98.jpg"></p><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/SQL%20%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.jpg"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看事务隔离级别</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TRANSACTION_ISOLATION</span></span><br><span class="line">设置事务隔离级别</span><br><span class="line"><span class="keyword">SET</span> [SESSION<span class="operator">|</span><span class="keyword">GLOBAL</span>] TRANSACTION ISLATION LEVEL &#123;READ UNCOMMITTED <span class="operator">|</span> READ COMMITTED <span class="operator">|</span> REPEATABLE READ <span class="operator">|</span> SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure><blockquote><p>附：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/MySQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/MySQL%20%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2.jpg"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络</title>
      <link href="/2023/08/18/Java%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/08/18/Java%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><ul><li>获取本机InetAddress对象：<code>getLocalHost()</code></li><li>根据指定主机名&#x2F;域名获取ip地址对象：<code>getByName()</code></li><li>获取InetAddress对象的主机名：<code>getHostName()</code></li><li>获取InetAddress对象的地址：<code>getHostAddress()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">API_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);</span><br><span class="line"></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">byName</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;MaxLifetime-LAPTOP&quot;</span>);</span><br><span class="line">        System.out.println(byName);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">lh1</span> <span class="operator">=</span> localHost.getHostName();</span><br><span class="line">        System.out.println(lh1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">hm</span> <span class="operator">=</span> byName.getHostName();</span><br><span class="line">        System.out.println(hm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ol><li><p>套接字(Socket)开发网络应用程序被广泛采用，以至于成为事实上的标准</p></li><li><p>通信的两端都要有插座，是两台机器间通信的端点</p></li><li><p>网络通信其实就是Socket间的通信.</p></li><li><p>Socket允许程序把网络连接当成一个流，数据在两个套接字间通过IO传输</p></li><li><p>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</p></li></ol><h3 id="TCP网络通信编程"><a href="#TCP网络通信编程" class="headerlink" title="TCP网络通信编程"></a>TCP网络通信编程</h3><ol><li>基本介绍<ul><li>基于客户端——服务端的网络通信</li><li>底层使用的是TCP&#x2F;IP协议</li><li>应用场景举例：客户端发送数据、服务端接受并显示</li><li>基于Socket的TCP编程</li><li>（可靠）</li></ul></li></ol><h3 id="UDP编程"><a href="#UDP编程" class="headerlink" title="UDP编程"></a>UDP编程</h3><p>（不可靠）</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/TCP%E9%80%9A%E4%BF%A1%E7%BC%96%E7%A8%8B.png"></p><blockquote><p>练习1.：</p><p>1.编写一个服务器端,和一个客户端<br>2.服务器端在 9999端口监听<br>3.客户端连接到服务器端，发送“hello,server”，然后退出<br>4.服务器端接收到 客户端发送的 信息，输出，并退出</p><p>思路：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/TCPMind.jpg"></p><blockquote><p><Strong>Server:</Strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Internet.API;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待连接&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((readLen = inputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes ,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><Strong>Client：</Strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Internet.API;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">        outputStream.write(string.getBytes());</span><br><span class="line"></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><p>练习2：(使用字节流)</p><ol><li>编写一个服务端，和一个客户端</li><li>服务器端在9999端口监听</li><li>客户端连接到服务器端，发送“你好，服务器”，并接收服务器端回发的“你好，客户”再退出</li><li>服务器端接收到客户端发送的信息，输出，并发送“你好，客户”，再退出</li></ol><p>思路：</p><p> &#x2F;+ 以上思路</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/TCPMindTest2.jpg"></p><blockquote><p><strong>Server:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Internet.API.TCP_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP2Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//2.服务器端在9999端口监听</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((readLen = inputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nServer收到“你好，服务器”&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.客户端连接到服务器端，发送“你好，服务器”，并接收服务器端回发的“你好，客户”再退出</span></span><br><span class="line">        <span class="comment">//4.服务器端接收到客户端发送的信息，输出，并发送“你好，客户”，再退出</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;你好，客户&quot;</span>.getBytes());</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        serverSocket.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><Strong>Client:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Internet.API.TCP_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP2Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//3.客户端连接到服务器端，发送“你好，服务器”，并接收服务器端回发的“你好，客户”再退出</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;你好，服务器&quot;</span>.getBytes());</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((readLen = inputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,readLen));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.服务器端接收到客户端发送的信息，输出，并发送“你好，客户”，再退出</span></span><br><span class="line">        socket.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><p>练习3：(使用字节流)</p><ol><li>编写一个服务端，和一个客户端</li><li>服务器端在9999端口监听</li><li>客户端连接到服务器端，发送“你好，服务器”，并接收服务器端回发的“你好，客户”再退出</li><li>服务器端接收到客户端发送的信息，输出，并发送“你好，客户”，再退出</li></ol><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/TCPMindTest3.jpg"></p><blockquote><p><strong>Client:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Internet.API.TCP_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP3Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//3.客户端连接到服务器端，发送“你好，服务器”，并接收服务器端回发的“你好，客户”再退出</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//使用字符流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello Server&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.服务器端接收到客户端发送的信息，输出，并发送“你好，客户”，再退出</span></span><br><span class="line">        socket.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Server:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Internet.API.TCP_3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP3Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//2.服务器端在9999端口监听</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nServer收到“你好，服务器”&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.客户端连接到服务器端，发送“你好，服务器”，并接收服务器端回发的“你好，客户”再退出</span></span><br><span class="line">        <span class="comment">//4.服务器端接收到客户端发送的信息，输出，并发送“你好，客户”，再退出</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;Hello Client&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line"></span><br><span class="line">        serverSocket.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2023/08/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/08/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p><mark>静态代理</mark>是一种设计模式，它可以在不修改原始类的情况下增强其功能。静态代理的好处有以下几点：</p><ul><li>它可以实现对目标对象的访问控制，比如说只有满足一定条件的用户才能调用目标对象的方法。</li><li>它可以实现对目标对象的功能扩展，比如说在目标对象的方法执行前后添加一些额外的逻辑，比如日志、缓存、事务等。</li><li>它可以实现对目标对象的解耦，比如说将目标对象和调用者分离，使得调用者不需要知道目标对象的具体实现细节。</li></ul><p><strong>例如：</strong></p><p>使用黄牛代理，帮我买演唱会门票</p><blockquote><p>Human.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread.StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lookConcert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Me.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread.StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Me</span> <span class="keyword">implements</span> <span class="title class_">Human</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookConcert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我看演唱会&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>HuangNiu.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread.StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuangNiu</span> <span class="keyword">implements</span> <span class="title class_">Human</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Me me;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄牛替我睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄牛替我吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookConcert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bug();</span><br><span class="line">        me.lookConcert();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bug</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄牛替我买演唱会门票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>test.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread.StaticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HuangNiu</span> <span class="variable">huangNiu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuangNiu</span>();</span><br><span class="line">        huangNiu.lookConcert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找（全）</title>
      <link href="/2023/08/08/%E6%9F%A5%E6%89%BE(%E5%85%A8)/"/>
      <url>/2023/08/08/%E6%9F%A5%E6%89%BE(%E5%85%A8)/</url>
      
        <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><strong>查找</strong>：在数据集合中寻找满足某种条件的数据元素的过程称为查找</li><li><strong>查找表(查找结构)</strong>：用于查找的数据集合称为查找表，它由同一类型的数据元素（或记录）组成</li><li><strong>关键字</strong>：数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的</li></ul><h3 id="查找表的常见操作"><a href="#查找表的常见操作" class="headerlink" title="查找表的常见操作"></a>查找表的常见操作</h3><ol><li>查找符合条件的数据元素(静态查找表)</li><li>插入、删除某个元素数据(动态查找表)</li></ol><h2 id="查找算法的效率评价"><a href="#查找算法的效率评价" class="headerlink" title="查找算法的效率评价"></a>查找算法的效率评价</h2><ul><li><p>查找长度：在查找运算中，需要对比关键字的次数称为查找长度</p></li><li><p>平均查找长度(ASL)：所有查找过程中进行关键字的比较次数的平均值<br>$$<br>ASL&#x3D;\sum_{i&#x3D;1}^nP_iC_i<br>$$<br>$$P_i$$：查找第i个元素的概率</p><p>$$C_i$$：查找第i个元素的查找长度</p></li></ul><blockquote><p>通常认为查找任何一个元素的概率都相同</p></blockquote><blockquote><p>评价一个查找算法的效率时，通常考虑查找成功&#x2F;查找失败两种情况的ASL</p></blockquote><h2 id="线性表的查找"><a href="#线性表的查找" class="headerlink" title="线性表的查找"></a>线性表的查找</h2><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><p>顺序查找，又叫”线性查找“，通常用于线性表</p><p>线性表：</p><ul><li>顺序表</li><li>链表</li></ul><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>思想：从头到尾挨个找</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>普通实现：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img//%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE1.png"></p><p>实现（哨兵）</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E5%93%A8%E5%85%B5%EF%BC%89.png"></p><h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><h4 id="顺序查找的优化-对有序表"><a href="#顺序查找的优化-对有序表" class="headerlink" title="顺序查找的优化(对有序表)"></a>顺序查找的优化(对有序表)</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%E7%9A%84%E4%BC%98%E5%8C%96.png"></p><h4 id="（被查概率不相等）"><a href="#（被查概率不相等）" class="headerlink" title="（被查概率不相等）"></a>（被查概率不相等）</h4><p>将被查概率大的放在靠前的位置</p><h4 id="用查找判定树分析ASL"><a href="#用查找判定树分析ASL" class="headerlink" title="用查找判定树分析ASL"></a>用查找判定树分析ASL</h4><blockquote><ul><li>一个成功节点的查找长度 &#x3D; 自身所在层数</li><li>一个失败节点的查找长度 &#x3D; 其父节点所在层数</li><li>默认情况下，各种失败情况或成功情况都等概率发生</li></ul></blockquote><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><h4 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h4><blockquote><p>折半查找，又称“二分查找”，仅适用于<font color="red">有序的顺序表</font></p></blockquote><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE2.png"></p><h4 id="查找判定树"><a href="#查找判定树" class="headerlink" title="查找判定树"></a>查找判定树</h4><p>根据数据构造判定树</p><blockquote><p>根据mid所指的元素与将原有元素分割到左右子树中</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%88%A4%E5%AE%9A%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%88%A4%E5%AE%9A%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A02.png"></p><ul><li>如果low和high之间有<mark>偶数</mark>个元素，则mid分隔后，<mark>左半部分比右半部分少一个元素</mark></li><li>如果当前low和high之间有<mark>奇数</mark>个元素，则mid分隔后，<mark>左右两部分元素个数相等</mark></li><li><mark>结论</mark>：折半查找的判定树中，若$$mid&#x3D;\lfloor(low+high)&#x2F;2\rfloor$$，则对于任何一个节点，必有<mark>右子树节点数-左子树节点数&#x3D;0或1</mark>——<font color="red">即：右子树的节点数总比左子树的节点数相等或多一个</font></li></ul><hr><p><strong>折半查找的<mark>判定树</mark>一定是<mark>平衡二叉树</mark></strong></p><p>折半查找的判定树中，<mark>只有最下面一层是不满的</mark>，因此，元素个数为<mark>n</mark>时，树高<mark>$h&#x3D;[log_2{(n+1)}]$</mark></p><hr><p><strong>判定树节点关键字：<mark>左&lt;中&lt;右</mark>，满足二叉树排序树的定义</strong></p><p><strong>当二叉树的节点有<mark>n</mark>个时，有<mark>失败节点n+1个</mark>（等于成功节点的空链域数量）</strong></p><h4 id="折半查找效率"><a href="#折半查找效率" class="headerlink" title="折半查找效率"></a>折半查找效率</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%9F%A5%E6%89%BE%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90.png"></p><p><mark><strong>时间复杂度&#x3D;$O(log_2{n})$</strong></mark></p><hr><blockquote><p><strong>问</strong>：折半查找时间复杂度&#x3D;$$O(log_2{n})$$，顺序查找的时间复杂度&#x3D;$$O(n)$$，那么折半查找的速度一定比顺序查找更快吗？</p><hr><p><strong>答</strong>：不是，在顺序查找中，当查找的元素是第一个元素时，顺序查找的速度</p></blockquote><hr><blockquote><p><strong>问</strong>：$$mid&#x3D;\lceil(low+high)&#x2F;2\rceil$$会出现什么情况？</p><hr><p><strong>答</strong>：左子树节点数-右子树节点数&#x3D;0或1</p></blockquote><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><p><strong>分块查找</strong>又称为<strong>索引顺序查找</strong>，是一种性能介于顺序查找和折半查找之间的查找方法。</p><p>在此查找方法中，除了本身以外，还需建立“索引表”。</p><p>索引表包含两个部分：<mark>关键字项（其值为改字表内的最大关键字）和指针项（指示该字表的第一个记录在表中的位置）</mark></p><p><strong>特点</strong>：<mark>块内无序、块间有序、</mark></p><hr><p><strong>代码</strong>：</p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE%E4%BB%A3%E7%A0%81.png" style="zoom:50%;" /><p><strong>过程</strong>：</p><ol><li>在索引表中确定待查记录所属的分块</li><li>在块内顺序查找</li></ol><h4 id="查找效率分析（ASL）"><a href="#查找效率分析（ASL）" class="headerlink" title="查找效率分析（ASL）"></a>查找效率分析（ASL）</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%9F%A5%E6%89%BE%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90%EF%BC%88%E5%88%86%E5%9D%97%EF%BC%89.png"></p><p>设索引查找和块内查找的平均查找长度分别为$$L_I$$、$$L_S$$，则分块超找的平均查找长度为<br>$$<br>ASL&#x3D;L_I+L_S<br>$$<br>用顺序查找查索引表，则$$L_I&#x3D;(1+2+…+b)&#x2F;b&#x3D;(b+1)&#x2F;2$$，$$L_S&#x3D;(1+2+…+s)&#x2F;s&#x3D;(s+1)&#x2F;2$$</p><p>当$$s&#x3D;\sqrt[]n$$时，$$ASL_{最小}&#x3D;\sqrt[]n+1$$</p><h2 id="数表的查找"><a href="#数表的查找" class="headerlink" title="数表的查找"></a>数表的查找</h2><h3 id="二叉排序树（BST）"><a href="#二叉排序树（BST）" class="headerlink" title="二叉排序树（BST）"></a>二叉排序树（BST）</h3><p><font color="red">二叉排序树</font>&gt;又称<em>二叉查找树</em></p><ol><li><p>二叉排序树的定义</p><p>二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：</p><ul><li>若它的左子树不空，则左子树上所有节点的的值均小于它的根节点的值；</li><li>若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值</li><li>它的左右子树也分别为二叉排序树</li></ul><blockquote><p><mark>左子树节点值&lt;根节点值&lt;右子树节点值</mark></p></blockquote></li><li><p>二叉排序树的查找</p><p>步骤：</p><ol><li>若二叉排序树为空，则查找失败，返回空指针</li><li>若二叉排序树非空，将给定值key与根节点的关键字<code>T-&gt;data.key</code>进行比较<ul><li>若key等于<code>T-&gt;data.key</code>，则查找成功，返回根节点的地址</li><li>若key小于<code>T-&gt;data.key</code>，则递归查找左子树</li><li>若key大于<code>T-&gt;data.key</code>，则递归查找右子树</li></ul></li></ol></li><li><p>二叉排序树的插入</p></li><li><p>二叉排序树的创建</p></li><li><p>二叉排序树的删除</p></li><li><p>查找效率分析</p></li></ol><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><ol><li><p>平衡二叉树的定义</p></li><li><p>平衡二叉树的平衡调整方法</p></li><li><p>平衡二叉树的插入</p></li></ol><h2 id="散列表的查找"><a href="#散列表的查找" class="headerlink" title="散列表的查找"></a>散列表的查找</h2><h3 id="散列表的基本概念"><a href="#散列表的基本概念" class="headerlink" title="散列表的基本概念"></a>散列表的基本概念</h3><p><mark>散列表(哈希表)</mark>，是一种数据结构，特点是：数据元素的<font color="red">关键字</font>与其<font color="red">存储地址</font>直接相关</p><blockquote><p>如何建立“关键字”与“存储地址”的联系？</p><blockquote><p>通过“散列函数(哈希函数)”：$$Add&#x3D;H(key)$$实现</p></blockquote></blockquote><ol><li>散列函数和散列地址：$$p&#x3D;H(key)$$，$$H$$为散列函数，$$p$$为散列地址</li><li>散列表：一个连续的地址空间，用以存储按散列函数计算得到相应散列地址的数据记录</li><li>冲突和同义词：$$key_1\not&#x3D;key_2$$，$$H(key_1)&#x3D;H(key_2)$$，这种现象称为冲突，$$key_1$$，$$key_2$$互为同义词</li></ol><h3 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h3><ol><li><p><strong>数字分析法</strong></p><blockquote><p>选取数码分布较为均匀的若干位作为散列地址</p></blockquote><p>设关键字是r进制数（如十进制数)，而r个数码在各位上出现的频率不一定相同，可能在某些位上分布均匀一些，每种数码出现的机会均等；而在某些位上分布不均匀，只有某几种数码经常出现，此时可选取数码分布较为均匀的若干位作为散列地址。</p><p>这种方法适合于已知的关键字集合，若更换了关键字，则需要重新构造新的散列函数。</p></li><li><p><strong>平方取中法</strong>：取关键字的平方值的<strong>中间几位</strong>作为散列地址</p><p>具体取多少位要视实际情况而定。这种方法得到的散列地址与关键字的每位都有关系，因此使得散列地址分布比较均匀，适用于关键字的每位取值都不够均匀或均小于散列地址所需的位数。</p></li><li><p><strong>折叠法</strong></p><p>将关键字分割成位数相同的几部分，然后取这几部分叠加和作为散列地址。根据数叠加的方式，可以把折叠法分为移位叠加、边界叠加。</p><p>$$key&#x3D;45387765213$$，表长为1000：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%8A%98%E5%8F%A0%E6%B3%95.jpg"></p></li><li><p><strong>除留余数法</strong><br>$$<br>H(key)&#x3D;key%p<br>$$<br>$$p$$为不大于表长$$m$$但最接近或等于$$m$$的最大<mark>质数</mark></p><blockquote><p>用质数取模，分布更均匀，冲突更少</p></blockquote></li><li><p><strong>直接定址法</strong><br>$$<br>H(key)&#x3D;key 或H(key)&#x3D;a*key+b<br>$$<br>其中，a和b是常数。这种方法计算最简单，且不会产生冲突。它适合关键字的分布基本连续的情况，若关键字分布不连续，空位较多，则会造成存储空间的浪费。</p></li></ol><h3 id="处理冲突的方法"><a href="#处理冲突的方法" class="headerlink" title="处理冲突的方法"></a>处理冲突的方法</h3><ol><li><p>开放地址法</p><p>所谓开放定址法，是指可存放新表项的空闲地址既向它的同义词表项开放，又向它的非同义词表项开放。其数学递推公式为:<br>$$<br>H_i&#x3D;(H(key)+d_i)%m,i&#x3D;1,2…,k(k&lt;&#x3D;m-1)<br>$$</p><p>$$m$$为散列表表长；$$d_i$$为增量序列</p><p>根据$$d$$的取值不同，可分为以下三种方法：</p><ol><li><p><strong>线性探测法</strong><br>$$<br>d_i&#x3D;1,2,3,…,m-1<br>$$<br>发生冲突时，每次往后探测相邻的下一个单元是否为空</p><blockquote><p>线性探测法很容易造成同义词、非同义词的“聚集(堆积)”现象，严重影响查找效率</p><blockquote><p>产生原因：冲突后再探测一定是放在某个连续的位置</p></blockquote></blockquote></li><li><p><strong>二次探测法</strong><br>$$<br>d_i&#x3D;1^2,-1^2,2^2,-2^2,3^2,…,k^2,-k^2(k&lt;&#x3D;m&#x2F;2)<br>$$</p></li><li><p><strong>伪随机探测法</strong><br>$$<br>d_i&#x3D;伪随机数序列<br>$$</p></li></ol></li><li><p>链地址法(拉链法)：把具有相同散列地址的记录放在同一个单链表中，称之为同义词单链表</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%8B%89%E9%93%BE%E6%B3%95.png"></p></li></ol><h3 id="散列表的查找-1"><a href="#散列表的查找-1" class="headerlink" title="散列表的查找"></a>散列表的查找</h3><p>$$<br>\alpha&#x3D;\frac{表中填入的记录值}{散列表的长度}<br>$$</p><p>$$\alpha$$：装填因子$$&#x3D;ASL_{失败}$$</p><p>装填因子表示的是散列表装填的满不满，越大，越空；越小，越满。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找（只含代码）</title>
      <link href="/2023/08/08/%E6%9F%A5%E6%89%BE(%E4%BB%A3%E7%A0%81)/"/>
      <url>/2023/08/08/%E6%9F%A5%E6%89%BE(%E4%BB%A3%E7%A0%81)/</url>
      
        <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="线性表的查找"><a href="#线性表的查找" class="headerlink" title="线性表的查找"></a>线性表的查找</h2><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><div class="tabs" id="顺序查找"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#顺序查找-1">顺序查找 1</button></li><li class="tab"><button type="button" data-href="#顺序查找-2">顺序查找 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="顺序查找-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SerchSqList</span><span class="params">(SqList &amp;L,<span class="type">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e == L.elem[i])&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;已找到元素&quot;</span>&lt;&lt;L.elem[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="顺序查找-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchSqList2</span><span class="params">(SqList &amp;L,<span class="type">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">L.elem[<span class="number">0</span>] = e;</span><br><span class="line"><span class="keyword">for</span>(i = L.length;L.elem[i] != e;--i)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;元素的位置为&quot;</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="折半查找-x2F-二分查找"><a href="#折半查找-x2F-二分查找" class="headerlink" title="折半查找&#x2F;二分查找"></a>折半查找&#x2F;二分查找</h3><blockquote><p><strong>注意：二分查找仅适用于有序递增或递减</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SearchBin</span><span class="params">(SqList &amp;L,<span class="type">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> low = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> high = L.length;</span><br><span class="line"><span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">mid = (low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(L.elem[mid] = e)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;找到元素&quot;</span>&lt;&lt;e&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e&lt;L.elem[mid])&#123;</span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><p>见：<a href="https://blog.czlifetime.eu.org/2023/08/08/%E6%9F%A5%E6%89%BE(%E5%85%A8)/index.html">查找(全)</a></p><h2 id="数表的查找"><a href="#数表的查找" class="headerlink" title="数表的查找"></a>数表的查找</h2><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BSTree <span class="title">SearchBST</span><span class="params">(BSTree T, KeyType key)</span> </span>&#123;</span><br><span class="line"><span class="comment">//在根指针T所指二叉排序树中递归地查找某关键字等于key的数据元素</span></span><br><span class="line"><span class="comment">//若查找成功，则返回指向该数据元素结点的指针，否则返回空指针</span></span><br><span class="line"><span class="keyword">if</span> ((!T) || key == T-&gt;data.key) <span class="keyword">return</span> T;<span class="comment">//查找结束</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;data.key) <span class="keyword">return</span> <span class="built_in">SearchBST</span>(T-&gt;lchild, key);<span class="comment">//在左子树中继续查找</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">SearchBST</span>(T-&gt;rchild, key);<span class="comment">//在右子树中继续查找</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="散列表的查找"><a href="#散列表的查找" class="headerlink" title="散列表的查找"></a>散列表的查找</h2><h3 id="散列表的基本概念"><a href="#散列表的基本概念" class="headerlink" title="散列表的基本概念"></a>散列表的基本概念</h3><p><mark>散列表(哈希表)</mark>，是一种数据结构，特点是：数据元素的<font color="red">关键字</font>与其<font color="red">存储地址</font>直接相关</p><blockquote><p>如何建立“关键字”与“存储地址”的联系？</p><blockquote><p>通过“散列函数(哈希函数)”：$$Add&#x3D;H(key)$$实现</p></blockquote></blockquote><ol><li>散列函数和散列地址：$$p&#x3D;H(key)$$，$$H$$为散列函数，$$p$$为散列地址</li><li>散列表：一个连续的地址空间，用以存储按散列函数计算得到相应散列地址的数据记录</li><li>冲突和同义词：$$key_1\not&#x3D;key_2$$，$$H(key_1)&#x3D;H(key_2)$$，这种现象称为冲突，$$key_1$$，$$key_2$$互为同义词</li></ol><h3 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h3><ol><li><p><strong>数字分析法</strong></p><blockquote><p>选取数码分布较为均匀的若干位作为散列地址</p></blockquote><p>设关键字是r进制数（如十进制数)，而r个数码在各位上出现的频率不一定相同，可能在某些位上分布均匀一些，每种数码出现的机会均等；而在某些位上分布不均匀，只有某几种数码经常出现，此时可选取数码分布较为均匀的若干位作为散列地址。</p><p>这种方法适合于已知的关键字集合，若更换了关键字，则需要重新构造新的散列函数。</p></li><li><p><strong>平方取中法</strong>：取关键字的平方值的<strong>中间几位</strong>作为散列地址</p><p>具体取多少位要视实际情况而定。这种方法得到的散列地址与关键字的每位都有关系，因此使得散列地址分布比较均匀，适用于关键字的每位取值都不够均匀或均小于散列地址所需的位数。</p></li><li><p><strong>折叠法</strong></p><p>将关键字分割成位数相同的几部分，然后取这几部分叠加和作为散列地址。根据数叠加的方式，可以把折叠法分为移位叠加、边界叠加。</p><p>$$key&#x3D;45387765213$$，表长为1000：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%8A%98%E5%8F%A0%E6%B3%95.jpg"></p></li><li><p><strong>除留余数法</strong><br>$$<br>H(key)&#x3D;key%p<br>$$<br>$$p$$为不大于表长$$m$$但最接近或等于$$m$$的最大<mark>质数</mark></p><blockquote><p>用质数取模，分布更均匀，冲突更少</p></blockquote></li><li><p><strong>直接定址法</strong><br>$$<br>H(key)&#x3D;key 或H(key)&#x3D;a*key+b<br>$$<br>其中，a和b是常数。这种方法计算最简单，且不会产生冲突。它适合关键字的分布基本连续的情况，若关键字分布不连续，空位较多，则会造成存储空间的浪费。</p></li></ol><h3 id="处理冲突的方法"><a href="#处理冲突的方法" class="headerlink" title="处理冲突的方法"></a>处理冲突的方法</h3><ol><li><p>开放地址法</p><p>所谓开放定址法，是指可存放新表项的空闲地址既向它的同义词表项开放，又向它的非同义词表项开放。其数学递推公式为:<br>$$<br>H_i&#x3D;(H(key)+d_i)%m,i&#x3D;1,2…,k(k&lt;&#x3D;m-1)<br>$$</p><p>$$m$$为散列表表长；$$d_i$$为增量序列</p><p>根据$$d$$的取值不同，可分为以下三种方法：</p><ol><li><p><strong>线性探测法</strong><br>$$<br>d_i&#x3D;1,2,3,…,m-1<br>$$<br>发生冲突时，每次往后探测相邻的下一个单元是否为空</p><blockquote><p>线性探测法很容易造成同义词、非同义词的“聚集(堆积)”现象，严重影响查找效率</p><blockquote><p>产生原因：冲突后再探测一定是放在某个连续的位置</p></blockquote></blockquote></li><li><p><strong>二次探测法</strong><br>$$<br>d_i&#x3D;1^2,-1^2,2^2,-2^2,3^2,…,k^2,-k^2(k&lt;&#x3D;m&#x2F;2)<br>$$</p></li><li><p><strong>伪随机探测法</strong><br>$$<br>d_i&#x3D;伪随机数序列<br>$$</p></li></ol></li><li><p>链地址法(拉链法)：把具有相同散列地址的记录放在同一个单链表中，称之为同义词单链表</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%8B%89%E9%93%BE%E6%B3%95.png"></p></li></ol><h3 id="散列表的查找-1"><a href="#散列表的查找-1" class="headerlink" title="散列表的查找"></a>散列表的查找</h3><p>$$<br>\alpha&#x3D;\frac{表中填入的记录值}{散列表的长度}<br>$$</p><p>$$\alpha$$：装填因子$$&#x3D;ASL_{失败}$$</p><p>装填因子表示的是散列表装填的满不满，越大，越空；越小，越满。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象编程</title>
      <link href="/2023/07/31/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/07/31/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h3><ul><li>方法是程序中最小的执行单元</li><li>方法的定义：把一些代码打包在一起</li></ul><h3 id="方法的格式"><a href="#方法的格式" class="headerlink" title="方法的格式"></a>方法的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名（参数）&#123;</span><br><span class="line">    方法体</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ul><li>在同一个类中，定义多个同名的方法</li><li>每个方法都有不同的参数类型或参数个数，同名的方法之间就构成了重载关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rus</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rus</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的内存"><a href="#方法的内存" class="headerlink" title="方法的内存"></a>方法的内存</h3><h5 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="Java内存分配"></a>Java内存分配</h5><ol><li>栈</li></ol><ul><li>方法运行时使用的内存，方法进栈运行，运行完毕出栈（先进后出）</li><li>变量</li></ul><ol start="2"><li>堆</li></ol><ul><li>new出来，并产生地址</li></ul><ol start="3"><li>方法区：字节码文件加载是进入的内存</li><li>本地方法栈</li><li>寄存器</li></ol><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h2 id="1-构造方法有什么作用？"><a href="#1-构造方法有什么作用？" class="headerlink" title="1.构造方法有什么作用？"></a>1.构造方法有什么作用？</h2><p>构造方法是一个比较特殊的方法，通过构造方法可以<code>完成对象的创建，以及实例变量的初始化</code>。<br>换句话说：构造方法是用来<code>创建对象，并且同时给对象的属性赋值</code>。<br><strong>注意</strong>：实例变量没有手动赋值的时候，系统会赋默认值。</p><h2 id="2-构造方法怎么定义，语法是什么？"><a href="#2-构造方法怎么定义，语法是什么？" class="headerlink" title="2.构造方法怎么定义，语法是什么？"></a>2.构造方法怎么定义，语法是什么？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] 构造方法名(形式参数列表)&#123;</span><br><span class="line">构造方法体;</span><br><span class="line">通常在构造方法体当中给属性赋值，完成属性的初始化。</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>第一：修饰符列表目前统一写：<code>public</code>。千万不要写public static。</li><li>第二：构造方法名和<code>类名</code>必须<code>一致</code>。</li><li>第三：构造方法<code>不需要</code>指定<code>返回值类型</code>，也不能写void，写上void表示普通方法，就不是构造方法了。</li></ol><p>普通方法的语法结构是？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] 返回值类型 方法名(形式参数列表)&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-构造方法怎么调用，使用哪个运算符？"><a href="#3-构造方法怎么调用，使用哪个运算符？" class="headerlink" title="3.构造方法怎么调用，使用哪个运算符？"></a>3.构造方法怎么调用，使用哪个运算符？</h2><p>使用<code>new</code>运算符来调用构造方法。</p><h2 id="标准的JavaBean类"><a href="#标准的JavaBean类" class="headerlink" title="标准的JavaBean类"></a>标准的JavaBean类</h2><ol><li><p>类名需要见名知意</p></li><li><p>成员变量使用private修饰</p></li><li><p>提供至少两个构造方法</p><ul><li>无参构造方法</li><li>带全部参数的构造方法</li></ul></li><li><p>成员方法</p><ul><li>提供每一个成员变量对应的<code>setXxx()/getXxx()</code></li><li>如果还有其他行为，也需要写上</li></ul></li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="String概述"><a href="#String概述" class="headerlink" title="String概述"></a>String概述</h3><p><code>java.lang.String</code>类代表字符串，Java程序中所有的字符串文字都为此类</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>字符串的内容是不会发生改变的，他的对象在创建后不能被改变</p><h3 id="创建String对象的两种方式"><a href="#创建String对象的两种方式" class="headerlink" title="创建String对象的两种方式"></a>创建String对象的两种方式</h3><ol><li><p>直接赋值</p></li><li><p>通过new关键字，使用不同的构造方法</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public String ()</td><td>创建空白字符串，不含任何内容</td></tr><tr><td>public String(String original)</td><td>根据传入的字符串，创建字符串对象</td></tr><tr><td>public String(char[] chs)</td><td>根据字符数组，创建字符串对象</td></tr><tr><td>public String (byte[] chs)</td><td>根据字节数组，创建字符串对象</td></tr></tbody></table></li><li><p>字符串赋值</p><p>当双引号直接赋值时，系统会检查该字符串在串池中是否存在</p><ul><li>不存在：创建新的</li><li>存在：复用</li></ul></li></ol><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><ol><li><p>比的到底是啥</p><ul><li>基本数据类型-&gt;数据值</li><li>引用数据类型-&gt;地址值</li></ul></li><li><p>比较方法</p><ul><li><p><code>boolen equal(要比较的字符串)</code>完全一样结果才是true，否则为false</p></li><li><p><code>boolen equalslgnoreCase(要比较的字符串)</code>忽略大小写的比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StingText</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rus1</span> <span class="operator">=</span> s1.equals(s);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rus2</span> <span class="operator">=</span> s1.equalsIgnoreCase(s);</span><br><span class="line">        System.out.print(rus1 + <span class="string">&quot; &quot;</span>+ rus2);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：true true</p></li><li><p>如果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StingText</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sc.next();<span class="comment">//.next()的核心是new出来的</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span>  <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.print(str1 == str2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>请输入一个字符串：abc false 进程已结束,退出代码0</code></p></li></ul></li></ol><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>是一个容器，创建后里面的内容可变</p><ul><li>作用：提高字符串的操作效率</li></ul><h4 id="StringBuilder构造方法"><a href="#StringBuilder构造方法" class="headerlink" title="StringBuilder构造方法"></a>StringBuilder构造方法</h4><ul><li><p><code>public StringBuilder append () </code>     添加数据并返回数据本身</p></li><li><p><code>public StringBuilder reverse()</code>     翻转容器中的内容</p></li><li><p><code>public int length()</code>           返回长度</p></li><li><p><code>public String toString()</code>通过toString就可以实现把StringBuilder转换成String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderText</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建对象</span></span><br><span class="line">         <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//2.添加元素</span></span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.翻转</span></span><br><span class="line">        sb.reverse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.长度</span></span><br><span class="line">        sb.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.将StringBuilder变成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><p>当在调用一个方法时，不需要用变量接受他的结果，可以调用其他方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianshibiancheng</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> getString();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> getString().length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a><code>StringJoiner</code></h3><p>##Static</p><ul><li><p>表示静态，是Java中的一个修饰符，可以修饰成员方法，成员变量</p></li><li><p>被static修饰的成员变量(静态变量)</p><ol><li><p>特点：</p><ul><li>被该类所有对象共享</li></ul></li><li><p>调用方式：</p><ul><li>类名调用</li><li>对象名调用</li></ul></li></ol></li><li><p>被static修饰的成员方法(静态方法)</p><ol><li><p>特点：</p><ul><li>多用在测试类，工具类中(注：测试类：用来检查其他的类是否书写正确，带有main方法的类，是程序的入口。工具类：不是用来描述一类事物的，而是帮助我们做一些事情的类。)</li><li>JavaBean类中很少</li></ul></li><li><p>调用方式：</p><ul><li>类名调用</li><li>对象名调用</li></ul></li></ol></li><li><p>注意事项：</p><ul><li>静态方法只能访问静态变量和静态方法</li><li>非静态方法可以访问所有</li><li>静态方法中没用this关键字</li></ul></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>Java中提供一个关键字extends</p><p><code>public class Student extends person&#123;&#125;</code></p></li><li><p>好处：</p><ol><li>可以把多个子类中重复的代码抽取到父类中，提高代码的复用性</li><li>子类可以在父类的基础上，增加其他的功能，使子类更强大</li></ol></li><li><p>特点：支持单继承，不支持多继承，但支持多层继承（每一个类都直接或间接的继承于Object）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%AD%90%E7%B1%BB%E7%BB%A7%E6%89%BF%E7%88%B6%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9.png"></p><ul><li><p>父类的构造方法不能被子类继承</p></li><li><p>成员变量：private要有对应的set与get方法</p></li><li><p>只用父类中的虚方法表才能被子类继承</p></li></ul><h3 id="成员变量的访问特点"><a href="#成员变量的访问特点" class="headerlink" title="成员变量的访问特点"></a>成员变量的访问特点</h3><ol><li>就近原则：谁离我近，我就用谁</li><li>如果出现重名：<ul><li><code>name</code>从局部位置开始找</li><li><code>this.name</code>从本类成员位置开始往上</li><li><code>super.name</code>从父类成员位置开始往上</li></ul></li></ol><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><ul><li>当父类中的方法不能满足子类现在的需求时，需要进行方法重写（子类中的成员方法与父类中的成员方法名一样时）</li><li>要写上<code>@Override</code>重写注解,检验子类重写时语法是否正确</li></ul><h3 id="方法重写的本质"><a href="#方法重写的本质" class="headerlink" title="方法重写的本质"></a>方法重写的本质</h3><ul><li>将传递中虚方法表中的父类中的方法进行覆盖</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>重写方法的名称、形参列表必须与父类中的一致。</p></li><li><p>子类重写父类方法时，访问权限子类必须大于等于父类（暂时了解∶空着不写&lt;protected &lt; public</p></li><li><p>子类重写父类方法时，返回值类型子类必须小于等于父类</p></li><li><p>建议:重写的方法尽量和父类保持一致。</p></li><li><p>只有被添加到虚方法表中的方法才能被重写</p></li></ol><h3 id="继承中，构造方法的访问特点"><a href="#继承中，构造方法的访问特点" class="headerlink" title="继承中，构造方法的访问特点"></a>继承中，构造方法的访问特点</h3><ul><li>父类中的构造方法不会被子类继承</li><li>子类中所有的构造方法默认先访问父类中的无参构造，在执行自己</li><li>调用方式：super()</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>同类型的对象，表现出的不同形态</li></ul><ol><li><p>多态的表现形式：<code>父类类型 对象名称 = 子类对象</code></p></li><li><p>多态的前提</p><ul><li>有继承关系</li><li>有父类引用指向子类对象</li><li>有方法重写</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.polymorphism;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name&quot;</span> + name +<span class="string">&quot;age&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.polymorphism;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的信息为：&quot;</span> + getName() + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package CS408.polymorphism;</span><br><span class="line"></span><br><span class="line">public class Teacher extends Person&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void Show()&#123;</span><br><span class="line">        System.out.println(&quot;老师的信息为：&quot; + getName() + getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package CS408.polymorphism;</span><br><span class="line"></span><br><span class="line">public class Administrator extends Person&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void Show()&#123;</span><br><span class="line">        System.out.println(&quot;管理员的信息为：&quot; + getName() + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package CS408.polymorphism;</span><br><span class="line"></span><br><span class="line">public class Text &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Student s = new Student();</span><br><span class="line">        Teacher t = new Teacher();</span><br><span class="line">        Administrator a = new Administrator();</span><br><span class="line">        s.setAge(19);</span><br><span class="line">        s.setName(&quot;张三&quot;);</span><br><span class="line">        t.setAge(29);</span><br><span class="line">        t.setName(&quot;李老师&quot;);</span><br><span class="line">        a.setAge(39);</span><br><span class="line">        a.setName(&quot;李管理&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        register(s);</span><br><span class="line">        register(t);</span><br><span class="line">        register(a);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void register(Person P)&#123;</span><br><span class="line">        P.Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态调用成员的特点"><a href="#多态调用成员的特点" class="headerlink" title="多态调用成员的特点"></a>多态调用成员的特点</h3><ul><li>调用成员变量：编译看左边，运行看左边</li><li>调用成员方法：编译看左边，运行看右边</li></ul><h3 id="多态的优势"><a href="#多态的优势" class="headerlink" title="多态的优势"></a>多态的优势</h3><ul><li>在多态的形式下，右边的对象可以实现解耦合，便于拓展和维护</li><li>定义方法的时候，使用父类型作为菜蔬，可以接受所有子类对象，体现多态的拓展性与遍历</li></ul><h3 id="多态的弊端"><a href="#多态的弊端" class="headerlink" title="多态的弊端"></a>多态的弊端</h3><ul><li><p>不能调用子类特有的功能</p></li><li><p>解决方法:变回子类类型</p><p><code>Dog d = (Dog) a;</code></p></li></ul><h3 id="弊端的解决方法"><a href="#弊端的解决方法" class="headerlink" title="弊端的解决方法"></a>弊端的解决方法</h3><ul><li>自动类型转换</li><li>强制类型转换<ul><li>可以转换成真正的子类类型，从而调用子类独有的功能</li><li>转换类型与真实对象类型不一致会报错</li><li>转换时用<code>instanceof</code>关键字进行判断</li></ul></li></ul><p>多态的综合练习: <a href="https://www.bilibili.com/video/BV17F411T7Ao?t=17.7&p=132">https://www.bilibili.com/video/BV17F411T7Ao?t=17.7&amp;p=132</a></p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li>方法：表明该方法是最终方法，不能被重写</li><li>类：表明该类是最终类，不能被继承</li><li>变量：常量，只能被赋值一次<ul><li>修改基本数据类型：记录的值不能发生改变</li><li>修改引用数据类型：记录的地址值不能发生改变，内部的属性值还是可以改变的</li></ul></li></ul><p>final练习：<a href="https://www.bilibili.com/video/BV17F411T7Ao?t=2216.7&p=133%E5%8F%8A%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">https://www.bilibili.com/video/BV17F411T7Ao?t=2216.7&amp;p=133及学生管理系统</a></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li>局部代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">punlic <span class="keyword">class</span> <span class="title class_">Text</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">            System.out.print(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：提前结束变量的生命周期</p><ul><li>构造代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始创建对象了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span> <span class="params">(String name ,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>构造代码块：写在成员位置的代码块</li><li>作用：可以把多个构造方法中重复的代码抽取出来</li><li>执行时机：先执行构造代码块再执行构造方法</li></ol><ul><li>静态代码块<ol><li>格式:<code>static&#123;&#125;</code></li><li>特点：需要通过static关键字修饰，随着累的加载而加载，并且自动触发，只执行一次</li><li>使用场景：在类的加载中，做数据的初始化使用</li></ol></li></ul><p><a href="https://www.bilibili.com/video/BV17F411T7Ao?t=1866.9&p=134%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">https://www.bilibili.com/video/BV17F411T7Ao?t=1866.9&amp;p=134学生管理系统</a></p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>作用：抽取共性时，无法确定方法体，就把方法定义为抽象的。强制让子类按照某种格式重写。抽象方法所在的类，必须是抽象类。</li><li>抽象方法：将共性的行为抽取到父类之后。将共性的行为(方法）抽取到父类之后。由于每一个子类执行的内容是不一样,所以，在父类中不能确定具体的方法体。该方法就可以定义为抽象方法。</li><li>抽象类：如果一个类中存在抽象方法，那么该类就必须声明为抽象类</li></ul><p>###定义格式</p><ul><li>抽象方法：<code>public abstract 返回值类型 方法名（参数列表）； </code></li><li>抽象类：<code>public abstract class 类名&#123;&#125;</code></li></ul><p>###抽象类和抽象方法注意事项</p><ul><li>抽象类不能创建对象</li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>抽象类可以有构造方法</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>是一种规则，是对行为的抽象</li></ul><h3 id="如何定义一个接口"><a href="#如何定义一个接口" class="headerlink" title="如何定义一个接口"></a>如何定义一个接口</h3><ul><li><p><code>public interface 接口名&#123;&#125;</code></p></li><li><p>不能实例化-&gt;不能new</p></li><li><p>接口与类是实现关系，通过implements关键字表示</p><ul><li><p>接口与类是实现关系，可以单实现，也可以多实现</p><p><code>public class 类名 implements 接口名1，接口名2&#123;&#125;</code></p></li><li><p>实现类可以继承一个类的同时实现多个接口</p><p><code>public class 类名extends implement 接口名1，接口名2&#123;&#125;</code></p></li></ul></li><li><p>接口的子类（实现类）</p><ul><li>要么重写接口中的所用抽象方法，要么是抽象类</li></ul></li></ul><h3 id="如何使用一个接口"><a href="#如何使用一个接口" class="headerlink" title="如何使用一个接口"></a>如何使用一个接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.InterfaceText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">animal</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.InterfaceText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.InterfaceText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rabbit</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rabbit</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;兔子在吃胡萝卜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.InterfaceText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">animal</span> <span class="keyword">implements</span> <span class="title class_">swim</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗在吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗在狗刨&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.InterfaceText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Frog</span> <span class="keyword">extends</span> <span class="title class_">animal</span> <span class="keyword">implements</span> <span class="title class_">swim</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Frog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Frog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;青蛙在吃虫子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;青蛙在蛙泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.InterfaceText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Frog</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frog</span>(<span class="string">&quot;呱呱&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(f.getAge()+ <span class="string">&quot;,&quot;</span> + f.getName());</span><br><span class="line">        f.eat();</span><br><span class="line">        f.swim();</span><br><span class="line"></span><br><span class="line">        <span class="type">Rabbit</span> <span class="variable">ra</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rabbit</span>(<span class="string">&quot;小白&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(ra.getAge()+ <span class="string">&quot;,&quot;</span> + ra.getName());</span><br><span class="line">        ra.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,呱呱</span><br><span class="line">青蛙在吃虫子</span><br><span class="line">青蛙在蛙泳</span><br><span class="line"><span class="number">3</span>,小白</span><br><span class="line">兔子在吃胡萝卜</span><br></pre></td></tr></table></figure><h3 id="接口中成员的特点"><a href="#接口中成员的特点" class="headerlink" title="接口中成员的特点"></a>接口中成员的特点</h3><ul><li><p>成员变量</p><ul><li>只能是常量</li><li>默认修饰符：<code>public static final</code></li></ul></li><li><p>构造方法</p><ul><li>没有</li></ul></li><li><p>成员方法</p><ul><li>只是抽象方法</li></ul></li></ul><h3 id="接口和类之间的关系"><a href="#接口和类之间的关系" class="headerlink" title="接口和类之间的关系"></a>接口和类之间的关系</h3><ul><li>类与接口的关系<ul><li>继承关系，只能单继承，不能多继承，但是可以多层继承</li></ul></li><li>接口与类的关系</li><li>接口与接口的关系<ul><li>继承关系，可以单继承，也可以多继承<ul><li>如果实现类实现了最下面的字接口，就需要重写所有的抽象方法</li></ul></li></ul></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li><p>编写带有接口和抽象类的标准<code>Javabean</code>类</p></li><li><p>我们现在有乒乓球运动员和篮球运动员，乒乓球教练和篮球教练。为了出国交流，跟乒乓球相关的人员都需要学习英语。<br>请用所有知识分析，在这个案例中，哪些是具体类，哪些是抽象类，哪些是接口?</p></li><li><p>乒乓球运动员:姓名，年龄，学打乒乓球，说英语<br>篮球运动员:姓名，年龄，学打篮球<br>乒乓球教练:姓名，年龄，教打乒乓球，说英语</p><p>篮球教练:姓名，年龄，教打篮球</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1Text%E6%80%9D%E8%B7%AF1.png"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1Text%E6%80%9D%E8%B7%AF2.png"></p><ul><li><pre><code class="java">package CS408.OopText;public class Person &#123;    private String name;    private int age;    public Person() &#123;    &#125;    public Person(String name, int age) &#123;        this.name = name;        this.age = age;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ ```java</span><br><span class="line">  package CS408.OopText;</span><br><span class="line">  </span><br><span class="line">  public abstract class Athlete extends Person &#123;</span><br><span class="line">      public Athlete() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      public Athlete(String name,int age) &#123;</span><br><span class="line">          super(name,age);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public abstract void study();</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">package CS408.OopText;public abstract class Coach extends Person&#123;    public Coach() &#123;    &#125;    public Coach(String name, int age) &#123;        super(name, age);    &#125;    public abstract void teach();&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ ```java</span><br><span class="line">  package CS408.OopText;</span><br><span class="line">  </span><br><span class="line">  public class PingpangAthlete extends Athlete implements English&#123;</span><br><span class="line">      public PingpangAthlete() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public PingpangAthlete(String name, int age) &#123;</span><br><span class="line">          super(name, age);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public void study()&#123;</span><br><span class="line">          System.out.println(&quot;乒乓球运动员学打乒乓球&quot;);</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">      @Override</span><br><span class="line">      public void english()&#123;</span><br><span class="line">          System.out.println(&quot;乒乓球运动员学英语&quot;);</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">package CS408.OopText;public class BasketballAthlete extends Athlete&#123;    public BasketballAthlete() &#123;    &#125;    public BasketballAthlete(String name, int age) &#123;        super(name, age);    &#125;    public void study()&#123;        System.out.println(&quot;篮球运动员在学打篮球&quot;);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ ```java</span><br><span class="line">  package CS408.OopText;</span><br><span class="line">  </span><br><span class="line">  public class BasketballCoach extends Coach&#123;</span><br><span class="line">      public BasketballCoach() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public BasketballCoach(String name, int age) &#123;</span><br><span class="line">          super(name, age);</span><br><span class="line">      &#125;</span><br><span class="line">      public void teach()&#123;</span><br><span class="line">          System.out.println(&quot;篮球教练在教打篮球&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">package CS408.OopText;public interface English &#123;    public abstract void english();&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ ```java</span><br><span class="line">  package CS408.OopText;</span><br><span class="line">  </span><br><span class="line">  public class Text &#123;</span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">          PingpangAthlete ppa = new PingpangAthlete(&quot;小花&quot;,20);</span><br><span class="line">          ppa.study();</span><br><span class="line">          ppa.english();</span><br><span class="line">  </span><br><span class="line">          BasketballAthlete ba = new BasketballAthlete(&quot;姚明&quot;, 24);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="其他接口方法"><a href="#其他接口方法" class="headerlink" title="其他接口方法"></a>其他接口方法</h3><p><a href="https://www.bilibili.com/video/BV17F411T7Ao?p=139">https://www.bilibili.com/video/BV17F411T7Ao?p=139</a></p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>在类的里面再定义一个类，这个类教内部类</li><li>内部类的访问特点<ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员必须创建对象</li></ul></li></ul><h3 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h3><ul><li>成员内部类<ul><li>写在成员位置，属于外部类成员</li></ul></li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类<ul><li>本质：隐藏了名字的内部类<ul><li>格式：<code>new 类名或者接口名（）&#123;重写方法&#125;</code></li></ul></li><li>包含三个关系：继承\实现，方法重写，创建对象</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++模板</title>
      <link href="/2023/07/31/C++%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/07/31/C++%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="模板的概念"><a href="#模板的概念" class="headerlink" title="模板的概念"></a>模板的概念</h2><p>模板就是建立<strong>通用的模具</strong>，大大<b>提高复用性</b></p><p>模板的特点：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><ul><li><p>C++另一种编程思想称为 <mark>泛型编程</mark> ，主要利用的技术就是模板</p></li><li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h3 id="函数模板语法"><a href="#函数模板语法" class="headerlink" title="函数模板语法"></a>函数模板语法</h3><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个</strong>虚拟的类型</strong>来代表。</p><p></strong>语法：</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">函数声明或定义</span><br></pre></td></tr></table></figure><p></strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p></strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换整型函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapInt</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换浮点型函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapDouble</span><span class="params">(<span class="type">double</span>&amp; a, <span class="type">double</span>&amp; b)</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用模板提供通用的交换函数</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//swapInt(a, b);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用模板实现交换</span></span><br><span class="line"><span class="comment">//1、自动类型推导</span></span><br><span class="line"><span class="built_in">mySwap</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、显示指定类型</span></span><br><span class="line"><span class="built_in">mySwap</span>&lt;<span class="type">int</span>&gt;(a, b);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>函数模板利用关键字 template</li><li>使用函数模板有两种方式：<mark>自动类型推导</mark>、<mark>显示指定类型</mark></li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><h3 id="函数模板注意事项"><a href="#函数模板注意事项" class="headerlink" title="函数模板注意事项"></a>函数模板注意事项</h3><p>注意事项：</p><ul><li><p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p></li><li><p>模板必须要确定出T的数据类型，才可以使用</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用模板提供通用的交换函数</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mySwap</span>(a, b); <span class="comment">// 正确，可以推导出一致的T</span></span><br><span class="line"><span class="comment">//mySwap(a, c); // 错误，推导不出一致的T类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、模板必须要确定出T的数据类型，才可以使用</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//func(); //错误，模板不能独立使用，必须确定出T的类型</span></span><br><span class="line"><span class="built_in">func</span>&lt;<span class="type">int</span>&gt;(); <span class="comment">//利用显示指定类型的方式，给T一个类型，才可以使用该模板</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li></ul><h3 id="函数模板案例"><a href="#函数模板案例" class="headerlink" title="函数模板案例"></a>函数模板案例</h3><p>案例描述：</p><ul><li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li><li>排序规则从大到小，排序算法为<strong>选择排序</strong></li><li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换的函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T &amp;a, T&amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="comment">// 也可以替换成typename</span></span><br><span class="line"><span class="comment">//利用选择排序，进行对数组从大到小的排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySort</span><span class="params">(T arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> max = i; <span class="comment">//最大数的下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[max] &lt; arr[j])</span><br><span class="line">&#123;</span><br><span class="line">max = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (max != i) <span class="comment">//如果最大数的下标不是i，交换两者</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">mySwap</span>(arr[max], arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(T arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//测试char数组</span></span><br><span class="line"><span class="type">char</span> charArr[] = <span class="string">&quot;bdcfeagh&quot;</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="built_in">sizeof</span>(charArr) / <span class="built_in">sizeof</span>(<span class="type">char</span>);</span><br><span class="line"><span class="built_in">mySort</span>(charArr, num);</span><br><span class="line"><span class="built_in">printArray</span>(charArr, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//测试int数组</span></span><br><span class="line"><span class="type">int</span> intArr[] = &#123; <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="type">int</span> num = <span class="built_in">sizeof</span>(intArr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="built_in">mySort</span>(intArr, num);</span><br><span class="line"><span class="built_in">printArray</span>(intArr, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：模板可以提高代码复用，需要熟练掌握</p><h3 id="普通函数与函数模板的区别"><a href="#普通函数与函数模板的区别" class="headerlink" title="普通函数与函数模板的区别"></a>普通函数与函数模板的区别</h3><p><strong>普通函数与函数模板区别：</strong></p><ul><li><mark>普通函数调用时可以发生自动类型转换（隐式类型转换）</mark></li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myAdd01</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">myAdd02</span><span class="params">(T a, T b)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">myAdd01</span>(a, c) &lt;&lt; endl; <span class="comment">//正确，将char类型的&#x27;c&#x27;隐式转换为int类型  &#x27;c&#x27; 对应 ASCII码 99</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">myAdd02</span>&lt;<span class="type">int</span>&gt;(a, c); <span class="comment">//正确，如果用显示指定类型，可以发生隐式类型转换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p><h3 id="普通函数与函数模板的调用规则"><a href="#普通函数与函数模板的调用规则" class="headerlink" title="普通函数与函数模板的调用规则"></a>普通函数与函数模板的调用规则</h3><p>调用规则如下：</p><ol><li><mark>如果函数模板和普通函数都可以实现，优先调用普通函数</mark></li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li><mark>如果函数模板可以产生更好的匹配,优先调用函数模板</mark></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数与函数模板调用规则</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;调用的普通函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(T a, T b)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;调用的模板&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(T a, T b, T c)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;调用重载的模板&quot;</span> &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、如果函数模板和普通函数都可以实现，优先调用普通函数</span></span><br><span class="line"><span class="comment">// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">myPrint</span>(a, b); <span class="comment">//调用普通函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、可以通过空模板参数列表来强制调用函数模板</span></span><br><span class="line">myPrint&lt;&gt;(a, b); <span class="comment">//调用函数模板</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、函数模板也可以发生重载</span></span><br><span class="line"><span class="type">int</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">myPrint</span>(a, b, c); <span class="comment">//调用重载的函数模板</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、 如果函数模板可以产生更好的匹配,优先调用函数模板</span></span><br><span class="line"><span class="type">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> c2 = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="built_in">myPrint</span>(c1, c2); <span class="comment">//调用函数模板</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<strong>既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</strong></p><h3 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h3><p><strong>局限性：</strong></p><ul><li>模板的通用性并不是万能的</li></ul><p><strong>例如：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   a = b;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p><p>再例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="keyword">if</span>(a &gt; b) &#123; ... &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p><p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myCompare</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型</span></span><br><span class="line"><span class="comment">//具体化优先于常规模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="function"><span class="type">bool</span> <span class="title">myCompare</span><span class="params">(Person &amp;p1, Person &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//内置数据类型可以直接使用通用的函数模板</span></span><br><span class="line"><span class="type">bool</span> ret = <span class="built_in">myCompare</span>(a, b);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a == b &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a != b &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//自定义数据类型，不会调用普通的函数模板</span></span><br><span class="line"><span class="comment">//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</span></span><br><span class="line"><span class="type">bool</span> ret = <span class="built_in">myCompare</span>(p1, p2);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1 == p2 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1 != p2 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><h3 id="类模板语法"><a href="#类模板语法" class="headerlink" title="类模板语法"></a>类模板语法</h3><p>类模板作用：</p><ul><li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li></ul><p><strong>语法：</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">类</span><br></pre></td></tr></table></figure><p></strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p></strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType mName;</span><br><span class="line">AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 指定NameType 为string类型，AgeType 为 int类型</span></span><br><span class="line">Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">P1</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">999</span>);</span><br><span class="line">P1.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p><h3 id="类模板与函数模板区别"><a href="#类模板与函数模板区别" class="headerlink" title="类模板与函数模板区别"></a>类模板与函数模板区别</h3><p>类模板与函数模板区别主要有两点：</p><ol><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span> = <span class="type">int</span>&gt; </span><br><span class="line"><span class="keyword">class</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mName &lt;&lt; <span class="string">&quot; age: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">NameType mName;</span><br><span class="line">AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、类模板没有自动类型推导的使用方式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Person p(&quot;孙悟空&quot;, 1000); // 错误 类模板使用时候，不可以用自动类型推导</span></span><br><span class="line">Person &lt;string ,<span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">1000</span>); <span class="comment">//必须使用显示指定类型的方式，使用类模板</span></span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、类模板在模板参数列表中可以有默认参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person &lt;string&gt; <span class="built_in">p</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">999</span>); <span class="comment">//类模板中的模板参数列表 可以指定默认参数</span></span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>类模板使用只能用显示指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul><h3 id="类模板中成员函数创建时机"><a href="#类模板中成员函数创建时机" class="headerlink" title="类模板中成员函数创建时机"></a>类模板中成员函数创建时机</h3><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><p></strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person1 show&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person2 show&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123; obj.<span class="built_in">showPerson1</span>(); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123; obj.<span class="built_in">showPerson2</span>(); &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyClass&lt;Person1&gt; m;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">fun1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p><h3 id="类模板与继承"><a href="#类模板与继承" class="headerlink" title="类模板与继承"></a>类模板与继承</h3><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">T m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt; <span class="comment">//必须指定一个类型</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板继承类模板 ,可以用T2指定父类中的T类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> :<span class="keyword">public</span> Base&lt;T2&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son2</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son2&lt;<span class="type">int</span>, <span class="type">char</span>&gt; child1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p><h3 id="类模板成员函数类外实现"><a href="#类模板成员函数类外实现" class="headerlink" title="类模板成员函数类外实现"></a>类模板成员函数类外实现</h3><p>学习目标：能够掌握类模板中的成员函数类外实现</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板中成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//成员函数类内声明</span></span><br><span class="line"><span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p><h3 id="类模板分文件编写"><a href="#类模板分文件编写" class="headerlink" title="类模板分文件编写"></a>类模板分文件编写</h3><p>学习目标：</p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li></ul><p>问题：</p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li></ul><p><strong>示例：</strong></p><p>person.hpp中代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模板分文件编写.cpp中代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &quot;person.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;person.cpp&quot;</span> <span class="comment">//解决方式1，包含cpp源文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;person.hpp&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h3 id="类模板与友元"><a href="#类模板与友元" class="headerlink" title="类模板与友元"></a>类模板与友元</h3><p>学习目标：</p><ul><li>掌握类模板配合友元函数的类内和类外实现</li></ul><p>全局函数类内实现 - 直接在类内声明友元即可</p><p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt; <span class="keyword">class</span> <span class="title class_">Person</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到</span></span><br><span class="line"><span class="comment">//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1, T2&gt; &amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;类外实现 ---- 姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、全局函数配合友元   类内实现</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">printPerson</span><span class="params">(Person&lt;T1, T2&gt; &amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数配合友元  类外实现</span></span><br><span class="line"><span class="keyword">friend</span> <span class="type">void</span> printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、全局函数在类内实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person &lt;string, <span class="type">int</span> &gt;<span class="built_in">p</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">printPerson</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、全局函数在类外实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person &lt;string, <span class="type">int</span> &gt;<span class="built_in">p</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">printPerson2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p><blockquote><p>案例：<strong>未完待续</strong></p></blockquote><h1 id="初识STL"><a href="#初识STL" class="headerlink" title="初识STL"></a>初识STL</h1><h2 id="STL的诞生"><a href="#STL的诞生" class="headerlink" title="STL的诞生"></a>STL的诞生</h2><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p></li><li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p></li></ul><h2 id="STL基本概念"><a href="#STL基本概念" class="headerlink" title="STL基本概念"></a>STL基本概念</h2><ul><li>STL(Standard Template Library,<strong>标准模板库</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h2 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a>STL六大组件</h2><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p><ol><li>容器：各种数据结构，如<code>vector</code>、<code>list</code>、<code>deque</code>、<code>set</code>、<code>map</code>等,用来存放数据。</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器与算法之间的胶合剂。</li><li>仿函数：行为类似函数，可作为算法的某种策略。</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>空间配置器：负责空间的配置与管理。</li></ol><h2 id="STL中容器、算法、迭代器"><a href="#STL中容器、算法、迭代器" class="headerlink" title="STL中容器、算法、迭代器"></a>STL中容器、算法、迭代器</h2><p></strong>容器：</strong>置物之所也</p><p>STL</strong>容器</strong>就是将运用</strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p><p>这些容器分为</strong>序列式容器</strong>和</strong>关联式容器</strong>两种:</p><p>​</strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。<br>​</strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p><p></strong>算法：</strong>问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:</strong>质变算法</strong>和</strong>非质变算法</strong>。</p><p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p><p></strong>迭代器：</strong>容器和算法之间粘合剂</p><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器</p><p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–，</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p><h2 id="容器算法迭代器初识"><a href="#容器算法迭代器初识" class="headerlink" title="容器算法迭代器初识"></a>容器算法迭代器初识</h2><p>向容器中插入数据、并遍历这个容器</p><h3 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h3><p>容器：<code>vector</code></p><blockquote><p><code>vector</code>容器本身可以理解为指针</p></blockquote><p>算法：<code>for_each</code></p><p>迭代器：<code>vector&lt;int&gt;::iterator</code></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">myPrit</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    v.push_back(<span class="number">10</span>);</span><br><span class="line">    v.push_back(<span class="number">20</span>);</span><br><span class="line">    v.push_back(<span class="number">30</span>);</span><br><span class="line">    v.push_back(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种遍历方式</span></span><br><span class="line">    <span class="comment">//通过迭代器访问容器中的数据</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::<span class="type">iterator</span> <span class="variable">itBegin</span> <span class="operator">=</span> v.begin();<span class="comment">//指向容器中的第一个元素</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::<span class="type">iterator</span> <span class="variable">itEnd</span> <span class="operator">=</span> v.end();<span class="comment">//指向容器中最后一个元素的最后一个位置</span></span><br><span class="line">    <span class="keyword">while</span>(itBegin != itEnd)&#123;</span><br><span class="line">        cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种遍历</span></span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::<span class="type">iterator</span> <span class="variable">it</span> <span class="operator">=</span> v.begin();it != v.end();it++)&#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种遍历</span></span><br><span class="line">    for_each(v.begin(),v.end(), myPrit);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vector存放自定义数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Lifetime on 2023/11/17 017.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//vector存放自定义数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> string &amp;name, <span class="type">int</span> age) : <span class="built_in">name</span>(name), <span class="built_in">age</span>(age) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> string &amp;<span class="title">getName</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(<span class="type">const</span> string &amp;name)</span> </span>&#123;</span><br><span class="line">        Person::name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span> </span>&#123;</span><br><span class="line">        Person::age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Person</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;Person&gt;p;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Jack&quot;</span>,<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;Jerry&quot;</span>,<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;Georgy&quot;</span>,<span class="number">13</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span><span class="params">(<span class="string">&quot;Max&quot;</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    p.<span class="built_in">push_back</span>(p1);</span><br><span class="line">    p.<span class="built_in">push_back</span>(p2);</span><br><span class="line">    p.<span class="built_in">push_back</span>(p3);</span><br><span class="line">    p.<span class="built_in">push_back</span>(p4);</span><br><span class="line">    p.<span class="built_in">push_back</span>(p5);</span><br><span class="line">    p.<span class="built_in">push_back</span>(p6);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator it = p.<span class="built_in">begin</span>();it != p.<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">        cout &lt;&lt;it-&gt;<span class="built_in">getName</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vector容器嵌套容器"><a href="#Vector容器嵌套容器" class="headerlink" title="Vector容器嵌套容器"></a>Vector容器嵌套容器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Lifetime on 2023/11/17 017.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;vec;</span><br><span class="line">    <span class="comment">//创建小容器</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;vector1;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;vector2;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;vector3;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;vector4;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;vector5;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向小容器中添加数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        vector1.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">        vector2.<span class="built_in">push_back</span>(i+<span class="number">2</span>);</span><br><span class="line">        vector3.<span class="built_in">push_back</span>(i+<span class="number">3</span>);</span><br><span class="line">        vector4.<span class="built_in">push_back</span>(i+<span class="number">4</span>);</span><br><span class="line">        vector5.<span class="built_in">push_back</span>(i+<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将小容器添加到大容器</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(vector1);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(vector2);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(vector3);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(vector4);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(vector5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历大容器</span></span><br><span class="line">    <span class="keyword">for</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;::iterator it = vec.<span class="built_in">begin</span>();vec.<span class="built_in">begin</span>() != vec.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator iter = (*it).<span class="built_in">begin</span>();iter != (*it).<span class="built_in">end</span>();iter++) &#123;</span><br><span class="line">            cout&lt;&lt; <span class="string">&quot;iter=&quot;</span> &lt;&lt; *iter ;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="STL-常用容器"><a href="#STL-常用容器" class="headerlink" title="STL-常用容器"></a>STL-常用容器</h1><h2 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h2><h3 id="1-string基本概念"><a href="#1-string基本概念" class="headerlink" title="1. string基本概念"></a>1. string基本概念</h3><p><strong>本质</strong></p><ul><li>string是C++风格的字符串，是个类</li></ul><p><strong>string和char*的区别</strong></p><ul><li>char*是一个指针</li><li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器</li></ul><p><strong>特点：</strong></p><p>string类内部封装了很多成员方法</p><blockquote><p>查找find，拷贝copy，删除delete，替换replace，插入insert</p></blockquote><p>string管理char*所分配的内存，不用担心赋值越界等，由类内部进行负责</p><h3 id="2-string构造函数"><a href="#2-string构造函数" class="headerlink" title="2. string构造函数"></a>2. string构造函数</h3><p>构造函数原型：</p><ul><li><code>string();</code> &#x2F;&#x2F;创建一个空的字符串</li><li><code>string(const char* s)</code> &#x2F;&#x2F;使用字符串初始化</li><li><code>string(const string&amp; str);</code>&#x2F;&#x2F;使用一个string对象初始化另一个string对象</li><li><code>string(int n,char c);</code> &#x2F;&#x2F;使用n个字符c初始化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s1;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">const</span> string&amp; str1 = <span class="string">&quot;test_str1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(str)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s2=&quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(str1)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s3&quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">string</span>(n, c);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/string%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png"></p><h3 id="3-string赋值操作"><a href="#3-string赋值操作" class="headerlink" title="3. string赋值操作"></a>3. string赋值操作</h3><p><strong>功能描述：</strong></p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; operator+=(const char* str);</code>                   &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const char c);</code>                         &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code>                &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; append(const char *s); </code>                               &#x2F;&#x2F;把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code>                 &#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code>                           &#x2F;&#x2F;同operator+&#x3D;(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>&#x2F;&#x2F;字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1 = <span class="string">&quot;hello string&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str2;</span><br><span class="line">str2.<span class="built_in">assign</span>(<span class="string">&quot;hello string&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str2=&quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-string字符串拼接"><a href="#4-string字符串拼接" class="headerlink" title="4. string字符串拼接"></a>4. string字符串拼接</h3><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code>              &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const; </code>                     &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const; </code>               &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const; </code>                       &#x2F;&#x2F;查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      &#x2F;&#x2F;查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code>              &#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code>              &#x2F;&#x2F;从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;  </code>                      &#x2F;&#x2F;查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str); </code>       &#x2F;&#x2F;替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s); </code>                 &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str1 = <span class="string">&quot;我&quot;</span>;</span><br><span class="line">str1 += <span class="string">&quot;想进步，赚大钱&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1&lt;&lt;endl;</span><br><span class="line">str1 += <span class="string">&#x27;wa&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1= &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str2;</span><br><span class="line">str2.<span class="built_in">append</span>(<span class="string">&quot;天行健，君子以自强不息&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str2=&quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">str2.<span class="built_in">append</span>(<span class="string">&quot;地势坤，君子以厚德载物&quot;</span>,<span class="number">22</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str2=&quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-string查找和替换"><a href="#5-string查找和替换" class="headerlink" title="5. string查找和替换"></a>5. string查找和替换</h3><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code>              &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const; </code>                     &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const; </code>               &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const; </code>                       &#x2F;&#x2F;查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      &#x2F;&#x2F;查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code>              &#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code>              &#x2F;&#x2F;从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;  </code>                      &#x2F;&#x2F;查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str); </code>       &#x2F;&#x2F;替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s); </code>                 &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//find-&gt;从左往右找</span></span><br><span class="line">string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="type">int</span> pos =  str1.<span class="built_in">find</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;字符串已找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;pos=&quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未找到字符串&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//rfind-&gt;从右往左找</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="comment">//从1号位置起3个字符 替换为&quot;1111&quot;</span></span><br><span class="line">str1.<span class="built_in">replace</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="string">&quot;1111&quot;</span>);</span><br><span class="line"><span class="comment">//str1 = &quot;a1111efg&quot;</span></span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>rfind()</code>从右往左，<code>find()</code>从左往右</li><li><code>find()</code>返回查找到字符串第一个元素的位置，找不到元素，返回-1</li><li><code>replace()</code>从第几个到第几个替换“”中的字符串</li></ul><h3 id="6-string字符串比较"><a href="#6-string字符串比较" class="headerlink" title="6. string字符串比较"></a>6. string字符串比较</h3><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>&#x3D; 返回   0</p><p>&gt; 返回   1 </p><p>&lt; 返回  -1</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const; </code>  &#x2F;&#x2F;与字符串s比较</li><li><code>int compare(const char *s) const;</code>      &#x2F;&#x2F;与字符串s比较</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">string str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2)==<span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;字符串相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">string str2 = <span class="string">&quot;aello&quot;</span>;</span><br><span class="line"><span class="type">int</span> res = str1.<span class="built_in">compare</span>(str2);</span><br><span class="line"><span class="keyword">if</span> (res &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1&gt;str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str1 = <span class="string">&quot;aello&quot;</span>;</span><br><span class="line">string str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> res = str1.<span class="built_in">compare</span>(str2);</span><br><span class="line"><span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p><h3 id="7-string字符读取"><a href="#7-string字符读取" class="headerlink" title="7. string字符读取"></a>7. string字符读取</h3><p>string中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n); </code>     &#x2F;&#x2F;通过[]方式取字符</li><li><code>char&amp; at(int n);   </code>                    &#x2F;&#x2F;通过at方法获取字符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//通过数组访问单个字符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str = <span class="string">&quot;Read String!&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]=&quot;</span> &lt;&lt; str[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用at方式访问单个字符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str = <span class="string">&quot;test_string&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; str.<span class="built_in">at</span>(i) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过[]或at修改单个字符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string str = <span class="string">&quot;alter&quot;</span>;</span><br><span class="line">str[<span class="number">1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">str.<span class="built_in">at</span>(<span class="number">0</span>) = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-string插入和删除"><a href="#8-string插入和删除" class="headerlink" title="8. string插入和删除"></a>8. string插入和删除</h3><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; insert(int pos, const char* s);  </code>                &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str); </code>        &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code>                &#x2F;&#x2F;在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos, int n = npos);</code>                    &#x2F;&#x2F;删除从Pos开始的n个字符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);  <span class="comment">//从1号位置开始3个字符</span></span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-string子串"><a href="#9-string子串" class="headerlink" title="9. string子串"></a>9. string子串</h3><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code>   &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">string str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">string subStr = str.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;subStr = &quot;</span> &lt;&lt; subStr &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string email = <span class="string">&quot;hello@sina.com&quot;</span>;</span><br><span class="line"><span class="type">int</span> pos = email.<span class="built_in">find</span>(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">string username = email.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;username: &quot;</span> &lt;&lt; username &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h2><h3 id="1-vector基本概念"><a href="#1-vector基本概念" class="headerlink" title="1. vector基本概念"></a>1. vector基本概念</h3><p></strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li></ul><p></strong>动态扩展：</strong></p><ul><li><p>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/vector%E5%AE%B9%E5%99%A8%E4%BB%8B%E7%BB%8D.jpg"></p></li><li><p>vector容器的迭代器是支持随机访问的迭代器</p></li></ul><h3 id="2-vector构造函数"><a href="#2-vector构造函数" class="headerlink" title="2. vector构造函数"></a>2. vector构造函数</h3><p></strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p></strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v; </code>                    &#x2F;&#x2F;采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());   </code>       &#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身。</li><li><code>vector(n, elem);</code>                            &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code>         &#x2F;&#x2F;拷贝构造函数。</li></ul><h3 id="3-vector赋值操作"><a href="#3-vector赋值操作" class="headerlink" title="3. vector赋值操作"></a>3. vector赋值操作</h3><h3 id="4-vector容量和大小"><a href="#4-vector容量和大小" class="headerlink" title="4. vector容量和大小"></a>4. vector容量和大小</h3><h3 id="5-vector插入和删除"><a href="#5-vector插入和删除" class="headerlink" title="5. vector插入和删除"></a>5. vector插入和删除</h3><h2 id="6-vector数据存取"><a href="#6-vector数据存取" class="headerlink" title="6. vector数据存取"></a>6. vector数据存取</h2><h2 id="7-vector互换容器"><a href="#7-vector互换容器" class="headerlink" title="7. vector互换容器"></a>7. vector互换容器</h2><h2 id="8-vector预留空间"><a href="#8-vector预留空间" class="headerlink" title="8. vector预留空间"></a>8. vector预留空间</h2>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中&amp;和*的区别</title>
      <link href="/2023/07/31/%E5%8F%96%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%9C%B0%E5%9D%80%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/07/31/%E5%8F%96%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%9C%B0%E5%9D%80%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中-和-amp-的区别"><a href="#C-中-和-amp-的区别" class="headerlink" title="C++中*和&amp;的区别"></a>C++中*和&amp;的区别</h1><ul><li>*是<mark>取值运算符</mark>，对地址使用可以获得地址中储存的数值。 对于指针a，*a表示取a中的值</li><li>&amp;是<mark>地址运算符</mark>，对变量使用可以获得该变量的地址。对于变量b，&amp;b表示取b的地址</li></ul><hr><p>在定义时，* 是一个标识符，声明该变量是一个指针，比如说int *p; 那p就是一个指向int型的指针；<br>在调用时，*p是指针p指向的那个变量，比如说之前有int a&#x3D;5；int *p&#x3D;a；那么p的值是a的地址，也就是指针p指向a，*p则等于a的值，即*p&#x3D;5。<br>而&amp;，则是引用，比如说有定义int a&#x3D;5；再定义int b&#x3D;&amp;a；那么这里的b则引用a的值，即b&#x3D;5，而再给b赋值：b&#x3D;10，a的值也会变为10。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2023/07/30/%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/07/30/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-排序"><a href="#第八章-排序" class="headerlink" title="第八章 排序"></a>第八章 排序</h1><h2 id="基本概念和排序方法"><a href="#基本概念和排序方法" class="headerlink" title="基本概念和排序方法"></a>基本概念和排序方法</h2><h3 id="排序的基本概念"><a href="#排序的基本概念" class="headerlink" title="排序的基本概念"></a>排序的基本概念</h3><ol><li><strong>排序</strong>：从大到小或从小到大排序</li><li><strong>排序的稳定性</strong>：<ul><li>稳定的：关键字相同的元素在排序之后相对位置不变</li><li>不稳定：相反</li></ul></li><li>排序算法的分类：<ul><li>内部排序：待排序记录全部放在<mark>计算机内存</mark>中*(关注算法时间、空间复杂度)*</li><li>外部排序：数据过大，以至于内存中不能容纳全部的数据，在排序过程中，尚需对<mark>外存</mark>进行访问排序*(还要关注读取&#x2F;写磁盘的次数更少)*</li></ul></li></ol><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><strong>算法思想</strong>︰每次将一个待排序的记录按其关键字大小插入到前面已排好序的子序列中，直到全部记录插入完成。</p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>是一种最简单的排序方法，其基本操作是将一条记录插入已经排好序的表，从而得到一条新的、记录数量增1的有序表</p><p>算法描述：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%88%E5%B8%A6%E5%93%A8%E5%85%B5%EF%BC%89.png" alt="()"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img//%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif"></p><p>算法分析：</p><ul><li><p>时间复杂度：</p><p>最好的情况：比较次数n-1次</p><p>最坏的情况：$$O(n^2)$$</p><p>平均时间复杂度：$$O(n^2)$$</p></li><li><p>空间复杂度：$$O(1)$$</p></li></ul><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png"></p><p>时间复杂度<mark>依然是$O(n^2)$</mark></p><p><strong>注意</strong>：一直到low&gt;high时才停止折半查找。当mid所指元素等于当前元素时，应继续令low&#x3D;mid+1，以保证“稳定性”。最终应将当前元素插入到low所指位置(即high+1)</p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>先追求表中元素部分有序，在逐渐逼近全局有序(<mark>部分有序</mark>-&gt;<mark>全局有序</mark>)</p><p><strong>希尔排序</strong>︰先将待排序表分割成若干形如$$L[i,i + d, i + 2d…, i + kd]$$的“特殊”子表，对各个子表分别进行直接插入排序。缩小<font color="red"><em>增量d</em>(每次将d减少一半)</font>，重复上述过程，直到d&#x3D;1为止。</p><p>算法实现：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif"></p><p><strong>算法性能分析</strong>：</p><p>空间复杂度：$$O(1)$$</p><p>时间复杂度：$$O(n^{1.25})~O(1.6n^{1.25})$$</p><p><strong>不稳定，仅适用于顺序表，不适用于链表</strong></p><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><p>基本思想：</p><p>两两比较待排序记录的关键字，一旦发现两个记录不满足次序要求时则进行交换，一直到整个序列全部满足要求为止</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>算法实现：<br><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif"></p><p>算法性能分析：</p><p>空间复杂度：$$O(1)$$</p><p>时间复杂度：</p><p>最好：$$O(1)$$</p><p>最差：$$O(n^2)$$</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>算法思想</strong>∶在待排序表$$L[1..n]$$中任取一个元素$$pivot$$作为枢轴(或基准，通常取首元素)，通过一趟排序将待排序表划分为独立的两部分$$L[1…k-1]$$和$$LIk+1..n]$$，使得$$[1…k-1]$$中的所有元素小于$$pivot$$，$$L[k+1..n]$$中的所有元素大于等于$$pivot$$，则$$pivot$$放在了其最终位置$$L(k)$$上，这个过程称为一次“划分”。然后分别递归地对两个子表重复上述过程，直至每部分内只有一个元素或空为止，即所有元素放在了其最终位置上。</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif"></p><p>算法实现：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.png"></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序：每一趟在待排序元素中选取关键字最小（或最大）的元素假如有序子序列</p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img//%25E9%2580%2589%25E6%258B%25A9%25E6%258E%2592%25E5%25BA%258F.gif"></p><p>空间复杂度：$$O(1)$$</p><p>时间复杂度：$$O(n^2)$$</p><h3 id="树型选择排序"><a href="#树型选择排序" class="headerlink" title="树型选择排序"></a>树型选择排序</h3><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><strong>堆的定义</strong>：n个元素的序列$${k_1,k_2,k_3,…,k_n}$$称之为堆，当且仅当满足以下条件时：</p><ul><li>$$k_i&gt;&#x3D;k_2i$$且$$k_i&gt;&#x3D;k_{2i+1}$$</li><li>$$k_i&lt;&#x3D;k_{2i}$$且$$k_i&lt;&#x3D;k_P{2i+1}(1&lt;&#x3D;i&lt;&#x3D;\lfloor{n&#x2F;2}\rfloor)$$</li></ul><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%A0%86.png"></p><p>大根堆：根&gt;&#x3D;左右节点</p><p>小根堆：根&lt;&#x3D;左右节点</p><ol><li><p>建立大根堆</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%BB%BA%E7%AB%8B%E5%A4%A7%E6%A0%B9%E5%A0%86.png"></p></li></ol><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h2 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2023/07/20/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2023/07/20/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h2><ol><li><p>初始化</p><p><mark>步骤</mark>：</p><ol><li>为顺序表L动态分配一个预定义大小的数组空间，使elem指向这段空间的基地址</li><li>将表的当前长度设为0</li></ol><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L.elem = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!L.elem)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>取值</p><p><mark>步骤</mark>:</p><ol><li>判断指定的位置序号i的值是否合理$$（1&lt;&#x3D;i&lt;&#x3D;L.length）$$，若不合理，返回false</li><li>若值合理，则将第i个数据元素L.elem[i-1]赋值参数e，通过e返回第i个数据元素的传值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetElem</span><span class="params">(SqList L,<span class="type">int</span> i,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e=L.elem[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查找</p><p><mark>步骤</mark>：</p><ol><li>从第一个元素起，依次将其值和e比较，若找到和e值相等的元素L.elem[i]，则查找成功，返回该元素的序号i+1</li><li>若查遍整个顺序表都没有找到，则查找失败，返回0</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SqList L,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e==L.elem[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入</p><ol><li>判断插入位置i是否合法(i值的合法范围为1&lt;&#x3D;i&lt;&#x3D;n+1)，若不合法返回FALSE</li><li>判断顺序表的存储空间是否已满，若满了，返回FALSE</li><li>将第n个至第i个元素依次向后移动一个位置，空出第i个位置(i&#x3D;n+1时无序移动)</li><li>将要插入的元素e放入第i个元素</li><li>表长加一</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(L.length==MAXSIZE)&#123;<span class="comment">//判断顺序表的存储空间是否已满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=L.length<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)&#123;</span><br><span class="line">        L.elem[j+<span class="number">1</span>]=L.elem[j];    </span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i<span class="number">-1</span>] = e;</span><br><span class="line">    ++L.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><p><mark>步骤</mark>:</p><ol><li>判断删除位置i是否合法(合法的值为1&lt;&#x3D;i&lt;&#x3D;n)，若不合法则返回FALSE</li><li>将第i+1个元素至第n个元素依次向前移动一个位置(i&#x3D;n时无需移动)</li><li>表长减一</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L,<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;L.length &amp;&amp; i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=L.length<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        L.elem[j<span class="number">-1</span>]=L.elem[j];</span><br><span class="line">    &#125;</span><br><span class="line">    --L.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><mark>测试</mark>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    ElemType *elem;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本操作的实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXSIZE = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(SqList &amp;L, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    L.elem = <span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span> (!L.elem) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = length;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">PushElem</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i - <span class="number">1</span>] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetElem</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.elem[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LocateElem</span><span class="params">(SqList &amp;L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == L.elem[i]) &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;位置为&quot;</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (L.length == MAXSIZE) &#123; <span class="comment">//判断顺序表的存储空间是否已满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L.length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--) &#123;</span><br><span class="line">        L.elem[j + <span class="number">1</span>] = L.elem[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i - <span class="number">1</span>] = e;</span><br><span class="line">    ++L.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; L.length &amp;&amp; i &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= L.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        L.elem[j - <span class="number">1</span>] = L.elem[j];</span><br><span class="line">    &#125;</span><br><span class="line">    --L.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个元素：&quot;</span> &lt;&lt; L.elem[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="built_in">InitList</span>(L, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">PushElem</span>(L, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">PushElem</span>(L, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">PushElem</span>(L, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">PushElem</span>(L, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">LocateElem</span>(L, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在第三个位置，插入元素5</span></span><br><span class="line">    <span class="built_in">ListInsert</span>(L, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ListDelete</span>(L, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>运行</mark>：</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png"></p><h2 id="线性表的链式表示和实现"><a href="#线性表的链式表示和实现" class="headerlink" title="线性表的链式表示和实现"></a>线性表的链式表示和实现</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ol><li><p>初始化</p><ol><li>生成新节点作为头结点，用头指针L指向头结点</li><li>头结点的指针域置空</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void Initlist(LinkList &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">L = new LNode;</span><br><span class="line">L-&gt;next = NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>取值</p><ol><li>用指针p指向首元结点，用j做计数器初值赋为1</li><li>从首元结点开始依次顺着链域next向下访问，只要指向当前节点的指针p不为空(NULL)，并且没有到达序号为i的节点，则循环执行以下操作：<ul><li>p指向下一节点</li><li>计数器j加一</li></ul></li><li>退出循环时，如果指针p为空，或者计数器j大于i，说明指定的序号i值不合法(i大于表长n或i小于等于0)，取值失败返回ERROR；否则取值成功，此时j&#x3D;i时，p所指的节点就是要找的第i个节点，用参数e保存当前节点的数据域，返回OK</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetElem</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, <span class="type">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line">LinkList p;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; i &amp;&amp; p) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">e = p -&gt; data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查找</p><ol><li>用指针p指向首元结点</li><li>从首元结点开始依次顺着链域next向下查找，只要指向当前节点的指针p不为空，并且p所指节点的数据域不等于给定值e，则循环执行以下操作：p指向下一节点</li><li>返回p。若查找成功，p此时指向节点的地址值；若查找失败，则p的值为NULL</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LocateElem</span><span class="params">(LinkList &amp;L, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">LinkList p;</span><br><span class="line">p = L-&gt; next;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; p-&gt;data != e)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入</p><ol><li>查找节点a<sub>i-1</sub>并由指针p指向该节点</li><li>生成一个新节点*s</li><li>将新节点*s的数据域置为e</li><li>将新节点*s的指针域指向节点a<sub>i</sub></li><li>将节点*p的指针域指向新节点*s</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line">LinkList p, s;</span><br><span class="line">p = L;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; i - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">s = <span class="keyword">new</span> LNode;</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><ol><li>查找节点a<sub>i-1</sub>并由指针p指向该节点</li><li>临时保存待删除的节点a<sub>i</sub>的地址在q中，以备释放</li><li>将节点*p的指针域指向a<sub>i</sub>的直接后继节点</li><li>释放节点a<sub>i</sub>的空间</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">LinkList p, q;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">p = L;</span><br><span class="line"><span class="keyword">while</span> ((p-&gt;next) &amp;&amp; (j &lt; i - <span class="number">1</span>)) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;next) || (j &gt; i - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">q = p-&gt;next;;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建单链表</p><ul><li><p>前插法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateList_H</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n ;</span><br><span class="line">LinkList s; </span><br><span class="line">L = <span class="keyword">new</span> LNode;</span><br><span class="line">L -&gt;next = <span class="literal">NULL</span>; </span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123; </span><br><span class="line"> s = <span class="keyword">new</span> LNode ; </span><br><span class="line">cin&gt;&gt;s-&gt;data;</span><br><span class="line">s-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后插法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateList_R</span><span class="params">(LinkList &amp;L)</span>   <span class="comment">//尾插法创建单链表 （尾插法是正序建表） </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//输入n个元素，建立到头结点的单链表</span></span><br><span class="line">   <span class="type">int</span> n ;</span><br><span class="line">   LinkList  s, r;</span><br><span class="line">   L = <span class="keyword">new</span> LNode;</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;  <span class="comment">//先建立一个带头结点的空链表 </span></span><br><span class="line">r = L;           <span class="comment">//尾指针r指向头结点  （就他自己）</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入元素个数 n: &quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请依次输入n个元素：&quot;</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;前插法创建单链表...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123; </span><br><span class="line"> s = <span class="keyword">new</span> LNode ;       <span class="comment">//生成新结点s</span></span><br><span class="line">cin&gt;&gt;s-&gt;date;          <span class="comment">//输入元素赋值给新结点的数据域</span></span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    r-&gt;next = s;           <span class="comment">//将新结点插s插入尾结点*r之后</span></span><br><span class="line">r = s;                 <span class="comment">//r指向新的尾结点s </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><h2 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h2><h3 id="空间性能"><a href="#空间性能" class="headerlink" title="空间性能"></a>空间性能</h3><h3 id="时间性能"><a href="#时间性能" class="headerlink" title="时间性能"></a>时间性能</h3><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I/O流</title>
      <link href="/2023/06/23/IO%E6%B5%81/"/>
      <url>/2023/06/23/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="I-x2F-O流"><a href="#I-x2F-O流" class="headerlink" title="I&#x2F;O流"></a>I&#x2F;O流</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>1、文件</p><p>保存数据的地方</p><p>2、 文件流</p><ul><li>流：数据在数据源(文件)和程序(内存)之间的路径</li><li>输入流：将磁盘中的文件写入内存</li><li>输出流：将内存中的内容写入磁盘</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li>创建文件对象相关的构造器和方法<ul><li><code>new File(String pathname)</code>根据路径创建一个File对象</li><li><code>new File(File parent,String chil)</code>根据父目录文件+子路径构建</li><li><code>new File(String parent,String child)</code>根据父目录+子路径构建</li><li>createNewFile创建新文件</li></ul></li><li>获取文件的相关信息<ul><li>getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</li></ul></li><li>目录操作和文件删除<ul><li>创建一级目录：mkdir</li><li>创建多级目录：mkdirs</li><li>删除空目录或文件：delete</li></ul></li></ul><h2 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h2><ul><li><p>Java IO原理</p><ol><li>IO流是input、output的缩写，用于处理数据传输，如读写文件、网络通信</li><li>在Java程序中，对于数据的输入。输出以“流(stream)”的方式进行</li><li>java.io包下提供了各种“流”的类和接口，用于获取不同种类的数据，并通过方法输入或输出数据</li></ol></li><li><p>流的分类</p><ol><li><p>操作数据单元：字节流、字符流</p></li><li><p>数据流的流向：输入流、输出流</p></li><li><p>流的角色：节点流、处理流(字符流)</p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/IO%E6%B5%81%E5%A4%A7%E7%BA%B2.png"></p></li></ol></li></ul><h2 id="输入流"><a href="#输入流" class="headerlink" title="*输入流"></a>*输入流</h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/FileInputStream.png"></p><h3 id="Reader-字节输入流"><a href="#Reader-字节输入流" class="headerlink" title="Reader(字节输入流)"></a>Reader(字节输入流)</h3><ul><li>关系图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/FileReader%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><ol><li>相关方法<ul><li><code>new FileReader(File/String)</code></li><li><code>read</code>:每次读取单个字符，返回该字符，如果到文件末尾，返回-1</li><li><code>read(char[])</code>:批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾，返回-1</li></ul></li><li>相关API<ul><li><code>new String(char[])</code>:将char[]转成String</li><li><code>new String(char[],off,len)</code>:将char []的指定部分转换成String</li></ul></li></ol><h2 id="输出流"><a href="#输出流" class="headerlink" title="*输出流"></a>*输出流</h2><h3 id="OutputStream-字节"><a href="#OutputStream-字节" class="headerlink" title="OutputStream(字节)"></a>OutputStream(字节)</h3><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/FileInputStream.png"></p><h4 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h4><h3 id="Writer-字符"><a href="#Writer-字符" class="headerlink" title="Writer(字符)"></a>Writer(字符)</h3><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><ol><li>常用方法<ul><li>new FileWriter(File&#x2F;String):覆盖模式，相当于流的指针在首段</li><li>new FileWriter(File&#x2F;String,true):追加模式，相当于流的指针在尾端</li><li>write(int):写入单个字符</li><li>write(char[]):写入指定数组</li><li>write(char[],off,len):写入指定数组的指定部分</li><li>writer(string):写入指定字符串</li><li>writer(string,off,len):写入指定字符串放入指定部分</li></ul></li><li>相关API<ul><li>String类</li><li>toCharArray:将String转换成char[]</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/FileWriter%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><ul><li>注意：FileWriter使用后，必须关闭(close)或刷新(flush)，否则写入不到指定文件</li></ul><h4 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h4><h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3><ol><li>节点流可以从一个特定的数据源读取数据，如FileReader、FileWriter<ul><li>文件节点流：FileInputStream、FileOutputStream、FileReader、FileWriter</li><li>数组节点流：ByteArrayInputStream、ByteArrayOutStream、CharAttayReader、CharArrayWriter</li><li>访问管道、访问字符流</li></ul></li><li>处理流(包装流)是”连接”在已存在的流(节点流或处理流)之上，为程序提供更为强大的读写功能，更加灵活，如BufferedReader、BufferedWriter</li><li>节点流与处理流的区别与联系<ul><li>节点流是底层流&#x2F;低级流，直接跟数据源相接</li><li>处理流包含节点流，及可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li><li>处理流对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%AD%97%E8%8A%82%E6%B5%81%E4%B8%8E%E5%A4%84%E7%90%86%E6%B5%81.png"></p><ol start="4"><li><p>标准输入输出流</p><table><thead><tr><th></th><th>类型(编译类型)</th><th>类型(运行类型)</th><th>默认设备</th></tr></thead><tbody><tr><td>System.in标准输入</td><td>InputStream</td><td>BufferedInputStream</td><td>键盘</td></tr><tr><td>System.out标准输出</td><td>PrintStream</td><td>PrintStream</td><td>显示器</td></tr></tbody></table></li><li><p>转换流-InputStreamReader和OutputStreamWriter</p><ul><li>解决文件乱码问题</li></ul></li><li><p>打印流-PrintStream和PrintWriter</p><ul><li>打印流只有输出流</li><li>PrintStream(字节流)</li><li>PrintWriter(字符流)</li></ul></li></ol><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><ol><li>序列化：在保存数据时，保存数据的值和数据类型</li><li>反序列化：在恢复数据时，恢复数据的值和数据类型</li><li>需要让某个对象支持序列化机制，则必须让其类是可序列化的(实现接口：Serializable或Externalizable)<ul><li>Serializable:标记接口，没有方法</li><li>Externalizable:该接口有方法需要实现</li></ul></li></ol><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><ol><li>专门用于读取配置文件的的集合类<ul><li>配置文件格式：键&#x3D;值</li></ul></li><li>注意：键值对不需要有空格，值不需要用引号括起来。默认类型是String</li><li>常见方法：<ul><li>load：加载配置文件的键值对到Properties对象</li><li>list：将数据显示到指定设备</li><li>getProperty(key):根据键获取值</li><li>setProperty(key,value):设置键值对到Properties对象</li><li>store:将Properties中的键值对存储到配置文件中，在idea中，保存信息到配置文件，如果含有中文，会存储为UNICode码</li></ul></li></ol><p>作用：存储和读取数据</p><p>I：input</p><p>O：output</p><p>流：像水流一样传输数据</p><h2 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h2><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/img/IO%E6%B5%81.png"></p><p><img src="https://cdn.jsdelivr.net/gh/czlifetime/img/%E5%AD%97%E8%8A%82%E6%B5%81.png"></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="FileOutputStream-1"><a href="#FileOutputStream-1" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p>操作本地文件的字节输出流，可以把程序中的数据写到本地文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123; <span class="comment">//抛出异常</span></span><br><span class="line">        <span class="comment">//步骤：</span></span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;myio\\a.txt&quot;</span>)<span class="comment">//创建对象的路径</span></span><br><span class="line">        <span class="comment">//2.写出数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：a</p><ul><li>创建对象细节：<ul><li>参数是字符串表示的路径或者是File对象都是可以的</li><li>如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的。</li><li>如果文件已经存在,则会清空文件</li></ul></li><li>写出数据细节：<ul><li>write方法的参数是整数，但是实际上写到本地文件中的是整数在ASCII上对应的字符</li></ul></li><li>释放资源细节：<ul><li>每次使用完流之后都要释放资源</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span><span class="comment">//一次写一个字节数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span><span class="comment">//一次写一个字节数组数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b,<span class="type">int</span> off,<span class="type">int</span> len)</span><span class="comment">//一次写一个字节数组的部分数据</span></span><br></pre></td></tr></table></figure><h4 id="FileInputStream-1"><a href="#FileInputStream-1" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><p>操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotException&#123;</span><br><span class="line">        <span class="comment">//步骤：</span></span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;myio\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//2.读取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> fis.read();</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>创建对象细节：如果文件不存在，直接报错</p></li><li><p>读取数据细节：</p><ul><li>一次读取一个字节，读出来的就是数据在ASCII上对应的数字</li><li>读到文件末尾，read方法返回-1</li></ul></li><li><p>释放资源细节：每次使用完流之后都要释放资源</p></li></ul><h4 id="字节输入流循环读取"><a href="#字节输入流循环读取" class="headerlink" title="字节输入流循环读取"></a>字节输入流循环读取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;myio\\a.tet&quot;</span>);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BytestreamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\原路径.mp4&quot;</span>);</span><br><span class="line">        <span class="type">FileOutStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计思想</title>
      <link href="/2023/06/23/%E6%80%9D%E6%83%B3/"/>
      <url>/2023/06/23/%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><ul><li>统计思想:利用map集合进行统计</li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ul><li>遍历集合，按照指定的集合进行拼接的两种方式：<ul><li><code>StringBuilder</code></li><li><code>StringJoiner</code></li></ul></li></ul><h3 id="概率问题"><a href="#概率问题" class="headerlink" title="概率问题"></a>概率问题</h3><ul><li>如30%的甲，70%的乙：<ol><li>创建一个新的集合：赋30%的”1”，赋70%的”2”</li><li>对所创建的集合元素进行随机取值：<code>Random r = new Random();</code></li><li>对随机取得的值进行条件判断，取到的值就有概率</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.CollectionText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text2</span> &#123;</span><br><span class="line">    <span class="comment">//班级里有N个学生要求:70%的概率随机到男生,30%的概率随机到女生</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        Collections.addAll(list,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Collections.addAll(list,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//从list中抽取1,0</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(list.size());</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> list.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个集合分别存储男生与女生</span></span><br><span class="line">        ArrayList&lt;String&gt; boyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; girlList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Collections.addAll(boyList,<span class="string">&quot;男1&quot;</span>,<span class="string">&quot;男2&quot;</span>,<span class="string">&quot;男3&quot;</span>,<span class="string">&quot;男4&quot;</span>,<span class="string">&quot;男5&quot;</span>,<span class="string">&quot;男6&quot;</span>,<span class="string">&quot;男7&quot;</span>,<span class="string">&quot;男8&quot;</span>,<span class="string">&quot;男9&quot;</span>);</span><br><span class="line">        Collections.addAll(girlList,<span class="string">&quot;女1&quot;</span>,<span class="string">&quot;女2&quot;</span>,<span class="string">&quot;女3&quot;</span>,<span class="string">&quot;女4&quot;</span>,<span class="string">&quot;女5&quot;</span>,<span class="string">&quot;女6&quot;</span>,<span class="string">&quot;女7&quot;</span>,<span class="string">&quot;女8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断此时是从boyList里抽取，还是从girlList中抽取</span></span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">boyIndex</span> <span class="operator">=</span> r.nextInt(boyList.size());</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> boyList.get(boyIndex);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">girlIndex</span> <span class="operator">=</span> r.nextInt(girlList.size());</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> girlList.get(girlIndex);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对应思想"><a href="#对应思想" class="headerlink" title="对应思想"></a>对应思想</h3><ul><li><ul><li>如果原始数据的规律非常复杂，可以先手动排序让每一个数据跟唯一的序号产生对应关系</li><li>序号就是数字，规律简单，后续的所有操作，以序号为准</li><li>当真正需要操作数据的时候，通过序号找到原始数据即可</li></ul></li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>把具体的要求封装成方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 设计思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2023/05/22/%E5%9B%BE/"/>
      <url>/2023/05/22/%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><img src="https://s2.loli.net/2023/05/22/WTjnpNUAybvVCOE.png" alt="图的定义1.png"><img src="https://s2.loli.net/2023/05/22/FV6WkYfRIZOPbSo.png" alt="图的定义2.png" style="zoom:33%;" /></p></li><li><p>注意：</p><p>​线性表可以是空表，树可以是空树，但图不可以是空，即v一定是非空集</p></li></ul><h3 id="无向图、有向图"><a href="#无向图、有向图" class="headerlink" title="无向图、有向图"></a>无向图、有向图</h3><p><img src="https://s2.loli.net/2023/05/22/cxqBhkDFXmNb4fC.png" alt="无向图.png"><img src="https://s2.loli.net/2023/05/22/WyAsc3gnGuLPSXQ.png" alt="有向图.png"></p><h3 id="简单图、多重图"><a href="#简单图、多重图" class="headerlink" title="简单图、多重图"></a>简单图、多重图</h3><ul><li>简单图</li><li>多重图</li></ul><h3 id="顶点的度、入度、出度"><a href="#顶点的度、入度、出度" class="headerlink" title="顶点的度、入度、出度"></a>顶点的度、入度、出度</h3><ul><li><p>无向图：顶点v的度是指依附于改顶点的边的条数，极左TD(v)</p></li><li><p>有向图：</p><p>​入读是以顶点v为终点的有向边的数目，记为ID(v)</p><p>​出度是以顶点v为起点的有向边的数目，记为OD(v)</p><p>​顶点的度等于入度和出度之和，TD(v)&#x3D;ID(v)+OD(v)</p></li></ul><h3 id="顶点-顶点的关系描述"><a href="#顶点-顶点的关系描述" class="headerlink" title="顶点-顶点的关系描述"></a>顶点-顶点的关系描述</h3><ul><li><font color="red">路径</font>：顶点v1到顶点v2之间的一条路径</li><li><font color="red">回路</font>：第一个顶点和最后一个顶点相同的路径称为回路或环</li><li><font color="red">简单路径</font>：在路径序列中，顶点不重复出现的路径称为简单路径。</li><li><font color="red">简单回路</font>:除第一个顶点和最后一个顶点外，其余顶点不重复出现的回路称为简单回路。</li><li><font color="red">路径长度</font>:路径上边的数目</li><li><font color="red">点到点的距离</font>:从顶点u出发到顶点v的最短路径若存在，则此路径的长度称为从u到v的距离。若从u到v根本不存在路径，则记该距离为无穷</li><li><font color="red">无向图</font>中，若从顶点v到顶点w有路径存在，则称v和w是<font color="red">连通</font>的</li><li><font color="red">有向图</font>中，若从顶点v到顶点w和从顶点w到顶点v之间都有路径，则称这两个顶点是<font color="red">强连通</font>的</li></ul><h2 id="几种特殊的图"><a href="#几种特殊的图" class="headerlink" title="几种特殊的图"></a>几种特殊的图</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2023/05/19/%E6%A0%91/"/>
      <url>/2023/05/19/%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li><p>节点的内部结构</p><p><img src="/img/%E8%8A%82%E7%82%B9%E5%86%85%E9%83%A8.png"></p></li><li><p><img src="/img/%E6%95%B0%E4%B8%93%E4%B8%9A%E5%90%8D%E8%AF%8D.png"></p></li></ul><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><ul><li>规则：任意节点左右子树不超过一</li><li>平衡二叉树的旋转机制<ul><li>左旋</li><li>右旋</li></ul></li></ul><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><ul><li>红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构。</li><li>1972年出现，当时被称之为平衡二叉B树。后来，1978年被修改为如今的”红黑树”。</li><li>它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点的颜色，</li><li>每一个节点可以是红或者黑;红黑树不是高度平衡的，它的平衡是通过”红黑规则”进行实现的</li></ul><h2 id="红黑规则"><a href="#红黑规则" class="headerlink" title="红黑规则"></a>红黑规则</h2><ul><li>每一个节点或是红色的，或者是黑色的</li><li>根节点必须是黑色</li><li>如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点，每个叶节点(Nil)是黑色的</li><li>如果某一个节点是红色，那么它的子节点必须是黑色(不能出现两个红色节点相连的情况)</li><li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点;</li></ul><img src="红黑树节点.png" style="zoom:50%;" /><ul><li>红黑树添加节点的规则：<ul><li>添加节点默认是红色(效率高)</li><li><img src="/红黑树添加节点的规则.png" style="zoom:67%;" /></li></ul></li></ul><p><strong>更多内容请见 :point_right:<a href="https://flowus.cn/czlifetime/4fe006af-a7d0-4ef3-94b9-09f775b9334d">链接</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建个人博客</title>
      <link href="/2023/05/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始搭建个人博客"><a href="#从零开始搭建个人博客" class="headerlink" title="从零开始搭建个人博客"></a>从零开始搭建个人博客</h1><hr><p>我为什么要搭建个人博客？</p><ol><li>记录美好生活；</li><li>提升自己的技术水平；</li><li>空闲时间娱乐；</li></ol><hr><p><font color = "red" size ="5">本博客由Github+Hexo搭建，下面我来介绍我做这个博客的全过程：</font></p><h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><ol><li><p>首先进入<a href="https://github.com/">GitHub官网</a></p></li><li><p>点击Sign up</p></li></ol><p><img src="https://s2.loli.net/2023/05/26/4spkv6yjKPYq2Qt.png"></p><ol start="3"><li><p>输入你要注册的邮箱、密码<img src="https://s2.loli.net/2023/05/26/w5rAt1McU8DfLZF.png"></p></li><li><p>Create account</p></li></ol><p><img src="https://s2.loli.net/2023/05/26/qJ6LpkECcez42dF.png"></p><ol start="5"><li>依次按照github的提示来做，之后就省略，不难。</li></ol><h2 id="Git安装步骤"><a href="#Git安装步骤" class="headerlink" title="Git安装步骤"></a>Git安装步骤</h2><ol><li><p>进入<a href="https://git-scm.com/">Git官网</a>,想、点击Downloads</p><p><img src="https://s2.loli.net/2023/05/26/XCvmpUekgtPsNc1.png"></p></li><li><p>选择自己的系统</p><p><img src="https://s2.loli.net/2023/05/26/NVbQZjwHz5kDGqx.png"></p></li><li><p>选择自己的适合的版本<img src="https://s2.loli.net/2023/05/26/NVbQZjwHz5kDGqx.png"></p></li></ol><p>​( 国内下载的速度慢，有时候还会下载失败，我这里提供<a href="https://www.aliyundrive.com/s/32emvmTN9aV">Git-2.40.1-64-bit的安装包</a> )</p><ol start="4"><li><p>下载完成打开</p></li><li><p><img src="https://s2.loli.net/2023/05/26/yl4izRvqdTBLCn1.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/eNLwi4Sop3kAs8X.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/FmR3fzUq6wNl91H.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/uWtBQJraKdRG7Zh.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/rwGlm473aKEMWvA.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/D7NuTQsWAHjlrwy.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/TsWILrDS98yoOGb.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/Vn2f47LztITKk5p.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/Bzsw2Djd7FQc8m1.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/gmIUl8jCiRG2c5M.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/ECMy75odNPawH3b.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/SpCgHmPqcwUENIh.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/nERkNgU5zpiqxSX.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/NJkGvSWAt6wdFRH.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/nHdCWkv5O92Sb3D.png"></p></li><li><p>鼠标左击出现这种情况就可以了</p><p><img src="https://s2.loli.net/2023/05/26/SQlBgaF2YvuLcCy.png"></p></li><li><p>打开Git Bash，输入git出现这种情况就可以了</p><p><img src="https://s2.loli.net/2023/05/26/ySnF47b2xWUaQ9i.png"></p></li></ol><h2 id="绑定GitHub并提交文件"><a href="#绑定GitHub并提交文件" class="headerlink" title="绑定GitHub并提交文件"></a>绑定GitHub并提交文件</h2><ol><li><p>打开Git bash 输入ssh，查看本机是否安装SSH</p><p><img src="https://s2.loli.net/2023/05/26/mKTCNa8wS2BYPuI.png"></p></li><li><p>输入<code>ssh-keygen -t rsa</code>，指定生成秘钥，接着再点击四次回车键，生成两个文件，分别为<code>id_rsa</code>，<code>id_rsa.pub</code>，按照指定的文件位置打开<code>id_rsa.pub</code>，复制下来</p><p><img src="https://s2.loli.net/2023/05/26/lmLI6WPkRhKiJcA.png"></p></li><li><p>打开github，在settings中<code>SSH and GPG keys</code>中添加秘钥，名称加不加都行</p><p><img src="https://s2.loli.net/2023/05/26/EesFogtycpwb3JV.png"></p><p><img src="https://s2.loli.net/2023/05/26/MK4F9RpHiC7OxIS.png"></p></li><li><p>验证是否成功，在Git Bash中输入<code>ssh -T github@github.com</code>进行验证</p><p><img src="https://s2.loli.net/2023/05/26/N8KvWDrzjohAwdb.png"></p></li></ol><h2 id="安装node-js和Hexo"><a href="#安装node-js和Hexo" class="headerlink" title="安装node.js和Hexo"></a>安装node.js和Hexo</h2><h3 id="安装node-js及环境变量适配"><a href="#安装node-js及环境变量适配" class="headerlink" title="安装node.js及环境变量适配"></a>安装node.js及环境变量适配</h3><p>大家可以看这篇<a href="https://blog.csdn.net/antma/article/details/86104068">文章</a>，内容相当的详细</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li><p>在github中新建一个仓库</p><p><img src="D:\Desktop\笔记\图片\GWQ2IX1NctS6TVR.png"></p></li><li><p>仓库名为<code>用户名+github.io</code></p><p><img src="https://s2.loli.net/2023/05/26/zHRwbt15yGinTIU.png"></p></li><li><p>点击到仓库的settings，出现这种情况就可以了</p><p><img src="https://s2.loli.net/2023/05/26/mevcw1kIht5UELn.png"></p></li><li><p>安装Hexo：在任意一个盘符下面新建一个<code>Blog</code>文件夹打开文件夹，使用git Bash 的管理员身份运行，输入<code>npm install -g hexo-cli</code>，安装完成之后，在使用<code>hexo init</code>命令初始化一下，输入<code>hexo g</code>静态部署，输入<code>hexo s</code>可以本地预览，在浏览器中输入<code>localhost:4000</code>，就可以本地预览网页了</p></li><li><p>将Hexo部署到GitHub中：打开Blog文件夹，打开<code>_config.yml</code>文件，滑到文件的最下方，修改</p><p><img src="https://s2.loli.net/2023/05/26/at2KjYhmLPAE84k.png"></p><p><img src="https://s2.loli.net/2023/05/26/16b3vVJNHitP4oX.png"></p><p><img src="https://s2.loli.net/2023/05/26/fSyYRl5OIFAJhcd.png"></p></li><li><p>然后回到<code>Blog</code>文件夹中，打开Git Bash，安装Git部署插件，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>再输入以下的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存文件db.json和已生成的静态文件public</span><br><span class="line">hexo g     #生成网站静态文件到默认设置的 public 文件夹(hexo generate的缩写)</span><br><span class="line">hexo d     #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>你的用户名+github.io</code>就可以访问网站了</p></li></ol><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><ol><li><p>域名绝大部分是付费的，但是也有免费的，比如我的这个czlifetime.eu.org，具体的申请教程在<a href="https://www.bilibili.com/video/BV1gs4y1J7xZ/?spm_id_from=333.880.my_history.page.click&vd_source=f38da837f7ffc103f340849927ff2d1f">这</a></p></li><li><p>得到域名后，在阿里云、腾讯云、华为云等可以解析，添加记录：A @ 185.199.108.153 和 A @ 185.199.109.153 和 A @ 185.199.110.153 和 A @ 185.199.111.153，任意选一个或两个就可以了</p></li><li><p>打开Blog文件夹里的source文件夹，添加CNAME文件，可以先创建一个CNAME.txt文件，打开后写上你的域名，不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问，保存后记得要重命名，将.txt删除</p></li><li><p>第三步回到Blog 文件夹，右键打开Git Bash，依次输入下面三条命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存文件db.json和已生成的静态文件public</span><br><span class="line">hexo g     #生成网站静态文件到默认设置的 public 文件夹(hexo generate的缩写)</span><br><span class="line">hexo d     #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure></li><li><p>打开GitHub，看看CNAME文件是否已经在你的项目中，如果没有，可以在github的仓库中添加，最后github中也要把你的域名写进去</p><p><img src="https://s2.loli.net/2023/05/26/Z5SmLtMvVpyW4T3.png"></p></li></ol><h2 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h2><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p><code>hexo</code>有很多种主题，我推荐8种主题</p><ol><li>Butterfly<ul><li>GitHub地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></li><li>在线演示：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></li></ul></li><li>ICARUS<ul><li>GitHub地址：<a href="https://github.com/ppoffice/hexo-theme-icarus">https://github.com/ppoffice/hexo-theme-icarus</a></li><li>在线演示：<a href="https://ppoffice.github.io/hexo-theme-icarus/">https://ppoffice.github.io/hexo-theme-icarus/</a></li></ul></li><li>Fluid<ul><li>GitHub地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></li><li>在线演示：<a href="https://hexo.fluid-dev.com/">hexo.fluid-dev.com&#x2F;</a></li></ul></li><li>Volantis<ul><li>GitHub地址：<a href="https://github.com/volantis-x/hexo-theme-volantis">https://github.com/volantis-x/hexo-theme-volantis</a></li><li>在线演示：<a href="https://volantis.js.org/">volantis.js.org</a></li></ul></li><li>Snippet<ul><li>GitHub地址：<a href="https://github.com/shenliyang/hexo-theme-snippet">https://github.com/shenliyang/hexo-theme-snippet</a></li><li>在线演示：<a href="https://snippet.shenliyang.com/">snippet.shenliyang.com&#x2F;</a></li></ul></li><li>Hacker<ul><li>GitHub地址：<a href="https://github.com/CodeDaraW/Hacker">https://github.com/CodeDaraW/Hacker</a></li><li>在线演示：<a href="https://blog.daraw.cn/">blog.daraw.cn&#x2F;</a></li></ul></li><li>3-hexo<ul><li>GitHub地址：<a href="https://github.com/yelog/hexo-theme-3-hexo">https://github.com/yelog/hexo-theme-3-hexo</a></li><li>在线演示：<a href="https://yelog.org/">yelog.org</a></li></ul></li><li>Cactus<ul><li>GitHub地址：<a href="https://github.com/probberechts/hexo-theme-cactus">https://github.com/probberechts/hexo-theme-cactus</a></li><li>在线演示：<a href="https://probberechts.github.io/hexo-theme-cactus/">probberechts.github.io&#x2F;hexo-theme-cactus&#x2F;</a></li></ul></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>点开GitHub的地址，详细的配置就在首页的md文件中，这里不过多赘述</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
