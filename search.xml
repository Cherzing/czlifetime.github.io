<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性表</title>
      <link href="/2023/07/20/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2023/07/20/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h2><ol><li><p>初始化</p></li><li><p>取值</p></li><li><p>查找</p></li><li><p>插入</p></li><li><p>删除</p></li></ol><h2 id="线性表的链式表示和实现"><a href="#线性表的链式表示和实现" class="headerlink" title="线性表的链式表示和实现"></a>线性表的链式表示和实现</h2><h3 id="1-单链表"><a href="#1-单链表" class="headerlink" title="1. 单链表"></a>1. 单链表</h3><ol><li>初始化</li><li>取值</li><li>查找</li><li>插入</li><li>删除</li><li>创建单链表<ul><li>前插法</li><li>后插法</li></ul></li></ol><h3 id="2-循环链表"><a href="#2-循环链表" class="headerlink" title="2. 循环链表"></a>2. 循环链表</h3><h3 id="3-双向链表"><a href="#3-双向链表" class="headerlink" title="3. 双向链表"></a>3. 双向链表</h3><h2 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h2><h3 id="空间性能"><a href="#空间性能" class="headerlink" title="空间性能"></a>空间性能</h3><h3 id="时间性能"><a href="#时间性能" class="headerlink" title="时间性能"></a>时间性能</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I/O流</title>
      <link href="/2023/06/23/IO%E6%B5%81/"/>
      <url>/2023/06/23/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="I-x2F-O流"><a href="#I-x2F-O流" class="headerlink" title="I&#x2F;O流"></a>I&#x2F;O流</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>1、文件</p><p>保存数据的地方</p><p>2、 文件流</p><ul><li>流：数据在数据源(文件)和程序(内存)之间的路径</li><li>输入流：将磁盘中的文件写入内存</li><li>输出流：将内存中的内容写入磁盘</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li>创建文件对象相关的构造器和方法<ul><li><code>new File(String pathname)</code>根据路径创建一个File对象</li><li><code>new File(File parent,String chil)</code>根据父目录文件+子路径构建</li><li><code>new File(String parent,String child)</code>根据父目录+子路径构建</li><li>createNewFile创建新文件</li></ul></li><li>获取文件的相关信息<ul><li>getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</li></ul></li><li>目录操作和文件删除<ul><li>创建一级目录：mkdir</li><li>创建多级目录：mkdirs</li><li>删除空目录或文件：delete</li></ul></li></ul><h2 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h2><ul><li><p>Java IO原理</p><ol><li>IO流是input、output的缩写，用于处理数据传输，如读写文件、网络通信</li><li>在Java程序中，对于数据的输入。输出以“流(stream)”的方式进行</li><li>java.io包下提供了各种“流”的类和接口，用于获取不同种类的数据，并通过方法输入或输出数据</li></ol></li><li><p>流的分类</p><ol><li><p>操作数据单元：字节流、字符流</p></li><li><p>数据流的流向：输入流、输出流</p></li><li><p>流的角色：节点流、处理流(字符流)</p><p><img src="https://raw.githubusercontent.com/czlifetime/img/master/img//img/IO%E6%B5%81%E5%A4%A7%E7%BA%B2.png"></p></li></ol></li></ul><h2 id="输入流"><a href="#输入流" class="headerlink" title="*输入流"></a>*输入流</h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><p><img src="https://raw.githubusercontent.com/czlifetime/img/master/FileInputStream.png"></p><h3 id="Reader-字节输入流"><a href="#Reader-字节输入流" class="headerlink" title="Reader(字节输入流)"></a>Reader(字节输入流)</h3><ul><li>关系图</li></ul><p><img src="https://raw.githubusercontent.com/czlifetime/img/master/FileReader%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><ol><li>相关方法<ul><li><code>new FileReader(File/String)</code></li><li><code>read</code>:每次读取单个字符，返回该字符，如果到文件末尾，返回-1</li><li><code>read(char[])</code>:批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾，返回-1</li></ul></li><li>相关API<ul><li><code>new String(char[])</code>:将char[]转成String</li><li><code>new String(char[],off,len)</code>:将char []的指定部分转换成String</li></ul></li></ol><h2 id="输出流"><a href="#输出流" class="headerlink" title="*输出流"></a>*输出流</h2><h3 id="OutputStream-字节"><a href="#OutputStream-字节" class="headerlink" title="OutputStream(字节)"></a>OutputStream(字节)</h3><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p><img src="https://raw.githubusercontent.com/czlifetime/img/master/FileInputStream.png"></p><h4 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h4><h3 id="Writer-字符"><a href="#Writer-字符" class="headerlink" title="Writer(字符)"></a>Writer(字符)</h3><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><ol><li>常用方法<ul><li>new FileWriter(File&#x2F;String):覆盖模式，相当于流的指针在首段</li><li>new FileWriter(File&#x2F;String,true):追加模式，相当于流的指针在尾端</li><li>write(int):写入单个字符</li><li>write(char[]):写入指定数组</li><li>write(char[],off,len):写入指定数组的指定部分</li><li>writer(string):写入指定字符串</li><li>writer(string,off,len):写入指定字符串放入指定部分</li></ul></li><li>相关API<ul><li>String类</li><li>toCharArray:将String转换成char[]</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/czlifetime/img/master/FileWriter%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p><ul><li>注意：FileWriter使用后，必须关闭(close)或刷新(flush)，否则写入不到指定文件</li></ul><h4 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h4><h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3><ol><li>节点流可以从一个特定的数据源读取数据，如FileReader、FileWriter<ul><li>文件节点流：FileInputStream、FileOutputStream、FileReader、FileWriter</li><li>数组节点流：ByteArrayInputStream、ByteArrayOutStream、CharAttayReader、CharArrayWriter</li><li>访问管道、访问字符流</li></ul></li><li>处理流(包装流)是”连接”在已存在的流(节点流或处理流)之上，为程序提供更为强大的读写功能，更加灵活，如BufferedReader、BufferedWriter</li><li>节点流与处理流的区别与联系<ul><li>节点流是底层流&#x2F;低级流，直接跟数据源相接</li><li>处理流包含节点流，及可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li><li>处理流对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/czlifetime/img/master/%E5%AD%97%E8%8A%82%E6%B5%81%E4%B8%8E%E5%A4%84%E7%90%86%E6%B5%81.png"></p><ol start="4"><li><p>标准输入输出流</p><table><thead><tr><th></th><th>类型(编译类型)</th><th>类型(运行类型)</th><th>默认设备</th></tr></thead><tbody><tr><td>System.in标准输入</td><td>InputStream</td><td>BufferedInputStream</td><td>键盘</td></tr><tr><td>System.out标准输出</td><td>PrintStream</td><td>PrintStream</td><td>显示器</td></tr></tbody></table></li><li><p>转换流-InputStreamReader和OutputStreamWriter</p><ul><li>解决文件乱码问题</li></ul></li><li><p>打印流-PrintStream和PrintWriter</p><ul><li>打印流只有输出流</li><li>PrintStream(字节流)</li><li>PrintWriter(字符流)</li></ul></li></ol><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><ol><li>序列化：在保存数据时，保存数据的值和数据类型</li><li>反序列化：在恢复数据时，恢复数据的值和数据类型</li><li>需要让某个对象支持序列化机制，则必须让其类是可序列化的(实现接口：Serializable或Externalizable)<ul><li>Serializable:标记接口，没有方法</li><li>Externalizable:该接口有方法需要实现</li></ul></li></ol><p>##Properties类</p><ol><li>专门用于读取配置文件的的集合类<ul><li>配置文件格式：键&#x3D;值</li></ul></li><li>注意：键值对不需要有空格，值不需要用引号括起来。默认类型是String</li><li>常见方法：<ul><li>load：加载配置文件的键值对到Properties对象</li><li>list：将数据显示到指定设备</li><li>getProperty(key):根据键获取值</li><li>setProperty(key,value):设置键值对到Properties对象</li><li>store:将Properties中的键值对存储到配置文件中，在idea中，保存信息到配置文件，如果含有中文，会存储为UNICode码</li></ul></li></ol><p>作用：存储和读取数据</p><p>I：input</p><p>O：output</p><p>流：像水流一样传输数据</p><h2 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h2><p><img src="https://github.com/czlifetime/img/blob/1.0/img/IO%E6%B5%81.png?raw=true"></p><p><img src="https://raw.githubusercontent.com/czlifetime/img/master/%E5%AD%97%E8%8A%82%E6%B5%81.png"></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="FileOutputStream-1"><a href="#FileOutputStream-1" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p>操作本地文件的字节输出流，可以把程序中的数据写到本地文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123; <span class="comment">//抛出异常</span></span><br><span class="line">        <span class="comment">//步骤：</span></span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;myio\\a.txt&quot;</span>)<span class="comment">//创建对象的路径</span></span><br><span class="line">        <span class="comment">//2.写出数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：a</p><ul><li>创建对象细节：<ul><li>参数是字符串表示的路径或者是File对象都是可以的</li><li>如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的。</li><li>如果文件已经存在,则会清空文件</li></ul></li><li>写出数据细节：<ul><li>write方法的参数是整数，但是实际上写到本地文件中的是整数在ASCII上对应的字符</li></ul></li><li>释放资源细节：<ul><li>每次使用完流之后都要释放资源</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span><span class="comment">//一次写一个字节数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span><span class="comment">//一次写一个字节数组数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b,<span class="type">int</span> off,<span class="type">int</span> len)</span><span class="comment">//一次写一个字节数组的部分数据</span></span><br></pre></td></tr></table></figure><h4 id="FileInputStream-1"><a href="#FileInputStream-1" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><p>操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotException&#123;</span><br><span class="line">        <span class="comment">//步骤：</span></span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;myio\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//2.读取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> fis.read();</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>创建对象细节：如果文件不存在，直接报错</p></li><li><p>读取数据细节：</p><ul><li>一次读取一个字节，读出来的就是数据在ASCII上对应的数字</li><li>读到文件末尾，read方法返回-1</li></ul></li><li><p>释放资源细节：每次使用完流之后都要释放资源</p></li></ul><h4 id="字节输入流循环读取"><a href="#字节输入流循环读取" class="headerlink" title="字节输入流循环读取"></a>字节输入流循环读取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;myio\\a.tet&quot;</span>);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BytestreamText</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\原路径.mp4&quot;</span>);</span><br><span class="line">        <span class="type">FileOutStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计思想</title>
      <link href="/2023/06/23/%E6%80%9D%E6%83%B3/"/>
      <url>/2023/06/23/%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><ul><li>统计思想:利用map集合进行统计</li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ul><li>遍历集合，按照指定的集合进行拼接的两种方式：<ul><li><code>StringBuilder</code></li><li><code>StringJoiner</code></li></ul></li></ul><h3 id="概率问题"><a href="#概率问题" class="headerlink" title="概率问题"></a>概率问题</h3><ul><li>如30%的甲，70%的乙：<ol><li>创建一个新的集合：赋30%的”1”，赋70%的”2”</li><li>对所创建的集合元素进行随机取值：<code>Random r = new Random();</code></li><li>对随机取得的值进行条件判断，取到的值就有概率</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CS408.CollectionText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text2</span> &#123;</span><br><span class="line">    <span class="comment">//班级里有N个学生要求:70%的概率随机到男生,30%的概率随机到女生</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        Collections.addAll(list,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Collections.addAll(list,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//从list中抽取1,0</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(list.size());</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> list.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个集合分别存储男生与女生</span></span><br><span class="line">        ArrayList&lt;String&gt; boyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; girlList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Collections.addAll(boyList,<span class="string">&quot;男1&quot;</span>,<span class="string">&quot;男2&quot;</span>,<span class="string">&quot;男3&quot;</span>,<span class="string">&quot;男4&quot;</span>,<span class="string">&quot;男5&quot;</span>,<span class="string">&quot;男6&quot;</span>,<span class="string">&quot;男7&quot;</span>,<span class="string">&quot;男8&quot;</span>,<span class="string">&quot;男9&quot;</span>);</span><br><span class="line">        Collections.addAll(girlList,<span class="string">&quot;女1&quot;</span>,<span class="string">&quot;女2&quot;</span>,<span class="string">&quot;女3&quot;</span>,<span class="string">&quot;女4&quot;</span>,<span class="string">&quot;女5&quot;</span>,<span class="string">&quot;女6&quot;</span>,<span class="string">&quot;女7&quot;</span>,<span class="string">&quot;女8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断此时是从boyList里抽取，还是从girlList中抽取</span></span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">boyIndex</span> <span class="operator">=</span> r.nextInt(boyList.size());</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> boyList.get(boyIndex);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">girlIndex</span> <span class="operator">=</span> r.nextInt(girlList.size());</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> girlList.get(girlIndex);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对应思想"><a href="#对应思想" class="headerlink" title="对应思想"></a>对应思想</h3><ul><li><ul><li>如果原始数据的规律非常复杂，可以先手动排序让每一个数据跟唯一的序号产生对应关系</li><li>序号就是数字，规律简单，后续的所有操作，以序号为准</li><li>当真正需要操作数据的时候，通过序号找到原始数据即可</li></ul></li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>把具体的要求封装成方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 设计思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2023/05/22/%E5%9B%BE/"/>
      <url>/2023/05/22/%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><img src="https://s2.loli.net/2023/05/22/WTjnpNUAybvVCOE.png" alt="图的定义1.png"><img src="https://s2.loli.net/2023/05/22/FV6WkYfRIZOPbSo.png" alt="图的定义2.png" style="zoom:33%;" /></p></li><li><p>注意：</p><p>​线性表可以是空表，树可以是空树，但图不可以是空，即v一定是非空集</p></li></ul><h3 id="无向图、有向图"><a href="#无向图、有向图" class="headerlink" title="无向图、有向图"></a>无向图、有向图</h3><p><img src="https://s2.loli.net/2023/05/22/cxqBhkDFXmNb4fC.png" alt="无向图.png"><img src="https://s2.loli.net/2023/05/22/WyAsc3gnGuLPSXQ.png" alt="有向图.png"></p><h3 id="简单图、多重图"><a href="#简单图、多重图" class="headerlink" title="简单图、多重图"></a>简单图、多重图</h3><ul><li>简单图</li><li>多重图</li></ul><h3 id="顶点的度、入度、出度"><a href="#顶点的度、入度、出度" class="headerlink" title="顶点的度、入度、出度"></a>顶点的度、入度、出度</h3><ul><li><p>无向图：顶点v的度是指依附于改顶点的边的条数，极左TD(v)</p></li><li><p>有向图：</p><p>​入读是以顶点v为终点的有向边的数目，记为ID(v)</p><p>​出度是以顶点v为起点的有向边的数目，记为OD(v)</p><p>​顶点的度等于入度和出度之和，TD(v)&#x3D;ID(v)+OD(v)</p></li></ul><h3 id="顶点-顶点的关系描述"><a href="#顶点-顶点的关系描述" class="headerlink" title="顶点-顶点的关系描述"></a>顶点-顶点的关系描述</h3><ul><li><font color="red">路径</font>：顶点v1到顶点v2之间的一条路径</li><li><font color="red">回路</font>：第一个顶点和最后一个顶点相同的路径称为回路或环</li><li><font color="red">简单路径</font>：在路径序列中，顶点不重复出现的路径称为简单路径。</li><li><font color="red">简单回路</font>:除第一个顶点和最后一个顶点外，其余顶点不重复出现的回路称为简单回路。</li><li><font color="red">路径长度</font>:路径上边的数目</li><li><font color="red">点到点的距离</font>:从顶点u出发到顶点v的最短路径若存在，则此路径的长度称为从u到v的距离。若从u到v根本不存在路径，则记该距离为无穷</li><li><font color="red">无向图</font>中，若从顶点v到顶点w有路径存在，则称v和w是<font color="red">连通</font>的</li><li><font color="red">有向图</font>中，若从顶点v到顶点w和从顶点w到顶点v之间都有路径，则称这两个顶点是<font color="red">强连通</font>的</li></ul><h2 id="几种特殊的图"><a href="#几种特殊的图" class="headerlink" title="几种特殊的图"></a>几种特殊的图</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2023/05/19/%E6%A0%91/"/>
      <url>/2023/05/19/%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li><p>节点的内部结构</p><p><img src="/img/%E8%8A%82%E7%82%B9%E5%86%85%E9%83%A8.png"></p></li><li><p><img src="/img/%E6%95%B0%E4%B8%93%E4%B8%9A%E5%90%8D%E8%AF%8D.png"></p></li></ul><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><ul><li>规则：任意节点左右子树不超过一</li><li>平衡二叉树的旋转机制<ul><li>左旋</li><li>右旋</li></ul></li></ul><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><ul><li>红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构。</li><li>1972年出现，当时被称之为平衡二叉B树。后来，1978年被修改为如今的”红黑树”。</li><li>它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点的颜色，</li><li>每一个节点可以是红或者黑;红黑树不是高度平衡的，它的平衡是通过”红黑规则”进行实现的</li></ul><h2 id="红黑规则"><a href="#红黑规则" class="headerlink" title="红黑规则"></a>红黑规则</h2><ul><li>每一个节点或是红色的，或者是黑色的</li><li>根节点必须是黑色</li><li>如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点，每个叶节点(Nil)是黑色的</li><li>如果某一个节点是红色，那么它的子节点必须是黑色(不能出现两个红色节点相连的情况)</li><li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点;</li></ul><img src="红黑树节点.png" style="zoom:50%;" /><ul><li>红黑树添加节点的规则：<ul><li>添加节点默认是红色(效率高)</li><li><img src="/红黑树添加节点的规则.png" style="zoom:67%;" /></li></ul></li></ul><p><strong>更多内容请见 :point_right:<a href="https://flowus.cn/czlifetime/4fe006af-a7d0-4ef3-94b9-09f775b9334d">链接</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建个人博客</title>
      <link href="/2023/05/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始搭建个人博客"><a href="#从零开始搭建个人博客" class="headerlink" title="从零开始搭建个人博客"></a>从零开始搭建个人博客</h1><hr><p>我为什么要搭建个人博客？</p><ol><li>记录美好生活；</li><li>提升自己的技术水平；</li><li>空闲时间娱乐；</li></ol><hr><p><font color = "red" size ="5">本博客由Github+Hexo搭建，下面我来介绍我做这个博客的全过程：</font></p><h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><ol><li><p>首先进入<a href="https://github.com/">GitHub官网</a></p></li><li><p>点击Sign up</p></li></ol><p><img src="https://s2.loli.net/2023/05/26/4spkv6yjKPYq2Qt.png"></p><ol start="3"><li><p>输入你要注册的邮箱、密码<img src="https://s2.loli.net/2023/05/26/w5rAt1McU8DfLZF.png"></p></li><li><p>Create account</p></li></ol><p><img src="https://s2.loli.net/2023/05/26/qJ6LpkECcez42dF.png"></p><ol start="5"><li>依次按照github的提示来做，之后就省略，不难。</li></ol><h2 id="Git安装步骤"><a href="#Git安装步骤" class="headerlink" title="Git安装步骤"></a>Git安装步骤</h2><ol><li><p>进入<a href="https://git-scm.com/">Git官网</a>,想、点击Downloads</p><p><img src="https://s2.loli.net/2023/05/26/XCvmpUekgtPsNc1.png"></p></li><li><p>选择自己的系统</p><p><img src="https://s2.loli.net/2023/05/26/NVbQZjwHz5kDGqx.png"></p></li><li><p>选择自己的适合的版本<img src="https://s2.loli.net/2023/05/26/NVbQZjwHz5kDGqx.png"></p></li></ol><p>​( 国内下载的速度慢，有时候还会下载失败，我这里提供<a href="https://www.aliyundrive.com/s/32emvmTN9aV">Git-2.40.1-64-bit的安装包</a> )</p><ol start="4"><li><p>下载完成打开</p></li><li><p><img src="https://s2.loli.net/2023/05/26/yl4izRvqdTBLCn1.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/eNLwi4Sop3kAs8X.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/FmR3fzUq6wNl91H.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/uWtBQJraKdRG7Zh.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/rwGlm473aKEMWvA.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/D7NuTQsWAHjlrwy.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/TsWILrDS98yoOGb.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/Vn2f47LztITKk5p.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/Bzsw2Djd7FQc8m1.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/gmIUl8jCiRG2c5M.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/ECMy75odNPawH3b.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/SpCgHmPqcwUENIh.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/nERkNgU5zpiqxSX.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/NJkGvSWAt6wdFRH.png"></p></li><li><p><img src="https://s2.loli.net/2023/05/26/nHdCWkv5O92Sb3D.png"></p></li><li><p>鼠标左击出现这种情况就可以了</p><p><img src="https://s2.loli.net/2023/05/26/SQlBgaF2YvuLcCy.png"></p></li><li><p>打开Git Bash，输入git出现这种情况就可以了</p><p><img src="https://s2.loli.net/2023/05/26/ySnF47b2xWUaQ9i.png"></p></li></ol><h2 id="绑定GitHub并提交文件"><a href="#绑定GitHub并提交文件" class="headerlink" title="绑定GitHub并提交文件"></a>绑定GitHub并提交文件</h2><ol><li><p>打开Git bash 输入ssh，查看本机是否安装SSH</p><p><img src="https://s2.loli.net/2023/05/26/mKTCNa8wS2BYPuI.png"></p></li><li><p>输入<code>ssh-keygen -t rsa</code>，指定生成秘钥，接着再点击四次回车键，生成两个文件，分别为<code>id_rsa</code>，<code>id_rsa.pub</code>，按照指定的文件位置打开<code>id_rsa.pub</code>，复制下来</p><p><img src="https://s2.loli.net/2023/05/26/lmLI6WPkRhKiJcA.png"></p></li><li><p>打开github，在settings中<code>SSH and GPG keys</code>中添加秘钥，名称加不加都行</p><p><img src="https://s2.loli.net/2023/05/26/EesFogtycpwb3JV.png"></p><p><img src="https://s2.loli.net/2023/05/26/MK4F9RpHiC7OxIS.png"></p></li><li><p>验证是否成功，在Git Bash中输入<code>ssh -T github@github.com</code>进行验证</p><p><img src="https://s2.loli.net/2023/05/26/N8KvWDrzjohAwdb.png"></p></li></ol><h2 id="安装node-js和Hexo"><a href="#安装node-js和Hexo" class="headerlink" title="安装node.js和Hexo"></a>安装node.js和Hexo</h2><h3 id="安装node-js及环境变量适配"><a href="#安装node-js及环境变量适配" class="headerlink" title="安装node.js及环境变量适配"></a>安装node.js及环境变量适配</h3><p>大家可以看这篇<a href="https://blog.csdn.net/antma/article/details/86104068">文章</a>，内容相当的详细</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li><p>在github中新建一个仓库</p><p><img src="D:\Desktop\笔记\图片\GWQ2IX1NctS6TVR.png"></p></li><li><p>仓库名为<code>用户名+github.io</code></p><p><img src="https://s2.loli.net/2023/05/26/zHRwbt15yGinTIU.png"></p></li><li><p>点击到仓库的settings，出现这种情况就可以了</p><p><img src="https://s2.loli.net/2023/05/26/mevcw1kIht5UELn.png"></p></li><li><p>安装Hexo：在任意一个盘符下面新建一个<code>Blog</code>文件夹打开文件夹，使用git Bash 的管理员身份运行，输入<code>npm install -g hexo-cli</code>，安装完成之后，在使用<code>hexo init</code>命令初始化一下，输入<code>hexo g</code>静态部署，输入<code>hexo s</code>可以本地预览，在浏览器中输入<code>localhost:4000</code>，就可以本地预览网页了</p></li><li><p>将Hexo部署到GitHub中：打开Blog文件夹，打开<code>_config.yml</code>文件，滑到文件的最下方，修改</p><p><img src="https://s2.loli.net/2023/05/26/at2KjYhmLPAE84k.png"></p><p><img src="https://s2.loli.net/2023/05/26/16b3vVJNHitP4oX.png"></p><p><img src="https://s2.loli.net/2023/05/26/fSyYRl5OIFAJhcd.png"></p></li><li><p>然后回到<code>Blog</code>文件夹中，打开Git Bash，安装Git部署插件，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>再输入以下的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存文件db.json和已生成的静态文件public</span><br><span class="line">hexo g     #生成网站静态文件到默认设置的 public 文件夹(hexo generate的缩写)</span><br><span class="line">hexo d     #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>你的用户名+github.io</code>就可以访问网站了</p></li></ol><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><ol><li><p>域名绝大部分是付费的，但是也有免费的，比如我的这个czlifetime.eu.org，具体的申请教程在<a href="https://www.bilibili.com/video/BV1gs4y1J7xZ/?spm_id_from=333.880.my_history.page.click&vd_source=f38da837f7ffc103f340849927ff2d1f">这</a></p></li><li><p>得到域名后，在阿里云、腾讯云、华为云等可以解析，添加记录：A @ 185.199.108.153 和 A @ 185.199.109.153 和 A @ 185.199.110.153 和 A @ 185.199.111.153，任意选一个或两个就可以了</p></li><li><p>打开Blog文件夹里的source文件夹，添加CNAME文件，可以先创建一个CNAME.txt文件，打开后写上你的域名，不要加www否则每次访问都必须加www，但如果不带有www，以后访问的时候带不带www都可以访问，保存后记得要重命名，将.txt删除</p></li><li><p>第三步回到Blog 文件夹，右键打开Git Bash，依次输入下面三条命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存文件db.json和已生成的静态文件public</span><br><span class="line">hexo g     #生成网站静态文件到默认设置的 public 文件夹(hexo generate的缩写)</span><br><span class="line">hexo d     #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure></li><li><p>打开GitHub，看看CNAME文件是否已经在你的项目中，如果没有，可以在github的仓库中添加，最后github中也要把你的域名写进去</p><p><img src="https://s2.loli.net/2023/05/26/Z5SmLtMvVpyW4T3.png"></p></li></ol><h2 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h2><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p><code>hexo</code>有很多种主题，我推荐8种主题</p><ol><li>Butterfly<ul><li>GitHub地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></li><li>在线演示：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></li></ul></li><li>ICARUS<ul><li>GitHub地址：<a href="https://github.com/ppoffice/hexo-theme-icarus">https://github.com/ppoffice/hexo-theme-icarus</a></li><li>在线演示：<a href="https://ppoffice.github.io/hexo-theme-icarus/">https://ppoffice.github.io/hexo-theme-icarus/</a></li></ul></li><li>Fluid<ul><li>GitHub地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></li><li>在线演示：<a href="https://hexo.fluid-dev.com/">hexo.fluid-dev.com&#x2F;</a></li></ul></li><li>Volantis<ul><li>GitHub地址：<a href="https://github.com/volantis-x/hexo-theme-volantis">https://github.com/volantis-x/hexo-theme-volantis</a></li><li>在线演示：<a href="https://volantis.js.org/">volantis.js.org</a></li></ul></li><li>Snippet<ul><li>GitHub地址：<a href="https://github.com/shenliyang/hexo-theme-snippet">https://github.com/shenliyang/hexo-theme-snippet</a></li><li>在线演示：<a href="https://snippet.shenliyang.com/">snippet.shenliyang.com&#x2F;</a></li></ul></li><li>Hacker<ul><li>GitHub地址：<a href="https://github.com/CodeDaraW/Hacker">https://github.com/CodeDaraW/Hacker</a></li><li>在线演示：<a href="https://blog.daraw.cn/">blog.daraw.cn&#x2F;</a></li></ul></li><li>3-hexo<ul><li>GitHub地址：<a href="https://github.com/yelog/hexo-theme-3-hexo">https://github.com/yelog/hexo-theme-3-hexo</a></li><li>在线演示：<a href="https://yelog.org/">yelog.org</a></li></ul></li><li>Cactus<ul><li>GitHub地址：<a href="https://github.com/probberechts/hexo-theme-cactus">https://github.com/probberechts/hexo-theme-cactus</a></li><li>在线演示：<a href="https://probberechts.github.io/hexo-theme-cactus/">probberechts.github.io&#x2F;hexo-theme-cactus&#x2F;</a></li></ul></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>点开GitHub的地址，详细的配置就在首页的md文件中，这里不过多赘述</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
